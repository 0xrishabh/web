// import variables and mixins
@import "./gc-mixins";

// .border-top-[1-5]
@include border('top', 1, 5);

// .border-left-[1-5]
@include border('left', 1, 5);

// .border-bottom-[1-5]
@include border('bottom', 1, 5);

// .border-right-[1-5]
@include border('right', 1, 5);

// .border-[grey, primary, secondary, danger, info, dark, light]
@include border-colors(
  'grey' lightgray,
  'primary' $blue,
  'secondary' $green,
  'danger' $red,
  'info' $yellow,
  'dark' $dark,
  'light' $light
);

// .line-height-[1-5]
@include line-height(
  1 1,
  2 1.4,
  3 1.8,
  4 2.2,
  5 2.5
);

// .line-clamp-[1-5]
@include line-clamp(1, 5);

// .gap-[1-5]
@include gap(1, 5);

// lighter grey styling
.bg-lighter {
  background-color: $gc-grey-100;
}

.text-lighter {
  color: $gc-grey-100;
}

// hover effects
.hover-underline:not(:disabled):not(.disabled):not(.active):hover {
  text-decoration: underline!important
}

.text-primary-hover:hover {
  color: $gc-violet-500!important;
}

// invalid form state
.invalid {

  input.invalid, input:invalid, .form__checkbox input:invalid + .form__label::before,
  & > .btn-radio:not(.disabled), & > .btn-group-toggle .btn-radio:not(.disabled),
  .quill-editor.invalid .ql-snow, .form__radio input:invalid + label:after,
  .checkbox_container input:invalid + span + .filter-label > label:before  {
    border-color:#D44D6E;
  }

  .vs__selected-options > input:invalid {
    min-height: 21px;
    box-shadow:
      -7px -9px 0px 0px #fff, 30px -9px 0px 0px #fff, 30px 5px 0px 0px #fff, -7px 5px 0px 0px #fff,
      -8px -10px 0px 0px #D44D6E, 31px -10px 0px 0px #D44D6E, 31px 6px 0px 0px #D44D6E, -8px 6px 0px 0px #D44D6E;
    border-radius: 1px;
    border: none;
    z-index: 0;
  }
}

// helpers to fix top and bottom positions
.bottom-0 {
  bottom: 0px;
}

.top-0 {
  top: 0px;
}

// background-image helpers
.bg-img-cover {
  background-repeat: no-repeat;
  background-size: cover;
}

.bg-img-contain {
  background-repeat: no-repeat;
  background-size: contain;
}

// flex rules (columns at break-points)
.flex-basis-auto {
  flex-basis: auto;
}
.flex-basis-25 {
  flex-basis: 25%;
}
.flex-basis-33 {
  flex-basis: 33%;
}
.flex-basis-50 {
  flex-basis: 50%;
}
.flex-basis-100 {
  flex-basis: 100%;
}

@media (min-width: 768px) {
  .flex-basis-md-auto {
    flex-basis: auto;
  }
  .flex-basis-md-25 {
    flex-basis: 25%;
  }
  .flex-basis-md-33 {
    flex-basis: 33%;
  }
  .flex-basis-md-50 {
    flex-basis: 50%;
  }
  .flex-basis-md-100 {
    flex-basis: 100%;
  }
}

@media (min-width: 992px) {
  .flex-basis-lg-auto {
    flex-basis: auto;
  }
  .flex-basis-lg-25 {
    flex-basis: 25%;
  }
  .flex-basis-lg-33 {
    flex-basis: 33%;
  }
  .flex-basis-lg-50 {
    flex-basis: 50%;
  }
  .flex-basis-lg-100 {
    flex-basis: 100%;
  }
}

// col-gaps for > md when using .row
@media (min-width: 768px) {
  .row > .col-gap-border {
    box-sizing: border-box;
    border: 0.5rem solid transparent;
    background-clip: padding-box;
  }

  .row > .col-gaps-2-sm:nth-of-type(1) {
    padding-right: 0.5rem!important;
  }
  .row > .col-gaps-2-sm:nth-of-type(2) {
    padding-left: 0.5rem!important;
  }

  .row > .col-gaps-2:nth-of-type(1) {
    padding-right: 2rem!important;
  }
  .row > .col-gaps-2:nth-of-type(2) {
    padding-left: 2rem!important;
  }

  .row > .col-gaps-3:nth-of-type(1) {
    padding-right: 2rem!important;
  }
  .row > .col-gaps-3:nth-of-type(2) {
    padding-left: 1rem!important;
    padding-right: 1rem!important;
  }
  .row > .col-gaps-3:nth-of-type(3) {
    padding-left: 2rem!important;
  }
}
