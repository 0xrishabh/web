{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Gitcoin Gitcoin Grows Open Source. Learn more at https://gitcoin.co web repo This is the website that is live at gitcoin.co master branch - staging stable branch - live on gitcoin.co Documentation https://docs.gitcoin.co How to interact with this repo Table of Contents Gitcoin web repo Documentation How to interact with this repo Table of Contents On Github On Gitcoin What is Gitcoin? Developing HTTPS API Running locally With Docker (Recommended) Without Docker Overriding Application Defaults Trying out Gitcoin Posting your first issue Integrating Gitcoin Integrating the 'available work widget' into your repository Adding GitcoinBot to your repo Adding your token to Gitcoin High Level flows... Bounties Showing Support to Individuals Tips Kudos Licenses On Github Star and watch this github repository to stay up to date, we're pushing new code several times per week! Check out the CHANGELOG for details about recent changes to this repository. Also, want to become a contributor ? Checkout our guidelines & styleguide . check out the gitcoinco organization-wide repo . check out the open issues list, especially the discussion label and easy-pickings . On Gitcoin Check out the available open issues on Gitcoin . What is Gitcoin? Functionally, the app has several key features: Smart Contracts -- Where funded issues are stored and indexed. Brochureware -- Describes the project. Funded Issue Explorer -- A searchable index of all of the work available in the system. Funded Issue Submission / Acceptance flow -- Interface between the application and web3. API - the HTTPS API Bot - the GitcoinBot More about how/why to interact with web3 here . Technically, the system is architected: Web3 The main source of truth for the system is the Ethereum blockchain. Check out the smart contracts . Web2 This part of the app is built with Python, Django, Postgres, and a handful of other tools that are common in the web2 ecosystem. Web 3 Bridge This is the bridge between web3 and the rest of the application. Mostly built in javascript(web3js) and python(web3py). Brochureware Just a nice little landing page telling folks what the Gitcoin project is. Developing HTTPS API For more information on the HTTPS API, please view the api README Running locally With Docker (Recommended) For more information on running the app locally, please view the documentation for running gitcoinco/web with Docker Without Docker For more information on running the app locally, please view the documentation for running gitcoinco/web without Docker Overriding Application Defaults For more information on overriding the local dev environment configuration defaults, please view the environment variables documentation Trying out Gitcoin Posting your first issue If you have some work on your Github Issues board that you don't have time (or skills) to do. are dependant upon an upstream repo for something, and you'd like to incentivize them to work on it. try posting a funded issue at https://gitcoin.co/new . Integrating Gitcoin Basics Getting Started With Gitcoin Fund an Issue on Gitcoin Advanced Make a Contributor Friendly Repo Set your OSS repos monetary policy Payout Several Contribs at Once Crowdfund Bounties Make a Gitcoin ENS Name Background Everything you need to know about Gitcoin Our Vision: Open Source Money will BUIDL the OSS Ecosystem Testimonials & Case Studies Augur Balance uPort Ethereum Foundation Market Protocol Integrating the 'available work widget' into your repository This widget will help you advertise that you support Gitcoin bounties, so that your community knows the best place to contribute. Check out the widget documentation to learn how Adding GitcoinBot to your repo Gitcoinbot will allow you to add issues straight from github. Check out the gitcoinbot readme to learn how Adding your token to Gitcoin Have an ERC20 compatible token that you'd like to use on the platform? Great! Submit this form to submit it to the system High Level flows... Bounties Supporting Individuals Tips Kudos Bounties This is the high level flow of a bounty on Gitcoin: Chain of Custody Bounty Funder's Wallet StandardBounties Smart Contract deployed at 0x2af47a65da8cd66729b4209c22017d6a5c2d2400 (Submission Made) (Submission Accepted) Recipient's Wallet Anywhere between 2 and 4 above, Funder may withdraw their funds via 'Cancel Bounty' function for any reason. We may introduce Arbitration via Delphi at some point in the future. Until then, we are lucky that Github users are very protective of their reputation, and therefore very kind to each other, and disputes have not generally arisen. Showing Support to Individuals via Tips A free, fast way to show immediate gratitude towards an individual via github username or email address via Kudos Showcases special skills and appreciation towards other Gitcoin members. Tips This is the high level flow of a tip on Gitcoin: Kudos Note: - Crowdfunded bounties + bulk payouts are secured by Tips (at least until Standard Bounties 2.0 is released). - Kudos are also secured by Tips Licenses Code - GNU AFFERO GENERAL PUBLIC LICENSE Creative assets -- Attribution-NonCommercial-NoDerivatives 4.0 International","title":"Home"},{"location":"#gitcoin","text":"Gitcoin Grows Open Source. Learn more at https://gitcoin.co","title":"Gitcoin"},{"location":"#web-repo","text":"This is the website that is live at gitcoin.co master branch - staging stable branch - live on gitcoin.co","title":"web repo"},{"location":"#documentation","text":"https://docs.gitcoin.co","title":"Documentation"},{"location":"#how-to-interact-with-this-repo","text":"","title":"How to interact with this repo"},{"location":"#table-of-contents","text":"Gitcoin web repo Documentation How to interact with this repo Table of Contents On Github On Gitcoin What is Gitcoin? Developing HTTPS API Running locally With Docker (Recommended) Without Docker Overriding Application Defaults Trying out Gitcoin Posting your first issue Integrating Gitcoin Integrating the 'available work widget' into your repository Adding GitcoinBot to your repo Adding your token to Gitcoin High Level flows... Bounties Showing Support to Individuals Tips Kudos Licenses","title":"Table of Contents"},{"location":"#on-github","text":"Star and watch this github repository to stay up to date, we're pushing new code several times per week! Check out the CHANGELOG for details about recent changes to this repository. Also, want to become a contributor ? Checkout our guidelines & styleguide . check out the gitcoinco organization-wide repo . check out the open issues list, especially the discussion label and easy-pickings .","title":"On Github"},{"location":"#on-gitcoin","text":"Check out the available open issues on Gitcoin .","title":"On Gitcoin"},{"location":"#what-is-gitcoin","text":"Functionally, the app has several key features: Smart Contracts -- Where funded issues are stored and indexed. Brochureware -- Describes the project. Funded Issue Explorer -- A searchable index of all of the work available in the system. Funded Issue Submission / Acceptance flow -- Interface between the application and web3. API - the HTTPS API Bot - the GitcoinBot More about how/why to interact with web3 here . Technically, the system is architected: Web3 The main source of truth for the system is the Ethereum blockchain. Check out the smart contracts . Web2 This part of the app is built with Python, Django, Postgres, and a handful of other tools that are common in the web2 ecosystem. Web 3 Bridge This is the bridge between web3 and the rest of the application. Mostly built in javascript(web3js) and python(web3py). Brochureware Just a nice little landing page telling folks what the Gitcoin project is.","title":"What is Gitcoin?"},{"location":"#developing","text":"","title":"Developing"},{"location":"#https-api","text":"For more information on the HTTPS API, please view the api README","title":"HTTPS API"},{"location":"#running-locally","text":"","title":"Running locally"},{"location":"#with-docker-recommended","text":"For more information on running the app locally, please view the documentation for running gitcoinco/web with Docker","title":"With Docker (Recommended)"},{"location":"#without-docker","text":"For more information on running the app locally, please view the documentation for running gitcoinco/web without Docker","title":"Without Docker"},{"location":"#overriding-application-defaults","text":"For more information on overriding the local dev environment configuration defaults, please view the environment variables documentation","title":"Overriding Application Defaults"},{"location":"#trying-out-gitcoin","text":"","title":"Trying out Gitcoin"},{"location":"#posting-your-first-issue","text":"If you have some work on your Github Issues board that you don't have time (or skills) to do. are dependant upon an upstream repo for something, and you'd like to incentivize them to work on it. try posting a funded issue at https://gitcoin.co/new .","title":"Posting your first issue"},{"location":"#integrating-gitcoin","text":"Basics Getting Started With Gitcoin Fund an Issue on Gitcoin Advanced Make a Contributor Friendly Repo Set your OSS repos monetary policy Payout Several Contribs at Once Crowdfund Bounties Make a Gitcoin ENS Name Background Everything you need to know about Gitcoin Our Vision: Open Source Money will BUIDL the OSS Ecosystem Testimonials & Case Studies Augur Balance uPort Ethereum Foundation Market Protocol","title":"Integrating Gitcoin"},{"location":"#integrating-the-available-work-widget-into-your-repository","text":"This widget will help you advertise that you support Gitcoin bounties, so that your community knows the best place to contribute. Check out the widget documentation to learn how","title":"Integrating the 'available work widget' into your repository"},{"location":"#adding-gitcoinbot-to-your-repo","text":"Gitcoinbot will allow you to add issues straight from github. Check out the gitcoinbot readme to learn how","title":"Adding GitcoinBot to your repo"},{"location":"#adding-your-token-to-gitcoin","text":"Have an ERC20 compatible token that you'd like to use on the platform? Great! Submit this form to submit it to the system","title":"Adding your token to Gitcoin"},{"location":"#high-level-flows","text":"Bounties Supporting Individuals Tips Kudos","title":"High Level flows..."},{"location":"#bounties","text":"This is the high level flow of a bounty on Gitcoin: Chain of Custody Bounty Funder's Wallet StandardBounties Smart Contract deployed at 0x2af47a65da8cd66729b4209c22017d6a5c2d2400 (Submission Made) (Submission Accepted) Recipient's Wallet Anywhere between 2 and 4 above, Funder may withdraw their funds via 'Cancel Bounty' function for any reason. We may introduce Arbitration via Delphi at some point in the future. Until then, we are lucky that Github users are very protective of their reputation, and therefore very kind to each other, and disputes have not generally arisen.","title":"Bounties"},{"location":"#showing-support-to-individuals","text":"via Tips A free, fast way to show immediate gratitude towards an individual via github username or email address via Kudos Showcases special skills and appreciation towards other Gitcoin members.","title":"Showing Support to Individuals"},{"location":"#tips","text":"This is the high level flow of a tip on Gitcoin:","title":"Tips"},{"location":"#kudos","text":"Note: - Crowdfunded bounties + bulk payouts are secured by Tips (at least until Standard Bounties 2.0 is released). - Kudos are also secured by Tips","title":"Kudos"},{"location":"#licenses","text":"Code - GNU AFFERO GENERAL PUBLIC LICENSE Creative assets -- Attribution-NonCommercial-NoDerivatives 4.0 International","title":"Licenses"},{"location":"grants_faq/","text":"Grants General Documentation grants is built upon EIP 1337 . specifically, it is built upon this smart contract which was audit'ed by ZKLabs in Q4 2018 . How Grants works When you create a new grant at /grants/new , you are deploying a new version of this contract. When you fund a new grant at /grants/<pk>/<slug>/fund , you are approve() ing a batch of ERC20 tokens to be sent, and you are signing a message that will be used to create recurring transactions down the line. How are those transactions created, you say? Well, it's via a sub-miner .... Sub Miner The subminer takes the signed message you created in the frontend (see above), and runs executeSubscription every periodSeconds interval. Here's what it does in psuedocode: iterate through all subscriptions: contract.methods.getSubscriptionHash(..) ready = contract.methods.isSubscriptionReady(..) if ready: contract.methods.executeSubscription(..) In order to run it, this is what you want to do: ./manage.py subminer <network> <optional_live_flag> aka ./manage.py subminer rinkeby --live When you run this code, it looks through all of the active grants on your local on <network> , and then runs executeSubscription() on them. if executeSubscription() succeeds, it will trigger some other actions (mostly emails, db mutations, etc) Heres an example successful tx created by the subminer: https://rinkeby.etherscan.io/tx/0x274c159a6d89513c3f0b533a5329bef4ce02b3ffc770bece9a8ce5d269319f72 More information For more information on the subminer for grants, checkout https://github.com/gitcoinco/web/issues/2424 https://github.com/gitcoinco/web/pull/3055 https://gitcoin.co/slack http://1337alliance.com","title":"Local Setup"},{"location":"grants_faq/#grants-general-documentation","text":"grants is built upon EIP 1337 . specifically, it is built upon this smart contract which was audit'ed by ZKLabs in Q4 2018 .","title":"Grants General Documentation"},{"location":"grants_faq/#how-grants-works","text":"When you create a new grant at /grants/new , you are deploying a new version of this contract. When you fund a new grant at /grants/<pk>/<slug>/fund , you are approve() ing a batch of ERC20 tokens to be sent, and you are signing a message that will be used to create recurring transactions down the line. How are those transactions created, you say? Well, it's via a sub-miner ....","title":"How Grants works"},{"location":"grants_faq/#sub-miner","text":"The subminer takes the signed message you created in the frontend (see above), and runs executeSubscription every periodSeconds interval. Here's what it does in psuedocode: iterate through all subscriptions: contract.methods.getSubscriptionHash(..) ready = contract.methods.isSubscriptionReady(..) if ready: contract.methods.executeSubscription(..) In order to run it, this is what you want to do: ./manage.py subminer <network> <optional_live_flag> aka ./manage.py subminer rinkeby --live When you run this code, it looks through all of the active grants on your local on <network> , and then runs executeSubscription() on them. if executeSubscription() succeeds, it will trigger some other actions (mostly emails, db mutations, etc) Heres an example successful tx created by the subminer: https://rinkeby.etherscan.io/tx/0x274c159a6d89513c3f0b533a5329bef4ce02b3ffc770bece9a8ce5d269319f72","title":"Sub Miner"},{"location":"grants_faq/#more-information","text":"For more information on the subminer for grants, checkout https://github.com/gitcoinco/web/issues/2424 https://github.com/gitcoinco/web/pull/3055 https://gitcoin.co/slack http://1337alliance.com","title":"More information"},{"location":"kudos_faq/","text":"Kudos General Documentation How to populate my DB with kudos First be aware to update your .env with this entries KUDOS_NETWORK=rinkeby KUDOS_OWNER_ACCOUNT= YOUR_ADDRESS KUDOS_LOCAL_SYNC=off Then run the commands docker-compose up docker-compose exec web bash -c 'cd app && python manage.py sync_kudos rinkeby filter --start earliest' How do I MINT kudos on my local RPC node This answer assumes you're using docker. Run these commands # start from the directory on your local filesystem that contains the gitcoinco web repo cd .. git clone git@github.com:gitcoinco/Kudos721Contract.git cd Kudos721Contract npm install openzeppelin cd ../web bash scripts/mint_test_kudos.bash The above commands clone the Kudos smart contract, installs the dependencies, deploys the smart contract to ganache, and mints several kudos in the newly minted smart contract. After the scripts/mint_test_kudos.bash script runs, you will have kudos on your local docker container, via the localhost RPC node Where is Kudos deployed Please checkout the github repo for Kudos to see this information. Can I see the Kudos security audit Please checkout the github repo for Kudos to see this information. What is Kudos Direct Send Kudos Direct Send (KDS) is a direct send of a Kudos ERC 721 NFT from one Ethereum address to another. Are Kudos unique Kudos are semi-fungible tokens. Each kudos has a limited production run which is designated in the smart contract in the numClonesAllowed variable.. For example, this kudos has a total of 200 that will ever be in existence. When a new kudos is minted we create a new Gen 0 Kudos . That Gen 0 Kudos can then be cloned up to numClonesAllowed times, which will create numClonesAllowed Gen 1 Kudos . Creating limited production runs of Kudos allows us to manage the unit economics of Kudos. For example, it costs us $20 to pay our illustrator to create a new piece of artwork. Nobody is going to pay $20 for a Kudos NFT, so we instead offer a limited production run of 200 Kudos which are priced at $0.40 each. When that production run sells out, the artist has made gross $40 in revenue, which nets out to $20 in profit. What is Kudos Indirect Send? Kudos Indirect Send (KIS) enables Gitcoin users to send a Kudos to any github/gitcoin username . KIS is effectively a proxy account that can hold a Kudos 721 NFT until a recipient (who is authorized by a github username) claims it. The Kudos Indirect send architecture diagram is available here When is Kudos Indirect Send used and when is Kudos Direct Send Used? If a user has set a preferred Ethereum address in their account , KDS will be used. If not, KIS will be used. I have a question that's not listed here Checkout the Kudos FAQ here","title":"Local Setup FAQ"},{"location":"kudos_faq/#kudos-general-documentation","text":"","title":"Kudos General Documentation"},{"location":"kudos_faq/#how-to-populate-my-db-with-kudos","text":"First be aware to update your .env with this entries KUDOS_NETWORK=rinkeby KUDOS_OWNER_ACCOUNT= YOUR_ADDRESS KUDOS_LOCAL_SYNC=off Then run the commands docker-compose up docker-compose exec web bash -c 'cd app && python manage.py sync_kudos rinkeby filter --start earliest'","title":"How to populate my DB with kudos"},{"location":"kudos_faq/#how-do-i-mint-kudos-on-my-local-rpc-node","text":"This answer assumes you're using docker. Run these commands # start from the directory on your local filesystem that contains the gitcoinco web repo cd .. git clone git@github.com:gitcoinco/Kudos721Contract.git cd Kudos721Contract npm install openzeppelin cd ../web bash scripts/mint_test_kudos.bash The above commands clone the Kudos smart contract, installs the dependencies, deploys the smart contract to ganache, and mints several kudos in the newly minted smart contract. After the scripts/mint_test_kudos.bash script runs, you will have kudos on your local docker container, via the localhost RPC node","title":"How do I MINT kudos on my local RPC node"},{"location":"kudos_faq/#where-is-kudos-deployed","text":"Please checkout the github repo for Kudos to see this information.","title":"Where is Kudos deployed"},{"location":"kudos_faq/#can-i-see-the-kudos-security-audit","text":"Please checkout the github repo for Kudos to see this information.","title":"Can I see the Kudos security audit"},{"location":"kudos_faq/#what-is-kudos-direct-send","text":"Kudos Direct Send (KDS) is a direct send of a Kudos ERC 721 NFT from one Ethereum address to another.","title":"What is Kudos Direct Send"},{"location":"kudos_faq/#are-kudos-unique","text":"Kudos are semi-fungible tokens. Each kudos has a limited production run which is designated in the smart contract in the numClonesAllowed variable.. For example, this kudos has a total of 200 that will ever be in existence. When a new kudos is minted we create a new Gen 0 Kudos . That Gen 0 Kudos can then be cloned up to numClonesAllowed times, which will create numClonesAllowed Gen 1 Kudos . Creating limited production runs of Kudos allows us to manage the unit economics of Kudos. For example, it costs us $20 to pay our illustrator to create a new piece of artwork. Nobody is going to pay $20 for a Kudos NFT, so we instead offer a limited production run of 200 Kudos which are priced at $0.40 each. When that production run sells out, the artist has made gross $40 in revenue, which nets out to $20 in profit.","title":"Are Kudos unique"},{"location":"kudos_faq/#what-is-kudos-indirect-send","text":"Kudos Indirect Send (KIS) enables Gitcoin users to send a Kudos to any github/gitcoin username . KIS is effectively a proxy account that can hold a Kudos 721 NFT until a recipient (who is authorized by a github username) claims it. The Kudos Indirect send architecture diagram is available here","title":"What is Kudos Indirect Send?"},{"location":"kudos_faq/#when-is-kudos-indirect-send-used-and-when-is-kudos-direct-send-used","text":"If a user has set a preferred Ethereum address in their account , KDS will be used. If not, KIS will be used.","title":"When is Kudos Indirect Send used and when is Kudos Direct Send Used?"},{"location":"kudos_faq/#i-have-a-question-thats-not-listed-here","text":"Checkout the Kudos FAQ here","title":"I have a question that's not listed here"},{"location":"mk_advanced/","text":"Advanced Usage Performance and Profiling You can profile functions locally by enabling Django Silk by setting the environment variable: ENABLE_SILK to on in your .env file. If your local environment is already running, you will need to restart the web application via: docker-compose restart web Profiling a method Once enabled, you may use silk by decorating methods with @silk_profile . For example: from silk.profiling.profiler import silk_profile @silk_profile(name='View About') def about(request): context = { 'active': 'about', 'title': 'About', } return TemplateResponse(request, 'about.html', context) Viewing Profiling Results You may view the profiling results by visiting: http://localhost:8000/silk Additional Help Silk Documentation Silk Github Gitcoin Environment Variable Documentation","title":"Advanced"},{"location":"mk_advanced/#advanced-usage","text":"","title":"Advanced Usage"},{"location":"mk_advanced/#performance-and-profiling","text":"You can profile functions locally by enabling Django Silk by setting the environment variable: ENABLE_SILK to on in your .env file. If your local environment is already running, you will need to restart the web application via: docker-compose restart web","title":"Performance and Profiling"},{"location":"mk_advanced/#profiling-a-method","text":"Once enabled, you may use silk by decorating methods with @silk_profile . For example: from silk.profiling.profiler import silk_profile @silk_profile(name='View About') def about(request): context = { 'active': 'about', 'title': 'About', } return TemplateResponse(request, 'about.html', context)","title":"Profiling a method"},{"location":"mk_advanced/#viewing-profiling-results","text":"You may view the profiling results by visiting: http://localhost:8000/silk","title":"Viewing Profiling Results"},{"location":"mk_advanced/#additional-help","text":"Silk Documentation Silk Github Gitcoin Environment Variable Documentation","title":"Additional Help"},{"location":"mk_alternative_setup/","text":"Running Locally without Docker *Note: This setup method is not recommended. To ensure a consistent environment, please check out the Docker Setup Guide . ~/$ brew install libmaxminddb automake pkg-config libtool libffi gmp python3 openssl libvips libvips-dev libvips-tools ~/$ git clone https://github.com/gitcoinco/web.git ~/$ cd web/app ~/web/app$ cp app/local.env app/.env You will need to edit the app/.env file with your local environment variables. Look for config items that are marked # required . Configure Integrations (recommended) If you plan on using the Github integration, please read the third party integration guide . Static Asset Handling (optional) If you're testing in a staging or production style environment behind a CDN, pass the DJANGO_STATIC_HOST environment variable to your django web instance specifying the CDN URL. For example: DJANGO_STATIC_HOST='https://gitcoin.co' Setup Database PostgreSQL is the database used by this application. Here are some instructions for installing PostgreSQL on various operating systems. OSX Windows Ubuntu Once you have Postgres installed and running on your system, enter into a Postgres session. # For linux users ~/$ sudo -u postgres psql # For macOS users ~/$ psql -d postgres Create the database and a new privileged user. CREATE USER gitcoin_user WITH PASSWORD 'password'; CREATE DATABASE gitcoin WITH OWNER gitcoin_user; Exit Postgres session ~/$ \\q Update ~/web/app/app/.env with the connection details, if required. DATABASE_URL=psql://gitcoin_user:password@localhost:5432/gitcoin Setup Dependencies and Startup Server Setup Virtual Environment with Necessary Dependencies ~/web$ virtualenv -p python3.7 gcoin ~/web$ source gcoin/bin/activate ~/web$ pip3 install -r requirements/test.txt Alternatively, if any installation errors occur: *Note: A single error will stop the entire installation process when installing from a requirements file, this will install each module one at a time keeping installation failures isolated ~/web$ awk '!/^(-r)/' requirements/base.txt requirements/test.txt | xargs -n 1 pip3 install Startup Server ~/web/app$ ./manage.py migrate ~/web/app$ ./manage.py createcachetable ~/web/app$ ./manage.py get_prices ~/web/app$ ./manage.py runserver 0.0.0.0:8000 Navigate to http://localhost:8000/ . Create Django Admin ~/web/app$ ./manage.py createsuperuser Optional: Import bounty data from web3 to your database This can be useful if you'd like data to test with: or equivalently: ~/web/app$ ./manage.py sync_geth rinkeby -20 99999999999","title":"Alternative Setup"},{"location":"mk_alternative_setup/#running-locally-without-docker","text":"*Note: This setup method is not recommended. To ensure a consistent environment, please check out the Docker Setup Guide . ~/$ brew install libmaxminddb automake pkg-config libtool libffi gmp python3 openssl libvips libvips-dev libvips-tools ~/$ git clone https://github.com/gitcoinco/web.git ~/$ cd web/app ~/web/app$ cp app/local.env app/.env You will need to edit the app/.env file with your local environment variables. Look for config items that are marked # required .","title":"Running Locally without Docker"},{"location":"mk_alternative_setup/#configure-integrations-recommended","text":"If you plan on using the Github integration, please read the third party integration guide .","title":"Configure Integrations (recommended)"},{"location":"mk_alternative_setup/#static-asset-handling-optional","text":"If you're testing in a staging or production style environment behind a CDN, pass the DJANGO_STATIC_HOST environment variable to your django web instance specifying the CDN URL. For example: DJANGO_STATIC_HOST='https://gitcoin.co'","title":"Static Asset Handling (optional)"},{"location":"mk_alternative_setup/#setup-database","text":"PostgreSQL is the database used by this application. Here are some instructions for installing PostgreSQL on various operating systems. OSX Windows Ubuntu Once you have Postgres installed and running on your system, enter into a Postgres session. # For linux users ~/$ sudo -u postgres psql # For macOS users ~/$ psql -d postgres Create the database and a new privileged user. CREATE USER gitcoin_user WITH PASSWORD 'password'; CREATE DATABASE gitcoin WITH OWNER gitcoin_user; Exit Postgres session ~/$ \\q Update ~/web/app/app/.env with the connection details, if required. DATABASE_URL=psql://gitcoin_user:password@localhost:5432/gitcoin","title":"Setup Database"},{"location":"mk_alternative_setup/#setup-dependencies-and-startup-server","text":"","title":"Setup Dependencies and Startup Server"},{"location":"mk_alternative_setup/#setup-virtual-environment-with-necessary-dependencies","text":"~/web$ virtualenv -p python3.7 gcoin ~/web$ source gcoin/bin/activate ~/web$ pip3 install -r requirements/test.txt Alternatively, if any installation errors occur: *Note: A single error will stop the entire installation process when installing from a requirements file, this will install each module one at a time keeping installation failures isolated ~/web$ awk '!/^(-r)/' requirements/base.txt requirements/test.txt | xargs -n 1 pip3 install","title":"Setup Virtual Environment with Necessary Dependencies"},{"location":"mk_alternative_setup/#startup-server","text":"~/web/app$ ./manage.py migrate ~/web/app$ ./manage.py createcachetable ~/web/app$ ./manage.py get_prices ~/web/app$ ./manage.py runserver 0.0.0.0:8000 Navigate to http://localhost:8000/ .","title":"Startup Server"},{"location":"mk_alternative_setup/#create-django-admin","text":"~/web/app$ ./manage.py createsuperuser","title":"Create Django Admin"},{"location":"mk_alternative_setup/#optional-import-bounty-data-from-web3-to-your-database","text":"This can be useful if you'd like data to test with: or equivalently: ~/web/app$ ./manage.py sync_geth rinkeby -20 99999999999","title":"Optional: Import bounty data from web3 to your database"},{"location":"mk_changelog/","text":"Change Log v20180416.0.15 (2018-10-12) Full Changelog Merged pull requests: Update weekly roundup for 12OCT2018 #2430 ( mbeacom ) v20180416.0.14 (2018-10-11) Full Changelog Implemented enhancements: refactor grants/new #2423 ( thelostone-mc ) Closed issues: Implement \"Approve\" Page Frontend #2351 Implement Frontend - \"Subscription Terminated\" Email #2291 Implement Frontend - \"Grant Cancellation\" Email #2290 Implement Frontend - \"Update Notification\" Email #2289 Implement Frontend - \"New Grant\" Email #2288 Implement Frontend - \"Support Ended\" Email #2287 Implement Frontend - \"New Supporter\" Email #2286 Implement Frontend - \"Thank you for supporting 'grant x' email #2285 Create Design - \"Subscription Terminated\" Email #2090 Create Design - \"Granted Ended\" Email #2089 Create/modify \"Grants Index\" Page - Design #1889 v20180416.0.13 (2018-10-11) Full Changelog v20180416.0.12 (2018-10-11) Full Changelog v20180416.0.11 (2018-10-11) Full Changelog v20180416.0.10 (2018-10-11) Full Changelog v20180416.0.9 (2018-10-11) Full Changelog v20180416.0.8 (2018-10-11) Full Changelog v20180416.0.7 (2018-10-11) Full Changelog Closed issues: Crowdfund contributions not being included in some bounty totals on issue explorer #2228 v20180416.0.6 (2018-10-11) Full Changelog v20180416.0.5 (2018-10-11) Full Changelog Fixed bugs: ValueError: The 'github_svg' attribute has no file associated with it. #2417 v20180416.0.4 (2018-10-11) Full Changelog v20180416.0.3 (2018-10-11) Full Changelog v20180416.0.2 (2018-10-11) Full Changelog Closed issues: UI: Unaligned buttons on bounty page #2406 Merged pull requests: fixed button alignment on bounty page #2416 ( evgeniuz ) v20180416.0.1 (2018-10-11) Full Changelog Implemented enhancements: i'd like the 'where is my eth going' modal to show up on gitcoin.co/tips #2366 Update Tips with Updated Auto Complete #2362 Show hidden users their own profile page #2258 Approval Required: Make it Clear Who is Actually Working #2100 Move Moderator Controls out of main Work Area #2045 Optimize Activity query on index page #2034 Gitcoin rain Animation Performance #2029 Replace sync_gas_prices web scraping with json #1921 quarterly stats v2 -- funder and \"no action\" views #1036 Display github status on issues next to comment count? #749 Update Hours Dropdown in Funder Form #627 gitcoinbot tune up #596 As a user, I don't want to see github comment blocks in the bounty detail/description #538 Add Notes Field When Funding an Issue #475 [WIP] Added tooltip hover on tips page #2376 ( usmanmuhd ) tip : autocomplete shows payout address #2372 ( thelostone-mc ) Migrate image converter to pyvips #2346 ( mbeacom ) re-enables org profiles #2343 ( owocki ) WOC: Adds tooltip hover on top of user input field. #2334 ( usmanmuhd ) Fix overflowing text on toolbox cards #2322 ( willsputra ) bounty: hide start + submit work for funder #2315 ( thelostone-mc ) payout: added autocomplete #2296 ( thelostone-mc ) Timborden/location leaderboards #2268 ( timborden ) css: removing multiple font-family declarations #2192 ( thelostone-mc ) SVG and PNG conversions and handling for Avatars #2106 ( mbeacom ) dashboard: enable deep link of search #2062 ( thelostone-mc ) Change Bounty Details #1968 ( pinkiebell ) Confirming Auto-translation #1916 ( nanspro ) Fixed bugs: Increasing Funding Not Working #2407 bug - advanced payout #2380 new profile -- 'None' on tips received view #2341 Start work rejected emails have bad URI #2329 \"submit work\" button is greyed out #2308 get_amount endpoint raising 404 #2305 Posted Bounty did not import test from Github #2300 When on the /not_a_token page, text styling and size for the Gitcoin header toolbar is inconsistent. #2280 Profile \"four oh four\" #2254 Error: Invalid number of arguments to Solidity function #2248 bug - livepeer profile isnt showing the bounties it should #2246 Japanese translations throwing errors when executing makemessages #2234 IntegrityError: null value in column \"txn_hash_3\" violates not-null constraint #2232 Underscores in URLs results in italicized text #2217 bug - my profile shows my profile pic but it should show my avatar #2189 Bounty Crowdfunding USD Inaccurate #2179 UI issues with the nav on resizing #2177 No 'Stop Work' / 'Stop Work & Ding Rep' #2165 bug - avatar is wrong skin color #2150 Funder Clicked Kill Bounty on Accident #2144 Text unreadable due to low contrast with background on subscription form #2141 how it works page QA #2139 bug - You must be authenticated via github to use this feature when using Faucet #2104 Adjust cookie banner for iOS/Safari #2103 Widget errors #2063 bug - cookie header doesnt work with other languages #2052 Contributor Landing Page CSS Bug #2041 Clicking Stop Work Did Not Stop Work #2032 Bad USDT conversion data #2015 Disable Advanced Payout submission if required fields are empty/invalid #2010 Funder Unable to Approve Worker #1985 404s on gitcoin profiles #1952 Submit Work Prior To Approval #1951 Better State Management: \"No result found\" and \"Results\" are getting displayed at the same time #1938 Small issue with display #1934 AttributeError: 'list' object has no attribute 'split' #1919 Debug and resolve preferred_payout_address irregularities #1902 ValueError: The API key that you have entered is not valid, did you enter a username by mistake? #1898 User Not Receive Tips Email Notification and Notification in Profile Not Showing Up #1870 Single Payout Bounty Broken #1859 Stop Work displays on old Start Work activity feed entries #1854 Bug: Clicking in the form should clear the plan template #1852 Incorrect Funding Time Period Shown on Issue Details #1774 == BUG LIST - JULY 2018 == #1671 Status of 'DoneOpened' on paid out issues that have had their statues manually changed prior to payout #1647 css: remove overflow hidden #1616 Make Button Updates to Avatar Builder #1567 Show Just 1 Alert Banner for ERC20 Token #1566 avatar bug -- wrong eye color #1543 Avatar Builder Bugs #1523 Error: Invalid number of arguments to Solidity function #1453 BUG Personal Information Display on Unselected Option #1387 This bounty was 'killed' but gitcoinbot commented on the thread saying it was approved / accepted. #703 There is something wrong with links visibility in Gitcoin announcements mails. See screenshot. #702 Tips Should Not Remember Last Tipped Person #528 CSS changes to tooltip hover in tips #2415 ( usmanmuhd ) bug: advanced payout #2383 ( thelostone-mc ) Bounty row layout fix(es) #2374 ( pinkiebell ) Fix #2280 header text size inconsistent on /not_a_token /mission #2358 ( excalliburbd ) Display tip received time only if it exists #2345 ( arun1595 ) Fix tooltip of start and stop work links #2344 ( arun1595 ) fixed avatar builder color handling #2321 ( evgeniuz ) Resolve get_amount 404 on new bounty page #2306 ( mbeacom ) Adjust issue_details to use profile access token #2303 ( mbeacom ) Adjust premailer to use base_url #2265 ( mbeacom ) Adjust ENS registrar hash and error handling #2233 ( mbeacom ) Set up showdown to parse links #2218 ( arun1595 ) crowdfunded: bug fix #2180 ( thelostone-mc ) Add overflow in header if minihero not present #2080 ( SaptakS ) api: fixed offset param in explorer #2006 ( thelostone-mc ) Fix assemble_leaderboards to catch missing all_ cases #1851 ( mbeacom ) Closed issues: Improper design of tooltip hover in tip #2410 migrate gitcoin from web3js 0.2 to 1.0 #2369 bug - padding on /explorer and bounty #2367 Profile Enhancement - Bounties in Progress #2347 Upgrade to django 2.1.2 #2342 usability problem on the new profile - its hard to read the activities #2340 \"stop work\" button has the same copy on the popup box as the \"start work\" button #2307 Adding Gitcoin bot to your repo link broken #2299 as a user, i want linked live gitcoin exemplars in the bounty creation flow #2271 how/funder 502 bad gateway #2257 Account settings error #2255 Unable to submit work without ETH in Metamask #2243 Design - Advanced Pay - Separate Tips from Advanced Pay #2242 Build - Advanced Pay - Amount Should Add to 100% #2241 Build - Advanced Pay - Add User Auto Complete #2240 bug - i dont see a 'stop work' button on a bounty even though i am funder #2229 add grants video to landing page #2223 Advanced Pay - Show preview of where my ETH is going, so i can have faith my ETH is safe #2215 Create leaderboard by city/country/region #2213 as a user, i want to request a funding limit increase via a webform, so i don't have to go through the information complexity of contacting support (and so anyone on gitcoin core team can to limit increases) #2199 Add Gitcoin Requests Into E-Mail Drip Campaign #2198 Bug - Funded Issue Showing $0 USD #2191 \"Submit Work\" javascript error #2182 [DATA] Profile gives wrong impression (false data) #2168 Make It Clear Issue Has Been Crowdfunded V2 #2164 bug - quarterly roundup is broken #2151 Add meta tags to improve Gitcoin SEO #2147 Make Cancel Bounty More Explicit #2145 Update Cookie Banner with Shorter Text #2122 Submitting Work Twice #2118 Build ERC-1337 Landing Page #2116 bug - avatar builder does not register new assetes #2102 AttributeError: 'NoneType' object has no attribute 'interested' #2094 Create Design - \"Update Notification\" Email #2088 Create Design - \"Funds Withdrawn\" Email #2087 Create Design - \"Support Ended\" Email #2085 Create Design - \"New Grant\" Email #2084 Create Design - \"New Supporter\" email #2083 Create Design - \"Thank you for supporting \"grant X\" email #2082 suggestion: profiles should have the standard activity feed on them, instead of trying to parse everything out into 'completed bounties' and 'started bounties' etc #2077 SEO - Fix Soft 404 + Add Recommendations #2075 As a contributor, I don't want to have to do math to understand the total amount of a funded bounty that has additional crowd funding. #2072 ValueError: too many values to unpack (expected 2) #2066 As a developer on Gitcoin developing for Gitcoin, I would like some direction on how to use the Rinkeby network to test out Gitcoin #2065 Update Issue Expiring Email #2061 as a user who is bountying on behalf of my company, i want an invoice for a bounty, so i can expense it #2057 as a user, i want gitcoin.co/inbox, so i can manage my notifications (and action items) #2050 [Design] Inviting Specific Gitcoiners To Work #2038 Gitcoin Requests (v0: Fork of Gitcoin Faucet) #2036 TypeError: unsupported operand type(s) for +: 'float' and 'NoneType' #2031 Implement \"Create Grant\" Page - Frontend #2024 Implement \"Cancel Funding\" Page - Frontend #2023 Implement \"Grants Withdrawal\" Page - Frontend #2022 Implement \"Fund Grant\" Page #2020 issue explorer keyword bug #2011 Add Ability to Select a Contributor via autocomplete to Tip #2001 Submitted \"start work\" info-comment did not show up in the connected GitHub issue. #1999 Workers who are not approved to work on a task should not be warned for abandonment, the 3-day Gitcoin bot nudge should start from the point of approval, not the point of application #1996 as a bounty hunter, I want to be reminded to submit my work on Gitcoin once the ticket is closed on Github so I can get paid out for my work #1990 Multi-Party Payout Recipients Not Showing in 'Work Done' #1983 Auto-Approvals: No Update of Gitcoin Activity (in Issue Details) #1981 test github issue for demo to token foundry #1979 get_notifications - TypeError: string indices must be integers #1976 invalid literal for int() with base 10: '926)' #1972 No values in \"Denomination\" input #1970 DESIGN - As a potential contributor, I want the \"Top 3 Guarantee\" so I know that Gitcoin is worth my efforts. #1961 Create \"Grants Detail - Admin\" Page - Design #1960 Make it Easy for Funders to Reserve an Issue For or Tag a Contributor #1956 August Cut Off ======================= #1955 Make it Clear for Funders - How to Payout #1950 RelatedObjectDoesNotExist: User has no profile. #1949 Add Approve Worker on Issue Details #1947 User Receivin Twin Emails #1946 Make Clear on Funder Form How Syncing and Editing Works #1943 UX Add Project Type + Approval Settings to Issue Details #1928 Write script and create explainer video for Dev Grants #1926 Create \"Cancel Funding\" Page - Design #1910 Create \"My Grants\" Page - Design #1909 Create \"Fund Grant\" Page - Design #1908 Create \"Grants Withdrawal\" Page - Design #1907 Create/Modify \"Grants Detail\" Page - Design #1905 Request for Adding Fund Branding to Gitcoin Pages and Gitcoinbot Messages #1895 Create/Modify \"Create Grant\" View - Design #1890 Add Project Length to the Issue Details Summary #1888 Requests (WIP) #1885 Automated load and endpoint testing (locust, selenium, gatling?) #1884 API Refactoring / Standardization and code optimization/cleanup (queries, etc) #1883 Converting CSS to SASS/SCSS and modularizing #1882 Infrastructure: Caching and response time optimizations #1881 Infrastructure: healhchecks and scalability #1880 URI : migrate to path/repath + remove redundant URI #1879 Funder Dashboard #1878 Plan for Contributor Dashboard #1877 Wagtail CMS #1875 Funder Habit Forming #1872 Gitcoin Bot Updates #1871 Front End Refactor List #1868 Confirm Auto-Translation of Gitcoin to Japanese #1863 Landing Page Update #1861 Design: Dedicated Moderator Actions #1858 Confirm Auto-Translation of Gitcoin to Hindi #1844 bug - https://gitcoin.co/get 502's out #1842 bug - activities list is empty on profiles #1840 As a funder, I want to add the new funders video to the landing page, so I can see why gitcoin works for funding #1836 JSONDecodeError: Expecting value: line 1 column 1 (char 0) #1835 crowdfunding v2 #1832 JSONDecodeError: Expecting value: line 1 column 1 (char 0) #1815 How It Works V2 #1808 View By Orgs V1 #1798 crowdfunding v2 #1797 Add Deep Link to Explorer Search #1791 BadFunctionCallOutput: Could not decode contract function call getBountyData return data b'' for output_types ['string'] #1777 Show Cancelled Bounties Latest Activity in Profile #1770 BadFunctionCallOutput: Could not decode contract function call getFulfillment return data b'' for output_types ['bool', 'address', 'string'] #1754 Inventory Current Gitcoin UI Styles #1738 Clone Repo from KennethAshley and work from grants branch. #1714 What is the data flow? Do you have a diagram? Is data written to IPFS or postgres first? And what is initiator of action? #1710 Have the Staketree contracts been audited? #1709 Do the Staketree contracts need any tuning? Are we going to use contracts that are already deployed or deploy our own instances? #1708 Should there be a view for a patron to check on the status of their grant subscription(s)? #1707 Should there be a view for a developer to check on the status of their grant(s)? /grants/yourgrants, /grants/grantstatus #1706 Ensure Staketree contracts have all required functionality, linting, and tests #1705 Write tests for newly implemented smart contracts #1704 Write tests for newly implemented backend #1703 Write tests for newly implemented frontend #1702 implement any needed routes #1701 Ensure data is stored correctly in each location. #1700 Figure out data flow and ensure actions are performed on blockchain, IPFS and postgres in correct order. #1699 Implement any needed functions #1698 Check web3 functionality. Is it implemented in Kenneth's code? Are the contracts being instantiated and made visible? #1697 Instantiate contracts and point functions correctly #1696 BUILD Action Plan Example for Start Work Dialog #1674 Work Schemes - How it Works Break Down #1670 Feature: Moderator Dashboard (Admin) #1669 New avatar assets #1663 BadFunctionCallOutput: Could not decode contract function call getBountyToken return data b'' for output_types ['address'] #1626 Django Pipeline SCSS Migration #1624 Individual Market V1 #1623 On-demand QA environments by PR #1621 BadFunctionCallOutput: Could not decode contract function call getBountyArbiter return data b'' for output_types ['address'] #1612 BadFunctionCallOutput: Could not decode contract function call getNumFulfillments return data b'' for output_types ['uint256'] #1608 As a user on Contributor Landing Page v2, I want programming language specific terms, so I can see bounties / opportunities relative to my skillset #1599 Update Fund Issue Icon #1568 Remove 'Dibs' from Gitcoin Bot comment on Github #1535 Update Gitcoin Bot Comment (on Github) When Funding Increased #1518 CODE - As a user, I want gitcoin.co/vision to exist, so I can understand the core team's vision. #1510 The BIG Gitcoin Grants (powered by Staketree) Bounty #1469 DESIGN Contributor Dashboard #1468 DESIGN - As a user, I want gitcoin.co/is_not_a_shitcoin to exist, so I can understand why Gitcoin did not do a token / token sale. #1443 Ability to Customize the Frequency of Gitcoin Bot #1431 As a funder, id like the ability to extend the expiration date of a bounty, so i can keep it open #1427 as a funder, i want feedback / commenting ability on the accept submission page, so i can give feedback #1410 Build -- Show Submissions to Accept on Profile Dropdown and in Profile #1373 BUG -- Profiles with no info on them look funny. #1363 AuthStateMissing: Session value state missing. #1290 As a user, I want to be able to pledge to an already-pledged issue #1287 FieldError: Cannot resolve keyword 'github_issue_number' into field. Choices are: _val_usd_db, accepted, balance, bounty_owner_address, bounty_owner_email, bounty_owner_github_username, bounty_owner_name, bounty_type, canceled_on, contract_address, create #1228 Integrate with the Elastic APM library #1208 Add Elastic APM to k8s stack #1207 Build Funder Dashboard - Working Prototype - As a funder, I want a place where I can track all my stuff, so I can manage it all #1177 Code As a Front-End Developer I want consistent CSS classes for buttons #1173 Emoji Not Showing On Issue Explorer #1157 [Design] Post-Bounty Completion Flow [Funder] #1152 MOBILE EPIC #1142 USABILITY/PERFORMANCE EPIC #1140 RESEARCH & DATA EPIC #1138 BLOCKCHAIN PROJECTS EPIC #1137 FUNDER WORKFLOW EPIC #1136 UNIQUE GITCOINER EPIC #1134 INFRASTRUCTURE EPIC #1133 COMMUNITY IDEAS EPIC #1132 CONTRIBUTOR WORKFLOW EPIC #1131 MARKETING/ BD EPIC #1130 ONBOARDING EPIC #1128 [Design]: 'Good First Issue' Aggregator #1123 Revisit Project Timing #1109 Fund Bounty With Multiple Tokens #1100 bounty is open but github issue is closed #994 what languages should we support next? #970 I've lost track of my bounty tip #968 [Design] Funder Feature: Reach Out To Top Bounty Hunters #947 Relationship Between Toolbox Items and Core Product #851 EthOS -- a SolidCoin Experiment #843 Duplicate \"Funds Paid\" email being sent #837 test out autotranslate #814 As a site admin, I want a Gitcoin Drip Marketing Campaign that explains our vision (and how to use Gitcoin) over time, so we can enable our users to be successful. #794 Celery #778 Grants Landing page #718 Add # of Bounties Completed Dynamic Counter #682 Translate the webapp to other languages #643 Expired Status == Open Status? #637 How Does This Work? #633 when a tip is redeemed, gitcoinbot should comment back on the thread and let everyone know #597 New Navigation Structure Research #587 Mobile Audit of Gitcoin.co #561 Add more prominent notification that I've been tipped #546 as a new user, how do i update my github username on the funding/new page? #542 Sync Github and Gitcoin Issue Details #507 Consistent fonts across the Gitcoin site #502 Update Gitcoin Brand Guide #499 galaxy s8 chrome mobile display issues #496 as a user, i want to be clear which bounty fields are going to be public, so i can manage my privacy #451 A New Front End Framework #440 Use Gitcoin Brand Template on Terms Page #435 Relevant information needed to understand gas price #431 Consistent fonts across the app #426 User feedback: claiming of issues #403 (unknown): uncaught exception: not supported #324 Merged pull requests: grants / index : add team-members #2412 ( thelostone-mc ) landing: contributor page #2405 ( thelostone-mc ) Adjust new grants, fix grant details and cards for user details and logos #2399 ( mbeacom ) grants/new: refactor #2397 ( thelostone-mc ) WIP grants/new: refactor #2396 ( thelostone-mc ) Fix eslint #2392 ( mbeacom ) General grants cleanup #2391 ( mbeacom ) Adding live exemplars with proper formatting. #2385 ( Anish-Agnihotri ) refactor: css + markup cleanup #2384 ( thelostone-mc ) added pony for avatar builder #2373 ( thelostone-mc ) change grant card styles #2361 ( octavioamu ) Update roundup email for 5OCT2018 #2360 ( mbeacom ) Created new Avatar accessory category called Masks and created a Jack-o-Lantern Mask #2356 ( gianni-dalerta ) Adjust Travis config to handle GeoIP dbs #2338 ( mbeacom ) tip autocomplete workarounds #2337 ( owocki ) Fix #2329 - Adjust email template URL references and fix bad ref #2330 ( mbeacom ) fix ios text #2326 ( willsputra ) Adding all emails and their appropriate assets for grants branch. #2319 ( Anish-Agnihotri ) Add GH ratelimit healthcheck, job, cmd and additional Infura specific healthcheck #2318 ( mbeacom ) WIP Index #2312 ( octavioamu ) Implement Front-end - \"New Grant\" Email #2311 ( excalliburbd ) Adjust issue details token handling and move user specs to currentProfile #2304 ( mbeacom ) Update roundup email for 28SEP2018 #2298 ( mbeacom ) Temporarily removes advanced payout as an option #2295 ( SaptakS ) Makes the issue title a required field in new funding #2274 ( SaptakS ) updates documentation #2270 ( owocki ) Update roundup email for 21SEP2018 #2264 ( mbeacom ) Add VSCode remote debugging handling and documentation #2263 ( mbeacom ) added space cadet clothing Refs: https://github.com/gitcoinco/web/iss\u2026 #2262 ( marnibrewster ) Fix box position bug in select2 #2251 ( octavioamu ) html: updated text on banner contributor page #2238 ( thelostone-mc ) Refactor profile page #2237 ( SaptakS ) Update i18n translations and resolve Japanese trans errors #2236 ( mbeacom ) Added title and meta tags #2231 ( aashutoshrathi ) Weekly Roundup - 14SEP2018 #2222 ( mbeacom ) proposed gitcoin contribution monetary policy #2221 ( owocki ) hero: updated text + resize + restructure #2220 ( thelostone-mc ) Increase Funding Limit Request Form #2209 ( pinkiebell ) Adjust cookie banner for iOS/Safari #2207 ( mul1sh ) bot: updated markdown #2202 ( thelostone-mc ) navbar: fix tablet friendly #2196 ( thelostone-mc ) Replace project length with time commitment #2190 ( arun1595 ) Autogenerated documentation #2183 ( mbeacom ) Roundup email updates for 7SEP2018 #2181 ( mbeacom ) seo : optimize #2178 ( thelostone-mc ) Make It Clear Issue Has Been Crowdfunded V2 #2173 ( pinkiebell ) svgo: compress img #2172 ( thelostone-mc ) Fixes admin priviledge to stop work in activity #2167 ( SaptakS ) Refactor issue expiration email #2162 ( SaptakS ) migrates from current_bounty=True to .current() because the latter is\u2026 #2161 ( owocki ) Add middleware to disable autodetect lang by header #2157 ( mbeacom ) Hide Personal Information on Unselected Option #2156 ( rahulpat ) avatar: ui fixes #2154 ( thelostone-mc ) Update title to issue in slack notifications #2153 ( arun1595 ) WOC: Prevent advanced payout form submission when recipient address is empty #2149 ( rahulpat ) sendgrid categories #2148 ( owocki ) bounty: changes cancel button to red #2146 ( thelostone-mc ) css: fix missing background color #2142 ( thelostone-mc ) review: added feedback #2140 ( thelostone-mc ) bot : remove dibs text from message #2138 ( thelostone-mc ) newsletter 8/31 #2136 ( vs77bb ) Fix minor grammatical issue #2135 ( arun1595 ) Cleanup email templates #2133 ( mbeacom ) Isolate moderator and admin actions for ease of usability #2132 ( arun1595 ) show accept/reject bounty in permissioned bounty #2131 ( thelostone-mc ) landing: reduce size of title on mobile #2128 ( thelostone-mc ) Adding icons to tree section #2127 ( nanspro ) Update text for cookielaw #2124 ( SaptakS ) Fixes version of eth-utils and web3 to make compatible with other pac\u2026 (Ended up fixing eth-abi and keeping eth-utils and web3 to the same version to avoid breaking) #2123 ( SaptakS ) update : how_it_works page #2121 ( thelostone-mc ) bounty: enable submit only once per user #2119 ( thelostone-mc ) small tip tweaks #2111 ( owocki ) bounty: crowdfunded bounties #2109 ( thelostone-mc ) Add user search autocomplete #2108 ( octavioamu ) eslint: fix #2107 ( thelostone-mc ) migrates from current_bounty=True to .current() because the latter is more exhaustive #2105 ( owocki ) Adds some new eye styles. Male & female versions! #2099 ( saricden ) Bounty Requests: Move to django forms #2096 ( pinkiebell ) Adds codefund banner in the issue explorer and issue details page #2095 ( SaptakS ) newsletter 8/24 #2093 ( vs77bb ) Add base elastic apm integration #2092 ( mbeacom ) warns user if they try to bounty something but dont have enough tokens #2086 ( owocki ) Add (Issue is closed) to the 'View on Github' button if is_issue_closed. #2081 ( pinkiebell ) eslint : lint fixes #2079 ( thelostone-mc ) Update static references to replace hardcoded graph and gas static references #2076 ( mbeacom ) shared.js: Add {show,hide}BusyOverlay #2073 ( pinkiebell ) Fixes navbars with dash class, the narrow navbars #2070 ( SaptakS ) Fix widget loop #2068 ( octavioamu ) fix widget errors #2064 ( octavioamu ) Add base healthchecks and LB 200 endpoint #2060 ( mbeacom ) invoices #2059 ( owocki ) dashboard: remove save search link #2058 ( thelostone-mc ) Gitcoin Bounty Requests V0 #2056 ( pinkiebell ) refactor: remove save search #2051 ( thelostone-mc ) Rain #2049 ( octavioamu ) Use S3 to serve static #2048 ( mbeacom ) Add shirtsweater avatar asset #2047 ( ajayns ) Multi-Party Payout Recipients Not Showing in 'Work Done' # #2040 ( owocki ) Adds fund branding organisation information with a bounty #2039 ( SaptakS ) new leaderboard items #2035 ( owocki ) code clean up #2033 ( thelostone-mc ) refactor: remove unneeded html tag #2030 ( thelostone-mc ) deprecates old tip receive flow #2027 ( owocki ) Create grants branch on gitcoinco/web repo #2018 ( captnseagraves ) newsletter 8/17 #2017 ( vs77bb ) pages/dashboard: Fix issue explorer keyword bug #2012 ( pinkiebell ) Remove FullStory #2009 ( mbeacom ) Fixes text and alignment of no-issue-banner #2007 ( SaptakS ) bounty: enable accept / reject worker for owner #2005 ( thelostone-mc ) Auto-Translation to Japanese #1863 #2003 ( aashutoshrathi ) Rename Chinese locale file to correct format. #2002 ( ziyangkoo ) css: fixes #1998 ( thelostone-mc ) bounty_details.js: Show 'Submit Work' only for approved &-or started bounties. #1997 ( pinkiebell ) start work : update placeholder #1994 ( thelostone-mc ) Newsletter 8/10 #1984 ( vs77bb ) gas guzzlers in gas station #1980 ( owocki ) Upgrade cryptography python package to 2.3 - Security #1978 ( mbeacom ) Adjust gitcoin bot get_notifications to use pygithub #1977 ( mbeacom ) img: removed unused images #1975 ( thelostone-mc ) replaced misspelled 'deonomination' with 'denomination' #1974 ( zevaverbach ) Strip characters from stdbounties_id and check isdigit #1973 ( mbeacom ) uri : cleanup #1971 ( thelostone-mc ) Redis based caching #1969 ( mbeacom ) workaround for ipfs hashes not existing #1965 ( owocki ) new bounty : updated UI #1963 ( thelostone-mc ) fix #1921 replace sync_gas_prices from web scraping to json #1959 ( PumpkingWok ) what_is_gitcoin : revert to old design #1957 ( thelostone-mc ) bounty: restructure pages #1948 ( thelostone-mc ) explorer: ensure results from latest api call are served to the user #1941 ( thelostone-mc ) hack: trailing slash for profile #1937 ( thelostone-mc ) Fix #1934 - Resolve cancelled funds appearing in profile total #1935 ( mbeacom ) allow trailing slsah for profile #1931 ( thelostone-mc ) livestream 8/3 #1930 ( vs77bb ) Improve tip slack notification #1929 ( arun1595 ) lander video switcharooooooooooooO #1927 ( owocki ) sets the bounties limit if not specified, for performance reasons #1925 ( owocki ) sync geth stopgap fix #1924 ( owocki ) Switching tree section on landing page #1923 ( nanspro ) Display project length in issue details page #1922 ( arun1595 ) shared.js/mutate_interest: Show a generic message on network errors. #1918 ( pinkiebell ) Upgrade django to 2.1, modify field defaults, and address deprecations #1915 ( mbeacom ) as a user, i want documentation about chain of custody, so that i know my funds are secure #1913 ( owocki ) dashboard: remove tech stack filter #1911 ( thelostone-mc ) not_a_token page #1906 ( octavioamu ) Moderators v1 #1903 ( mbeacom ) Update the presskit copy #1900 ( mbeacom ) Restructure #1897 ( thelostone-mc ) sends an email to funders who have been inactive for 30 days, asking if they have any feedback #1894 ( owocki ) Split create_new_bounty kwargs building and check if once #1892 ( mbeacom ) change name of missing image #1891 ( octavioamu ) refactor PR #1887 ( thelostone-mc ) as a user, i want receive tip email copy to be clear, so i know where to find my ETH #1886 ( owocki ) added branding style to terms page #1869 ( evgeniuz ) css: minor refactor #1862 ( thelostone-mc ) expiration start work day 0 #1857 ( owocki ) Minor tweaks to action plan textarea #1856 ( arun1595 ) fix it twice for 'why cant i payout this issue?' question for funders #1853 ( owocki ) css: display filter tags + sort on mobile #1849 ( thelostone-mc ) Sentry integration #1846 ( mbeacom ) Visually improves the readonly fields #1845 ( SaptakS ) leaderboard on weekly roundup #1841 ( owocki ) Extend expiration of bounties #1838 ( SaptakS ) contributor page: css updates #1833 ( thelostone-mc ) adds recent activity on funder landing page so ppl can see how active the site is #1831 ( owocki ) Rework 'Start Work Dialog' and gitcoinbot message structure #1781 ( pinkiebell ) [WIP] UI Inventory #1755 ( pinkiebell ) Crowdfunding of Bounties && New Tips Architecture && Social Sharing #1737 ( owocki ) nav_auth.html: make nav_avatar an \\<a> tag and link it to /profile/. #1690 ( pinkiebell ) Show Just 1 Alert Banner for ERC20 Token #1668 ( pinkiebell ) save recent searches in tabs above search bar -- like http://www.hipmunk.com/ does #1447 ( owocki ) WIP: Feature/increase dashboard tests coverage #858 ( cryptomental ) pre_crowdfund (2018-07-25) Full Changelog Implemented enhancements: Make GitcoinBot Recognize Closed Issues. #1640 Confusing placeholder text for issue URLs #1194 Gitcoin Bot Enhancements #1040 as a user, i want the ability to test slackbot integration so i can know it's working #1004 Links opening in new tab/window open in same target #676 As a user, I want to sort and filter the bounty list by technical stack / keywords #343 Modify issueURL placeholder text to reflect GH issues #1195 ( mbeacom ) Add yapf linting base and lint dataviz app #1169 ( mbeacom ) gitcoinbot: updated language #1150 ( thelostone-mc ) css: fixed comment layout #1073 ( thelostone-mc ) fixes https://github.com/gitcoinco/web/issues/1040 #1043 ( owocki ) drastically improve api read performance #1026 ( owocki ) bounty: unify modal designs #809 ( sethmcleod ) Fixed bugs: StatisticsError: no median for empty data #1809 Too Many Alerts #1792 Gas Price Showing as a Funded Issue? #1773 Title & Descriptions not Displaying in Funder Form #1772 Gitcoin Bot Bounty Value Missing on Github Issue #1771 User Profile and Gitcoin Logo are not clickable #1739 Error Alerts Should Convey a Problem #1692 Button Text Not Legible #1686 Back Button on Contributor Ftux Not Working #1685 White paper page isn't responsive and rendering is off #1641 BUG -- gitcoinbot not commenting on github thread for bountied issues #1627 Uncaught TypeError: Cannot read property 'getBoundingClientRect' of undefined #1603 Dai Value Bug Gitcoin Bot #1592 Disable Editing of Issue Description on Funder Form #1588 bug - issues on accept work page #1580 [Bug] As a funder, I cannot approve a bounty hunter for work. #1537 Avatar Bug on Mobile #1527 Incorrect values (# bounties completed and $ rewarded) in the Leaderboards #1506 Error in the Home link extracted from Github. #1505 TypeError: unsupported operand type(s) for *: 'float' and 'decimal.Decimal' #1503 UnboundLocalError: local variable 'interest' referenced before assignment #1502 Bug: Broken Links in Footer #1435 New footer messsed up on https://gitcoin.co/ios #1430 Gitcoin completion/funding counts on org icons are incorrect #1404 SyntaxError: illegal character #1398 SyntaxError: Unexpected token '>' #1395 ReferenceError: moveWithScroll is not defined #1394 TypeError: Cannot read property 'getItem' of null #1393 BUG Image Not Displaying on Issue Details #1391 BUG Markdown Messed Up on Issue Detials View #1388 Update Soft & Hard Expired #1375 BUG -- Cancelled Bounty on Gitcoin Did Not Return Funds #1367 Require agreement on kill bounty #1358 BUG - Black circle on ENS page #1353 Running sync_geth against Rinkeby results in all unknown schema errors #1334 Visiting Tools continuously makes failed requests #1324 Back button UI is messed up in Receive Tip success page #1313 BUG - profile has inconsistent stats #1293 As an anonymous user, I would like to unsubscribe from email notifications. #1165 Unable to filter for C# #1078 Profile editing fails due to required slack fields #1072 'Stop Work' button appears on someone else's work. #1067 Gitcoinbot work submitted message has weird formatting #1063 can't search by freeform text anymore #1046 Cannot claim bounty on Rinkeby #854 erroneous gitcoinbot comment #733 Gitcoin issue status changed back to Open from Work Started #695 Links opening in new tab/window open in same target #676 add sorting functionality back to the gitcoin explorer #570 users reported receiving each email twice #115 Remove duplicate Tip properties #1810 ( mbeacom ) Fix division by zero error #1805 ( arun1595 ) WIP: Fix record_bounty_activity.. #1660 ( pinkiebell ) Clean up user's personal URL from github #1512 ( arun1595 ) ios: updated css + refactored #1445 ( thelostone-mc ) Update slack CTA link #1415 ( arun1595 ) Clean hashbang from gh urls #1381 ( mbeacom ) Fix font awesome icon classes #1354 ( arun1595 ) Fix feedback icons overlap with input value and center the icons vertically #1349 ( arun1595 ) toolbox: avoid $.get when url is undefined #1325 ( thelostone-mc ) dashboard: results row fix #1307 ( thelostone-mc ) ENS: Ensure 10%+ gas minimum #1303 ( mbeacom ) bug: set width to 100% on magnify #1178 ( thelostone-mc ) bug: added button--primary to back to gitcoin button #1168 ( thelostone-mc ) Closed issues: AttributeError: 'NoneType' object has no attribute 'fulfillments' #1826 AttributeError: 'NoneType' object has no attribute 'fulfillments' #1825 AttributeError: 'NoneType' object has no attribute 'fulfillments' #1824 StatusError: HTTPError: 504 Server Error: GATEWAY_TIMEOUT for url: https://ipfs.gitcoin.co:443/api/v0/cat?stream-channels=true&arg=QmfC7iLEvAwe8xDqk8FmGaoGbB3QGRNL3EYzFUfVkde1vo #1821 AttributeError: 'NoneType' object has no attribute 'fulfillments' #1820 StatusError: HTTPError: 504 Server Error: GATEWAY_TIMEOUT for url: https://ipfs.gitcoin.co:443/api/v0/cat?stream-channels=true&arg=QmNk3CfMScMut3kcFKP7DMCV1y1ZF99D8N3hNZ1bmGqj2T #1819 The sumo popup doesn't trigger for new visitors #1812 ZeroDivisionError: float division by zero #1806 Add autotranslate base for Chinese #1804 Cannot fund issues #1801 Include link to bounty in Gitcoin bot's post #1794 Image alignment is wrong on /bounty/quickstart #1766 JSONDecodeError: Expecting value: line 1 column 1 (char 0) #1762 Testing Fund an Issue #1761 BUG - emails to email_logger@gitcoin.co are cheiwng up our sendgrid credits #1760 Bounty on Gas Price Analysis Content - 7/15/2018 #1751 NameError: name 'tokens' is not defined #1748 JSONDecodeError: Expecting ',' delimiter: line 1 column 597 (char 596) #1745 TemplateDoesNotExist: head/v2/images/avatar/head/1-f8d5c2.svg.txt #1744 ValueError: not enough values to unpack (expected 2, got 1) #1743 Bug - gas page is not mobile friendly. #1742 Get project to stable point, rebase current KennethAshley:grants with gitcoin:master #1713 Set up project and run tests to ensure baseline #1712 Determine whether 199 skipped tests is normal or not #1711 CODE - as a marketer, i want gitcoin.co/presskit so I can know Gitcoin's brand guidelines #1683 as a user, i want this module on /about to be clickable, so i can click it. #1682 BUG - Exception when loading /explorer via API on local #1679 Coop Bounty - 1 Start Work Missing #1678 Implement Gitcoin internationalization / i18n support #1675 Bug: Code not visible on website #1667 bug - misaligned css on the acceptance page #1665 dupe activities #1661 Wrong profile in activities / messed up activity log #1659 ZeroDivisionError: float division by zero #1650 Organizations V1 Tech Approach #1643 View Of Hidden Bounties #1636 As a user, I want the cookie popup to not show up until the sumo popup is dismissed, so they don't overlap with each other? #1630 Metamask Locked button not prominent on Navbar #1629 V2 Metamask Connection State #1625 Exception: attempting to create a new bounty (875) when is_greater_than_x_days_old = True #1620 in tip flow, user should be notified if they are on the wrong network #1606 as a user, i want standard bounty tx's to be processed instantly by gitcoin, so i know my tx went through #1605 Contributor Landing Page QA #1594 Dropdowns on the topbar don't close when clicking on another dropdown #1593 IndexError: list index out of range #1565 Build Waiting State #1562 Update Buttons in Account Settings #1561 Updates - Activate DAI #1560 Fund Issue button out of place on mobile #1557 as a user, i want to be prompted to login when creating my avatar so i dont waste time building an avatar and can't save it #1554 Create Profile Flyout #1529 Add Link to Access Avatar Builder #1520 Outstanding Funder Form Updates #1519 Contributor Ftux V1.1 #1516 Put Admin Controls on one line #1511 States \"please review questions\" - but there are no questions #1509 Update Notif-Gitcoin Message Format - Slack #1507 Outstanding avatar issues #1504 Disable Gitcoin Bot Responses #1498 design: new 404 page #1493 travis fails with 'The command \"pytest -p no:ethereum\" exited with 1.' #1492 Change login link hover color on ENS page #1484 Remove Extra Kerning on All Gitcoin Emails #1480 Make Icon on Issue Explorer Circular #1478 DESIGN View by Org on Issue Explorer #1467 Admin Toggle - Clear Comments on Github Issue #1465 Code - Update https://gitcoin.co/mission to show off that we use an open protocol #1463 As a user, I want a beautiful svg animation for the Gitcoin Tree as I scroll down the landing page, so I can be enamoured with the mission to grow Open Source #1462 z-index issue on gitcoin.co/ens #1457 BadFunctionCallOutput: Could not decode contract function call getBountyToken return data b'' for output_types ['address'] #1456 Ratelimited #1455 DESIGN - as a marketer, i want gitcoin.co/presskit so I can know Gitcoin's brand guidelines #1451 As a user, I want a better 404 page for hidden profiles #1436 Bring Discord Bot to Parity with Slack Bot #1434 Funder Feature - Extend My Bounty Time Frame #1429 Gitcoin Bot and Project Status #1425 Uncaught SyntaxError: Unexpected token => #1423 Frontend Coding Advanced Payout Feature #1422 can't run docker-compose up -d --build #1419 Uncaught ReferenceError: Accounts is not defined #1418 Gitcoinbot should not do reminders on contest/cooperative bounties #1409 As an admin I want to triage the Landing Page Conversion Rate, which is way down since the new LP launched. #1408 Gitcoin Landing Page V2.1 #1407 BadFunctionCallOutput: Could not decode contract function call getBountyData return data b'' for output_types ['string'] #1400 As a funder, I'd like to know how many times a developer has started a bounty but not finished it #1390 BUILD Contributor Landing Page #1386 As a funder, I want to allow the crowd to increase contributions to a bounty, so we can crowdfund issues. #1380 As a funder, I want to changeBountyFulfillmentAmount() for contest/cooperative bounties, so I can pay out multiple submissions #1379 Gitcoin organization shield #1378 Add Visual to Gitcoin Bot Status #1374 TypeError: object of type 'int' has no len() #1371 Update https://gitcoin.co/mission to show off that we use an open protocol #1370 BadFunctionCallOutput: Could not decode contract function call getBountyArbiter return data b'' for output_types ['address'] #1369 test 3443 #1366 on the new funder form, the design of the price estimation is wrong #1361 As a funder, I want to have a 'Powered by Gitcoin' button so that I can forward people to Gitcoin on my existing bounty page #1359 Form input feedback icon overlaps with a long input field value #1348 As a user, i'd like faucet distributions to scale up and down with the eth network backlog so i can always have enough gas to submit a standard bounties tx #1341 Admin: Stop Work + Stop Work & Slash #1340 empty user comments should be handled on gitcoinbot #1336 fontawesome : Revert to css #1331 system thinks bounty is cancelled when it is not #1326 'Email us' link in New funding page throws 404 #1320 Notify me if a 2nd Person Starts Work #1319 Tip form pre-populates with last sent tip information #1315 Gitcoin $50K Creative :) #1312 ValueError: {'code': -32000, 'message': 'replacement transaction underpriced'} #1302 code - as a community member, i want a public gitcoin.co/results page, so I can show off that the system is working #1300 Pytest / Travis failing TestAssembleLeaderboards.test_handle_command #1298 organization profiles #1292 windows variable error when submiting work? #1291 ValueError: {'code': -32000, 'message': 'known transaction: cc3dd39aed568cef83849b8af36191ba49c3dbb0ba818c1b9e0f3462d0d9c9f0'} #1289 TypeError: unsupported operand type(s) for /: 'NoneType' and 'int' #1288 TypeError: unsupported operand type(s) for /: 'NoneType' and 'int' #1286 prune DB size #1278 AttributeError: 'NoneType' object has no attribute 'replace' #1274 Modular FTUX #1267 Bounty amounts not showing on /profile #1264 Profile V3 #1263 Fix Settings Responsive View #1261 add saptak/aditya/scott to the team page on /about #1257 BUILD: HOW IT WORKS #1244 GDPR: DISCONNECT & DELETE #1243 GDPR: Write Email To Gitcoin Community #1242 GDPR: Update Email Preferences #1241 GDPR: Update Privacy Tab #1240 GDPR: Show Message in Modal #1239 GDPR: Remove remembering terms #1238 GDPR -- Privacy Policy Updates Email #1237 GDPR -- Cookie Consent #1236 GDPR: Settings Content Updates #1235 GDPR - check about checkbox prefills #1234 GDPR -- Ask for re opt-in from all EU customers #1233 GDPR -- update privacy policy #1232 GDPR -- Add info to our contact forms #1231 JSONDecodeError: Expecting value: line 1 column 1 (char 0) #1230 Ratelimited #1229 FieldError: Invalid order_by arguments: ['http://testasp.vulnweb.com/t/xss.html?%00.jpg'] #1227 ValueError: The ExternalBounty could not be created because the data didn't validate. #1226 Detailed Funder Flow with multiple issue support #1224 Design Developer Landing Page #1223 Code - cleanup mission / values page #1220 Add CSAT surveys for bounty interactions - FE #1211 Add CSAT surveys for bounty interactions - BE #1210 Add NPS feedback for the platform #1209 Add the kubernetes base IaC to repo #1200 \u600e\u6837\u7528JAVA\u8bed\u8a00\u7f16\u8bd1\u4e00\u4e2a\u65f6\u5149\u6c99\u6f0f\u3002 #1191 Failing pytest - test_tip #1172 ValueError: The 'node_image' attribute has no file associated with it. #1154 ValueError: The 'node_image' attribute has no file associated with it. #1153 post an ethereum themed gif #1149 RESEARCH EPIC #1139 test #1135 Parent of #920 #1127 Epic 1 #1125 Abstract Away Gas Price / Gas Limit #1124 nginx Doesn't Seem to Recognize (or Direct Properly) www.gitcoin.co #1122 As a user, I want to be prompted to authenticate before seeing a start work modal #1107 How to surface work schemes to the community #1106 Make Image a Thumbnail for Long Descriptions #1105 Build New Gitcoin Landing Page #1104 BUILD - As a funder (Project recruiter), I want a place where I can track all my stuff, so i can have a flow of web3.0 talent #1092 As a member of the community, I want these Profile Privacy Features, so I can be more private #1091 SyntaxError: broken PNG file (chunk b'\\x00\\x00\\x00\\x00') #1089 e-mail should be optional #1088 Transactions didn't post after adding higher gas price in meta mask #1069 Local storage of explorer filter does not consistently load #1064 JSONDecodeError: Expecting value: line 1 column 1 (char 0) #1057 Misalignment with arrows on new page #1056 as a user, i want to be able to save my avatar to be my gitcoin profile #1051 as a user, i want to know when my information is gonna be public, so i can manage my info privacy #1048 BadFunctionCallOutput: Could not decode contract function call getNumFulfillments return data b'' for output_types ['uint256'] #1047 BadFunctionCallOutput: Could not decode contract function call getFulfillment return data b'' for output_types ['bool', 'address', 'string'] #1045 'Stop Work' Enhancements #1041 Started work / Stop Work History #1037 Funder Dropdown Options #1030 Cannot read property 'split' of undefined #1025 design - as a community member, i want a public gitcoin.co/results page, so I can show off that the system is working #1020 Add discord bot integration #1015 List used contracts under metamask icon in the footer #1013 Explorer multiselect \"Any\" option doesn't behave as expected #1011 as a user, i want one click approval of erc20 token bounties, because its faster and easier #1007 Build Quickstart Screen & Tidy Up Funder Flow #982 as a repo owner, i want different bounty work schemes, so i can choose the right bounty type for the job #973 Create Seamless Onboarding Experience - Contributor #957 make gitcoinbot status indicator into an image #952 code - as a user, i want a quarterly 'my stats' email, so i can see my activity on the platform #946 code - gitcoin.co/activity #925 Code - Profile Frontend Refresh #920 as an admin, i want to spin up a gitcoin geth node, so i can use it for gitcoin stuff #901 FTUX Backend #859 Funder Activities Task Flow #852 Funder FTUX #850 How to ensure funder payout? #848 Event Flier #847 New Marketing Landing Page #846 Gitcoin Email Updates #845 As a user, I want to build an Avatar, so I can show off my bad self. #813 seperate repo owners / developers earlier in the landing page #811 DESIGN - cleanup mission / values page #805 [DESIGN] - Bigger Text Area for Bounty Description #781 in my settings, i should be able to disguise myself from the leaderboard/having a profile #710 better guide rails around what tasks are a good fit for gitcoin, how to price them #681 [DESIGN] Gitcoin Requests #671 Feedback mechanism funder + contributor for each project #660 Design: Profile Refresh #656 As a user, I want a \"My Work' module so I can see what work is active / done for me on gitcoin #655 confusing first user experience for bounties #652 as a marketer, i want a specific landing page for python, so i can better target consumers #620 Increase Code Coverage by 4% #607 Gitcoin Bounty Hunter Explorer Dashboard #588 Gitcoin Bot Updates #567 Consolidate Funder Actions Into a Dedicated Area #534 How to Get Started (Developer) #516 as a user, i want tooltips on gitcoin.co/new to tell me what each field does #497 gitcoin ENS subdomains #450 As a user, I want to add an 'apply' step to the bounty process, so I can accept the best applicants #442 Build Onboarding Flow - MVP #441 Clear and concise series of Gitcoin emails #438 Unify Modal Designs #430 Clear distinction between content that is clickable and not #427 Clear no results page #418 Consistent messaging across the app #417 As a developer, I want grants available to sponsor my ongoing work in open source. #380 Error: MetaMask detected another web3. MetaMask will not work reliably with another web3 extension. This usually happens if you have two MetaMasks installed, or MetaMask and another web3 extension. Please remove one and try again. #368 as a website mantainer, i want a javascript widget that can show off my bounties, so i can lead more of my community to gitcoin #354 css : Media queries to fix up the landing page #273 stale bounties filter #197 mission / values page v2 #178 Allow users to view their tips / bounties on the web. #141 Tip Receive UX Flow Feedback #136 Epic CSS Cleanup #135 Feedback from a user: ability to manage keyword prerferences. #132 Find funded issues by specific address #92 Send a notification (github, browser, or otherwise) instead of email for tips/bounties. #43 Bot / Github integration Revamp #34 Job Matching Engine #28 Pilot Partnerships #27 Make Language filter UI clearer in Bounties #25 The big 'feedback on the project' post. #18 Merged pull requests: fix for stretched laptop on contributor landing page #1829 ( owocki ) activity feed on landing page to increase conversion rate #1828 ( owocki ) Change color of payout submit button #1827 ( SaptakS ) dashboard/templates: Add 'required' attribute to all 'terms' checkboxes #1818 ( pinkiebell ) Fix checkbox icon #1817 ( octavioamu ) shows how it works on landing page / external nav #1813 ( owocki ) Utilize hosted IPFS node and fallback to Infura #1802 ( mbeacom ) restructuted profiles #1800 ( thelostone-mc ) Do not display an 'wrong network' alert banner if metamask is locked. #1796 ( pinkiebell ) Add gitcoin bounty details url to start work github bot copy #1795 ( mbeacom ) consolidated payment wizard flow #1789 ( owocki ) Make back button work on contributor onboard #1788 ( mttmartin ) attach job desc ux fixes #1787 ( owocki ) Replace disabled attribute with readonly for title and desc #1785 ( SaptakS ) General lint/cleanup of tip views #1784 ( mbeacom ) Refactor GH issue details endpoint #1780 ( mbeacom ) Disables editing of the issue title and description #1779 ( SaptakS ) urls.py + about #1778 ( thelostone-mc ) Adds gasLimitEstimate for bulk payout #1776 ( SaptakS ) Adds google optimize to contributor landing page #1775 ( SaptakS ) Remove soft-expired logic from user interface. #1768 ( pinkiebell ) Fix image alignment on /bounty/quickstart #1767 ( pinkiebell ) Mobile responsive Gas Navigation and Resizing SVG gas graphs #1765 ( Kempo ) fixed linter errors. assigned new variable in for loop. #1757 ( whb07 ) css: fixed loading state #1752 ( thelostone-mc ) 3d dataviz of gas prices vs confirmation time #1749 ( owocki ) Make the user profile in onepager link to /profile/ #1740 ( pinkiebell ) onepages: updated to Muli & letter-spacing #1736 ( thelostone-mc ) Gitcoin Newsletter (7/13) #1735 ( vs77bb ) Fix alerts without types #1734 ( arun1595 ) Activity stream #1732 ( darkdarkdragon ) no sumo popup if logged in #1730 ( owocki ) Allow maxAge GET param for embed image responses #1729 ( mbeacom ) updated 404 page #1726 ( thelostone-mc ) Vision page #1725 ( octavioamu ) Updated Gitcoin Contribution Documentation with Issue Types #1724 ( frankchen07 ) Bug - Misaligned Css On The Acceptance Page #1665 #1721 ( olafghanizadeh ) Allow upto 4 cards in a row to utilise more space #1719 ( SaptakS ) Makes get started button blue as suggested by Alisa #1718 ( SaptakS ) Improve the css for newsletter #1717 ( SaptakS ) Presskit page #1683 #1691 ( olafghanizadeh ) contributor_landing: added newsletter #1689 ( thelostone-mc ) Clickable bounty hunters #1682 #1688 ( olafghanizadeh ) Contributor landing page: change text color of 'Get started' to white. #1687 ( pinkiebell ) Fix markdown of html tags in issue description #1684 ( pinkiebell ) Display an error banner on network error on start-/stop work.. #1681 ( pinkiebell ) contributor : language specific impl #1677 ( thelostone-mc ) refactor YGE code (done) & start on bulk payouts (done) #1666 ( owocki ) fix for https://github.com/gitcoinco/web/issues/1661 #1662 ( owocki ) Change 'not enabled this token'-banner color to orange. #1657 ( pinkiebell ) Fix Dai Value Bug Gitcoin Bot #1592 #1656 ( pinkiebell ) Fix: White paper page isn't responsive and rendering is off #1654 ( pinkiebell ) Display bounty title before value #1653 ( arun1595 ) hide network pill on mobile + reorder media query code #1651 ( thelostone-mc ) gas estimation calculator on gas page #1648 ( owocki ) Implement management command 'sync_listener' #1645 ( pinkiebell ) Changes color of getting started from green to gc blue #1639 ( SaptakS ) css : fixes #1638 ( thelostone-mc ) Fix gas settings #1637 ( SaptakS ) Add Hotjar #1635 ( mbeacom ) Replace 'worth' with 'value' #1634 ( arun1595 ) bug: set title attribute to null when switching to right network #1633 ( thelostone-mc ) Newsletter PR (7/6) #1632 ( vs77bb ) as a issue submitter, i want diff issue templates for diff issue types on gitcoin/co repo, so i can have more customized templates to my use case #1628 ( owocki ) gas advisories #1619 ( owocki ) Fix - #1593 #1615 ( Abhay07 ) Remove unnecessary script #1614 ( arun1595 ) Make event names in slack notifications consistent #1613 ( arun1595 ) Add Joseph's testimonial #1611 ( arun1595 ) Remove duplicate script tags #1610 ( arun1595 ) add Build Waiting State #1604 ( iamonuwa ) We Believe Section added in gitcoin.co/mission #1602 ( Abhay07 ) email: reindent + update css #1601 ( thelostone-mc ) added scott to the team page #1600 ( thelostone-mc ) moves tokens from being hardcoded in the codebase to being stored in the db #1598 ( owocki ) adds OZR token #1596 ( owocki ) Upgrade Django to 2.0.7 #1595 ( mbeacom ) adds help link to how it works dropdown #1591 ( owocki ) new metamask banner #1590 ( thelostone-mc ) Ensure avatar auth #1587 ( premachb ) results page by different keyword #1586 ( owocki ) Fix gas price settings css #1585 ( SaptakS ) Newsletter PR #1583 ( vs77bb ) Update RUNNING_LOCALLY_DOCKER.md #1577 ( eayoungs ) Update where to display how it works again #1576 ( mbeacom ) Adds results link to the footer #1575 ( SaptakS ) nav: fix on mobile #1574 ( thelostone-mc ) fixed alerts #1573 ( thelostone-mc ) Upgrade docker and travis to use Python 3.7 #1572 ( mbeacom ) refs: https://github.com/gitcoinco/web/issues/1568 #1571 ( thelostone-mc ) hide message + USD when not available #1570 ( thelostone-mc ) Display how it works everywhere except index page #1569 ( mbeacom ) fix : eslint errors #1564 ( thelostone-mc ) text: Go -> Save #1563 ( thelostone-mc ) Save Avatar takes you to Profile Page #1559 ( SaptakS ) Add link to the issue URL in the confirmation page #1558 ( SaptakS ) Fix for #1457 (Updated zIndex for Cookie Banner) #1556 ( premachb ) landing : added growing tree svg #1555 ( thelostone-mc ) avatar schwag request form #1551 ( owocki ) Implements a svg badge.. #1546 ( pinkiebell ) Fix broken CSS from how it works #1541 ( mbeacom ) Fix localstorage issue in firefox #1540 ( SaptakS ) all admin actions are in a new line #1539 ( thelostone-mc ) minor changes: added #1538 ( thelostone-mc ) Update how it works to use one url #1536 ( mbeacom ) ftux : further changes #1533 ( thelostone-mc ) Fix gasPrice on changing recommendation #1531 ( SaptakS ) newsletter 6/22 #1530 ( vs77bb ) Check for slow instead of fast #1526 ( SaptakS ) Fix malformed HTML #1525 ( arun1595 ) Fix buttons in standalone avatar page #1524 ( SaptakS ) Funder FTUX #1521 ( SaptakS ) Update slack notification format #1517 ( arun1595 ) Discord test button and send webhook msg with avatar #1514 ( kelvintyb ) Fix selectmenu initialization issue #1513 ( arun1595 ) Fix typo #1508 ( arun1595 ) 1244 how it works #1501 ( darkdarkdragon ) Remove bot's response to repos missing @gitcoinbot #1500 ( arun1595 ) Update open gitcoin role on about page #1499 ( arun1595 ) Fix jquery selector #1497 ( arun1595 ) Refactor getNetwork code #1496 ( arun1595 ) Fix pytest version #1495 ( SaptakS ) add https://cln.network token base CLN #1491 ( leonprou ) as a funder, i want to advertise that i am hiring on my bounty, so bounty hunters can take this into account when attempting my bounty #1488 ( owocki ) Change pull request link hover color #1487 ( arun1595 ) /results page is slow, this PR perf profile helps diagnose that and makes it faster #1486 ( owocki ) Change login link hover color to white #1485 ( arun1595 ) Remove unnecessary letter spacing in emails #1481 ( sprusr ) WIP: Make funder icons circular #1479 ( arun1595 ) Added the gas amount to the right place #1477 ( shad-k ) Roundup 6/15 #1474 ( vs77bb ) WIP: Contributor landing page #1459 ( arun1595 ) Fix font awesome loading in ENS page #1458 ( arun1595 ) Add name linking to vivek's slack notification and welcomebot #1452 ( mbeacom ) robot_error: set max-width #1450 ( thelostone-mc ) updated font-size for ftux large devices #1448 ( thelostone-mc ) Issue Explorer Check in tools for Admin (Vivek) #1446 ( owocki ) no flex on alert messages #1444 ( owocki ) Simple Nav #1439 ( owocki ) Update django logger and deploy script handling #1437 ( mbeacom ) Replace arrow functions with traditional functions #1424 ( arun1595 ) Start/Stop history #1420 ( darkdarkdragon ) rollbar : quickstart #1417 ( thelostone-mc ) Upgrade django to 2.0.6 #1414 ( mbeacom ) Add space between not and have #1413 ( arun1595 ) landing page: final changes #1412 ( thelostone-mc ) roundup 6/8 #1411 ( vs77bb ) landing : updated mobile design #1406 ( thelostone-mc ) Github notification safeguard for local #1405 ( mbeacom ) Fix: return of login #1403 ( SaptakS ) Open gitcoin profile links on the same tab #1401 ( SaptakS ) External links should open in new tab with noreferrer and noopener #1399 ( SaptakS ) Adds funding link in the navbar for landing page #1397 ( SaptakS ) Corrects lightbulb image name #1396 ( SaptakS ) Fixes: https://github.com/gitcoinco/web/issues/1391 #1392 ( kziemianek ) Fix project type number #1385 ( arun1595 ) Enhancement bounty info view on the bounty details page #1384 ( arun1595 ) Fix minor typo #1383 ( arun1595 ) birth: landing page #1377 ( thelostone-mc ) Update top banners in different bounty flow pages #1365 ( SaptakS ) Let price estimation text span a whole row #1362 ( arun1595 ) Fix FontAwesome static refs #1360 ( mbeacom ) Funder form v3 #1356 ( SaptakS ) notif: updated banner #1355 ( thelostone-mc ) Add min value for hours worked input field on submit work form #1350 ( arun1595 ) temp: using font-awesome CDN #1346 ( thelostone-mc ) Remove invalid css #1345 ( arun1595 ) add 'stop work & slash' button #1343 ( jvmaia ) profile : revamp #1342 ( thelostone-mc ) disable sendgrid events until we figure out root cause of db size issues #1339 ( owocki ) Trim issue action plan before validation #1338 ( arun1595 ) Adjust sync_geth settings and docs for local #1335 ( mbeacom ) fontawesome: revert to css #1333 ( thelostone-mc ) shared: refactored + removed dead code #1332 ( thelostone-mc ) Decrease the scope of GH perms requested on login #1328 ( mbeacom ) UX/UI for new results page #1327 ( travisdmathis ) show pricing guide on new bounty form #1322 ( owocki ) Fix email link in newsletter and mailchimp templates #1321 ( arun1595 ) Don't save tip information in local storage except current user's #1318 ( arun1595 ) docker-compose was wrong #1317 ( owocki ) Fix primary button style in receive tip success page #1314 ( arun1595 ) WIP: Stats email v2 #1311 ( oogetyboogety ) org profiles #1310 ( owocki ) as a user, i want to show number abandonments on gitcoin profile, so i can know who's a flake #1309 ( owocki ) Quickstart PR with corrected redirect #1308 ( SaptakS ) Fix: specify height of upper left only for submit bounty form #1306 ( SaptakS ) css: fixed dashboard filter row #1304 ( thelostone-mc ) Enable autocorrection via pre-commit and add yapf #1301 ( mbeacom ) fixes ENS #1299 ( owocki ) adds ENS subdomain registrations to activity report #1296 ( owocki ) helper command for pg_top #1295 ( owocki ) send tip from github username, not just 'full name' #1294 ( owocki ) Fix broken image in about page #1285 ( arun1595 ) Add checks for bounty/tip notifications on local/dev #1284 ( mbeacom ) ftux: refactor + restructure + url rename #1281 ( thelostone-mc ) admin / impersonate users #1280 ( owocki ) records form submission records for GDPR purposes + mailchimp permi-delete #1279 ( owocki ) Adds SaptakS to team #1277 ( SaptakS ) leaderboard updates for mitch #1275 ( owocki ) Improves deletion confirmation modal button styling #1272 ( SaptakS ) css: fixed font name #1271 ( thelostone-mc ) roundup 5/25/18 #1270 ( vs77bb ) Updates text in deletion modal #1269 ( SaptakS ) settings: updated styling + linting #1266 ( thelostone-mc ) css: update cookie styling #1265 ( thelostone-mc ) Mission/Values Page Redesign / Refactor #1260 ( travisdmathis ) settings: redid page #1255 ( thelostone-mc ) WIP: GDPR Cookie consent #1254 ( mbeacom ) GDPR: Management command to send email to all gitcoin users #1252 ( SaptakS ) GDPR: show updated policy via modal #1251 ( thelostone-mc ) GDPR -- Add info to our contact forms #1250 ( owocki ) GDPR reconsenet from EU residents #1249 ( owocki ) GDPR: Adds disclosure and consent withdrawal information in privacy tab #1248 ( SaptakS ) Email Preferences at a much more granular level #1247 ( owocki ) GDPR: Fixes https://github.com/gitcoinco/web/issues/1243 #1246 ( owocki ) GDPR: Remove remembering terms and blockchain tos from the funder forms #1245 ( SaptakS ) UTS46 ENS domain names #1225 ( owocki ) GDPR & Associated Privacy Updates -- Must be merged by EOD May 24 2018 #1222 ( owocki ) ens cleanup / marketing stuff #1219 ( owocki ) css: clean up ENS #1197 ( thelostone-mc ) one time approvals for each erc20 token used on gitcoin #1190 ( owocki ) fix for 'accept submission' not showing up #1189 ( owocki ) dashboard : minor fixes #1187 ( thelostone-mc ) roundup! vivek's first PR #1182 ( vs77bb ) Add Livepeer Token (LPT) for tipping #1176 ( jozanza ) Add CR fixtures and disable get_prices by default #1175 ( mbeacom ) add Unblocked Ledger Token (ULT) #1174 ( 7alman ) Add fulfillment endpoint for each entry by std bounty id #1170 ( mbeacom ) HOLD: releases iOS landing page link - DO NOT MERGE UNTIL IOS APP IS READY #1167 ( owocki ) image: ran make compress-images #1164 ( thelostone-mc ) about: fixed up CSS for about page community + alumini #1163 ( thelostone-mc ) css: added important for overridden prop #1161 ( thelostone-mc ) css: set limit for image in issue description #1159 ( thelostone-mc ) allows configurable 'max start work amount' #1158 ( owocki ) Modified web3 address to be optional for EthOS #1148 ( eswarasai ) Added etherscan url in EthOS Tweet #1147 ( eswarasai ) onboard : autopopulate keywords for users #1146 ( thelostone-mc ) Mark ethos hacking #1145 ( owocki ) Adds cors headers, and conditionally allow all for GET requests of bounties. #1126 ( matthewlilley ) js : added gettext across all alerts #1121 ( thelostone-mc ) updated start work dialog -> to ask hunter for action plan #1118 ( thelostone-mc ) Add Avocado (AVO) token #1116 ( peter-evans ) Fixes: https://github.com/gitcoinco/web/issues/1030 #1115 ( bakaoh ) Style refresh quote button #1114 ( arun1595 ) Prompt the user to log in before starting work #1113 ( arun1595 ) ant token name did not show up #1108 ( owocki ) project_types (formerly work schemes) #1098 ( owocki ) data privacy on new issue submit #1097 ( owocki ) makes email address optional in new bounties #1096 ( owocki ) As a member of the community, I want these Profile Privacy Features, so I can be more private #1095 ( owocki ) alumni model and view #1093 ( owocki ) ios applink on the landing page and bottom notifciation #1090 ( owocki ) Change cursor of questions in help page to pointer #1086 ( arun1595 ) Fix grammatical issue #1085 ( arun1595 ) Change Running Locally Header #1084 ( arun1595 ) dashboard: side_bar filters refactor #1082 ( thelostone-mc ) dashboard: fix filter uri #1081 ( thelostone-mc ) bugfix: tech stack filter fix #1080 ( thelostone-mc ) Dynamic widget documentation #1076 ( matthewlilley ) Add left margin for activity time #1074 ( arun1595 ) mail: updated alt + removed extra \\</p> + reindent #1071 ( thelostone-mc ) test button to test slack integration #1070 ( darkdarkdragon ) Fixed #1046 #1068 ( eswarasai ) fix toggle any filter #1065 ( joshmorel ) css: funding / killing form update #1061 ( thelostone-mc ) the ability for bounty funders to snooze gitcoinbot inactivity warnings #1059 ( owocki ) escalation not removal #1058 ( owocki ) css: prettified start work dialog box to match style + stop work button #1055 ( thelostone-mc ) gives staff the ability to remove users from a bounty #1042 ( owocki ) logs abandoned work and prevents users from starting new work bc of it #1039 ( owocki ) staggers cron start times #1034 ( owocki ) Quickstart screen for bounty creation flow #1029 ( SaptakS ) Slack Welcomebot on AWS Lambda #1017 ( mbeacom ) quarterly_stats Fixes: https://github.com/gitcoinco/web/issues/946 #1016 ( CuriousLearner ) Add autotranslate base #971 ( mbeacom ) QA: Implement Avatar builder Frontend (Fixes #813) #967 ( Smona ) sets default search project status to 'any' #936 ( owocki ) ftux: birth #889 ( thelostone-mc ) WIP: Update FaucetRequest with FK to Profile #884 ( mbeacom ) ENS Subdomain Feature #509 ( scottydelta ) pre-pr884 (2018-04-30) Full Changelog Fixed bugs: Faucet translation isn't rendering properly #1032 NoReverseMatch: Reverse for 'viz_index' not found. 'viz_index' is not a valid view function or pattern name. #1022 Gitcoin bot 2nd attempt doesn't render properly #991 BE tests currently failing #953 [BUG] The User Menu is Covered on TX Confirmation Screen #924 Gitcoinbot did not comment when bounty was posted #915 No unsupported network alert on bounty funding #773 Modify setup_lang to use User #980 ( mbeacom ) expiration tests fix #913 ( kziemianek ) Closed issues: DoesNotExist: Profile matching query does not exist. #1008 AttributeError: 'AnonymousUser' object has no attribute 'profile' #1005 testaroooooooo 123 #996 Updating user notification preferences fails and returns (403) CSRF verification failed #988 Resolve pytest / travis failures #987 error when submitting faucet request #979 TypeError: bad operand type for unary +: 'str' #976 AttributeError: 'NoneType' object has no attribute 'email' #954 test 123 #949 Issue explorer don't show issue in case gas price has been changed #945 ConnectionError: HTTPSConnectionPool(host='ipfs.infura.io', port=5001): Max retries exceeded with url: /api/v0/cat/QmXxkBASF92QvFFwChwZAECSRsjoMstMHJ2A9bwXuchXbA (Caused by NewConnectionError('\\<urllib3.connection.VerifiedHTTPSConnection object at 0x7f6791 #932 Test is a test issue #929 As a user, I would should be informed when I no longer need to keep tip confirmation window open #928 AttributeError: 'JsonResponse' object has no attribute 'read' #921 AttributeError: 'LeaderboardRank' object has no attribute 'local_avatar_url' #914 Design Funder Landing Page #908 Test title #907 404 after logout at profile page #905 Navbar responsive issue #903 as a submitter, i want to link my github PR when i submit work, so i can show off what i did #893 design - as a user, i want a quarterly 'my stats' email, so i can see my activity on the platform #892 make fix stylelint error #877 timezone issues with opened date #876 as a repo owner, i want to be able to approve people who've started work, so i can filter those who i want to work with #812 design - gitcoin.co/activity #804 Allow the user to set different language for the Gitcoin app #802 coding - /mentors page #725 as a user, i want upvotes / downvotes on tool page, so i can cast my vote on gitcoin's tool direction #706 Gitcoin should monitoring issue pull request as well #696 refactor bounty.value_in_usdt into two functions #693 Notify Gitcoin/Funder that Developer is Starting Work #683 (DESIGN) As a user, I want a Blockchain Job Board so I can find professional work in the space #540 Handle multiple bounties per github issue URL #533 Fund an Issue Suggestion/FTUX #529 Display Tips on Leaderboard #522 How to Get Started (Repo Maintainer) #517 Http404 #481 new_bounty marketing emails need to be moved to a background job #477 Clean Up Bounty Creation Flow #429 Functioning Search Field #412 As a core team member, i want to Track deploys & releases for faster debugging #405 (unknown): Uncaught this network is not supported in bounty_address() for gitcoin #362 Add slack bot integration #259 As a team member, I'd like to be on the /about page, so I can show off that I'm part of the team. #222 Merged pull requests: fixes for https://gitcoincommunity.slack.com/archives/C8E45J5D0/p1525097521000711 #1024 ( owocki ) slack welcome messages #1012 ( owocki ) hotfix: wait for approval to issue bounty #1006 ( owocki ) adds rates estimate on bounty details page #998 ( owocki ) Action URLS Cleanup (and other goodies) #983 ( owocki ) Notify Gitcoin/Funder that Developer is Starting Work #981 ( darkdarkdragon ) unsupported network warnings when trying to do an aciton on a network we dont support #978 ( owocki ) warnings when youre looking at a non mainnet bounty #977 ( owocki ) pricing brackets #972 ( owocki ) Adds bounty flow doc to readme #956 ( owocki ) Add slack bot integration #955 ( darkdarkdragon ) smarter github notifications #948 ( owocki ) Tool modifications #944 ( mbeacom ) track hours worked on fulfillment #942 ( owocki ) about: Fix Origin Story #933 ( thelostone-mc ) verboseness of gitcoinbot reminders #931 ( owocki ) more feedback emails #930 ( owocki ) bounty: hide timeline on cancelled bounties #922 ( thelostone-mc ) fixes https://github.com/gitcoinco/web/issues/876 #919 ( owocki ) make expiration status less inclusive #918 ( owocki ) about: core team design revamp #916 ( thelostone-mc ) navbar responsive issues #904 ( kziemianek ) avatar cleanup - and adds the ability to blend in the gitcoin logo to an avatar #902 ( owocki ) ability to add a pr link to work submission #900 ( owocki ) nav + explorer fixes #890 ( thelostone-mc ) Upgrade deb image to Stretch #888 ( mbeacom ) Added team bios and community member links to /about page #887 ( jakerockland ) WIP - d3 data viz experiments #886 ( owocki ) dashboard: Tests cleanup. #857 ( cryptomental ) preferred language #810 ( kziemianek ) Initial commit for Search functionality #790 ( eswarasai ) Tool voting #763 ( kziemianek ) 20180416 (2018-04-16) Full Changelog Implemented enhancements: Detect GitHub issue activity other than comments #458 ( JakeStoeffler ) Fixed bugs: Cannot submit work #883 feedback crm just went a little haywire #873 Closed issues: TypeError: Object of type '__proxy__' is not JSON serializable #844 Detect \"Referencing\" as \"Work\" #576 Merged pull requests: Add admin link to navbar for staff and switch settings icon #899 ( mbeacom ) adds tutorials on help page #898 ( owocki ) Github comments when user is warned/removed (in addition to the emails that are sent when this happens) #897 ( owocki ) 20180415master (2018-04-16) Full Changelog Implemented enhancements: Feature/refactor value in usdt #853 ( cryptomental ) Fixed bugs: Bounty details screen on mobile not responsive #759 Closed issues: Incorrect dollar value shown for bounties #879 As a user, I want to break apart my email settings and my profile settings #795 Merged pull requests: Update Travis pipeline to use new stages #885 ( mbeacom ) identify trust wallet #882 ( kziemianek ) new nav for auth/login for site #881 ( owocki ) status update dates on the bounty model #878 ( owocki ) new_bounty emails #867 ( owocki ) in my settings, i should be able to disguise myself from the leaderboard/having a profile #745 ( owocki ) pre-853 (2018-04-12) Full Changelog Fixed bugs: admin login broken in prod #871 Closed issues: AttributeError: 'NoneType' object has no attribute 'email' #872 This is a test bounty for demo purposes #868 As a user, I only want to receive 1 match email per day, so I dont unsubscribe #454 Merged pull requests: Django Auth Redux #862 ( mbeacom ) pre-django-auth-redux (2018-04-11) Full Changelog Implemented enhancements: responsive profile #825 ( kziemianek ) Fixed bugs: Broken profile markup #817 alpha tag confusion #792 Fixed heights in tips list #787 Funded issues are shown up as expiring in search results #783 fix for bouty details buttons padding #842 ( kziemianek ) Bean/fix typos #829 ( StareIntoTheBeard ) Closed issues: update can_submit_after_expiration_date #855 Request Funding Increase #849 Expired bounty invalid days ago counter #839 Canceled Bounty gitcoinbot github message was wrong #838 bounty detail page - button padding is messed up at certain resolutions #836 IndexError: list index out of range #835 AssertionError: Cannot filter a query once a slice has been taken. #833 'done' bounties should not have the time left field visible #824 comment needs left padding #823 RelatedObjectDoesNotExist: User has no profile. #820 Document and check all possible status values #816 Logo width is incorrect #808 Performance Updates #777 design - /mentors page #565 Update Gitcoin Email Designs #563 Code - /pitch pages #506 Price fluctuates on the explorer stats page #491 As a site admin, I want a Gitcoin Drip Marketing Campaign that explains our vision (and how to use Gitcoin) over time, so we can enable our users to be successful. #448 I want to see the progress of my newly created bounty tickets #422 Issue Explorer Details Page V2 #419 Merged pull requests: Add ipdb and django shell access to docker setup #863 ( mbeacom ) docker shell fixes #861 ( owocki ) fix expiration tests #860 ( kziemianek ) update can_submit_after_expiration_date #856 ( owocki ) fix for Expired bounty invalid days ago counter #840 ( owocki ) bounty: hide progress bar on work done status #828 ( thelostone-mc ) Fixes: https://github.com/gitcoinco/web/issues/792 #827 ( willsputra ) docker / github login instructions #822 ( owocki ) todos should be falsy #821 ( owocki ) Django auth #818 ( mbeacom ) bug fix : bounty + landing + dashboard #807 ( thelostone-mc ) bounty: added progress bar #764 ( thelostone-mc ) bounty: mobile alignment fix #762 ( thelostone-mc ) Email design update #746 ( jakerockland ) pre-django-auth-1 (2018-04-06) Full Changelog Implemented enhancements: Profile should make use of the django user framework #312 Closed issues: See what my last actions were when I logged in (as bounty funder). #423 Merged pull requests: bounty: fixed avatar url + tooltip style #784 ( thelostone-mc ) bounty : minor changes #768 ( thelostone-mc ) Add django auth framework #574 ( mbeacom ) pre-django-auth (2018-04-06) Full Changelog Fixed bugs: the big 'profile might need a redesign or some bugfixes' thread. #580 Closed issues: \"ReferenceError: Accounts is not defined\" Error printed to console when sending a tip #806 As a user, I would like to view profile bounties, repos, etc in a paginated fashion #550 An easy way to read the list of funded issues on my profile page #424 20180404-template-1 (2018-04-05) Full Changelog 20180404-template-0 (2018-04-05) Full Changelog 20180404-base-template (2018-04-04) Full Changelog Closed issues: Groundwork for Internationalization (Translation of App to Other Languages) #642 Merged pull requests: stylelint:fix info in CONTRIBUTING.md #803 ( kziemianek ) Limit Profile stat results to valid bounties #791 ( mbeacom ) Fixes: https://github.com/gitcoinco/web/issues/642 #728 ( bakaoh ) pre-728 (2018-04-04) Full Changelog Closed issues: Responsive Design Issues On The Gitcoin Website #684 pre-684-responsive-cleanup (2018-04-04) Full Changelog Implemented enhancements: 'my projects' tab should be greyed out if user is not logged in #769 Issue Explorer Detail #737 issue funder should be able to stop work #666 Investigate Image Compression Across Gitcoin for Performance Improvements #608 inline validations #554 Need to be able to stop work bounties as the funder #463 standardbounties: automatically cross-process bounties posted to bounties.network to gitcoin #268 Static handling and cache invalidation #262 css: rebirth of the bounty #691 ( thelostone-mc ) fixing some width, flex, and spacing issues as discovered in issue #684 #688 ( joshmobley ) changed all target=new to target=_blank with rel=noopener #677 ( michelgotta ) revamped tool page #672 ( owocki ) Inline validations #571 ( KennethAshley ) Fixed bugs: Getting an Error When Trying to Tip User #776 Issue Explorer Check-box Undone #744 after sending tip, blue alert that should have had a success message in it said 'undefined' #687 refresh_bounties empty URL bug #686 TypeError: Object of type 'BountyFulfillment' is not JSON serializable #678 loading page is busted #653 KeyError: 'token' #649 standard bounties: multiple bounties per issue URL #251 standardbounties: if you try to fulfill a bounty that doesnt exist it spins forever #250 bug: need auto refresh on gitcoin submission pending page #179 explorer: added missing css stylesheet #747 ( thelostone-mc ) html: removed extra css link from header.html #739 ( thelostone-mc ) Closed issues: test 123 #788 Really thin kill bounty screen #786 messed up CSS on https://gitcoin.co/funding/process #780 avatar_url is wrong #779 Hardcoded year in emails copyright section. #765 Contributing Link in README.md doesn't work #755 test 123 #752 NameError: name 'time' is not defined #751 NameError: name 'time' is not defined #750 test 123 #734 test 123 #722 test 123 #720 reverse bounties #719 'accepted' time is wrong on bounty #714 Using docker to setup and got \"localhost refused to connect\" error, and ReadMe file is outdated #713 /explorer on mobile needs some alignment fixes #705 bounty explorer can be slow #689 as a user, i want to ahve an 'in alpha' badge on alpha tools, so i can know which tools aren't yet GA #685 gitcoin.co/new issue page not responsive #679 Scope of task #670 test 123 #654 Emails with [DEBUG] header in prod #650 Faucet giving 500 when submissino #646 Update Gitcoin Weekly Newsletter #632 as a user, i want gitcoin to integrate standardbounties contribute() method, so i can contribute more funds to a bounty #617 Tidy Up Issue Explorer #601 as an administrator, id like to add faucet distributions to activity_report, so i can track them #600 redesign embeddable widget for github reops #594 upgrade: font-awesome 5 #593 Add Gitcoin Newsletter Page #584 Latest News Updates #518 Clear and concise message about work started from Gitcoin Bot #508 Remove Subscribe to Funded Issues at top of Issue Detail Page #504 Longer titles are profile page overflow their bounds #501 gitcoinbot did not comment on github when work\\_done event fired #495 Issue explorer on mobile needs a quick cleanup #494 Exception: attempting to create a new bounty when is_greater_than_x_days_old = True #485 People shouldn't be able to start work on more than 3 issues at a time #478 JSONDecodeError: Expecting value: line 1 column 1 (char 0) #467 BACKEND -- Gitcoin External Bounties tool #447 Clear Connection Between Notification and Error States #432 Consistent display of ETH and USD across app #421 To see only open issues #420 Consistent button styles across the app #416 Consistent H1 treatment #414 Clear and concise tooltips #410 Standardbounties expiration date treated differently than Gitcoin expiration date #393 Uncaught ReferenceError: getParam is not defined #390 Uncaught TypeError: Cannot read property 'coinbase' of undefined #389 Uncaught TypeError: Cannot read property 'accounts' of undefined #388 (unknown): \uad6c\ubb38 \uc624\ub958 #385 (unknown): ':' is required. #383 JSONDecodeError: Expecting value: line 1 column 1 (char 0) #382 Error: Access is denied. #381 (unknown): Syntax error #376 (CODE) as a user, i want to see bounties from other platforms, so i can work on bounties outside of the gitcoin ecosysstem #372 TypeError: an integer is required (got type NoneType) #360 Uncaught SyntaxError: Identifier 'slides' has already been declared #352 Uncaught SyntaxError: Identifier 'slides' has already been declared #349 Cannot read property '2' of null when submitting bounty #342 Test Issue #341 SyntaxError: expected expression, got '*' #339 Uncaught ReferenceError: web3 is not defined #336 Uncaught TypeError: Cannot read property 'accounts' of undefined #318 Error: Web3ProviderEngine does not support synchronous requests. #307 Error: Syntax error, unrecognized expression: select[name=deonomination #306 Uncaught ReferenceError: nextSlide is not defined #305 Uncaught ReferenceError: web3 is not defined #303 Uncaught SyntaxError: Unexpected token * #302 (unknown): Syntax error #300 (unknown): Script error. #297 ReferenceError: Can't find variable: nextSlide #295 Uncaught ReferenceError: nextSlide is not defined #294 ReferenceError: Can't find variable: nextSlide #293 Uncaught ReferenceError: nextSlide is not defined #292 Uncaught ReferenceError: web3 is not defined #291 Uncaught ReferenceError: web3 is not defined #290 Uncaught ReferenceError: nextSlide is not defined #289 Uncaught TypeError: Cannot read property 'coinbase' of undefined #287 Uncaught TypeError: Cannot read property 'accounts' of undefined #286 flow to reject a claim and payout to someone else is kind of cumbersome #275 StandardBounties: The ability to ingest Bounties.Network Bounties #264 ERC20 batch tip send #233 improvement - filtering bounties for repository #232 Issue Explorer Usability tweak #227 Treat claimed issues as open #225 design: index of bounties from other bounty projects #221 Detect profile from Metamask/Github #214 funded issue links are long and clunky #201 Environment variable based settings #144 saving search UI is broken on iphone 7 #8 Merged pull requests: explorer: updated label for issues with status done #785 ( thelostone-mc ) bounty: process + kill bounty width fix #782 ( thelostone-mc ) CSS clean up \ud83c\udf89 #775 ( sethmcleod ) disable my projects filters if user not logged in #771 ( kziemianek ) current year in copyright email section #766 ( kziemianek ) Alpha Tag #758 ( willsputra ) bounty: css letter spacing fix for h1..h6 #757 ( thelostone-mc ) Fixed Contributing Link in README.md #756 ( Sabihashaik ) bounty: css fix for wonky contributor info #741 ( thelostone-mc ) html: reordered css links #740 ( thelostone-mc ) bounty: display submit only on starting work #738 ( thelostone-mc ) #679 - new issue responsive updates #735 ( joshmobley ) fixed broken save search UI & missing save search text on mobile #731 ( willsputra ) accepted_on date in fulfillment model #729 ( owocki ) Optimize images in assets #724 ( mbeacom ) handle multiple bounties per github url #723 ( owocki ) Add image compression #712 ( cassidypignatello ) bounty: review feedback added #711 ( thelostone-mc ) workaround for web3 sync issues #709 ( owocki ) twitter.com/gitcoinfeed #708 ( owocki ) css: fixed explorer overflow on mobile #707 ( thelostone-mc ) Fixes: https://github.com/gitcoinco/web/issues/687 #699 ( kziemianek ) css: sidebar fixup #697 ( thelostone-mc ) Issue funder can remove users from issue #675 ( kziemianek ) Offchain Bounties #673 ( owocki ) doc: corrected setup path #667 ( thelostone-mc ) Records UserAction events for Tip, Start/Stop Work, and Bounty related things #664 ( owocki ) People shouldn't be able to start work on more than 3 issues at a time #663 ( owocki ) no faucet spoofing #662 ( owocki ) no faucet spoofing #661 ( owocki ) Add GeoIP2 and lang middleware #657 ( mbeacom ) Adds testimonial video to landing page #645 ( owocki ) Redesign and implementation of embed widget #644 ( michelgotta ) @gitcoinbot tune up! #641 ( zoek1 ) use AGPLv3 license #638 ( gasolin ) fontawesome: upgrade to v5 #635 ( thelostone-mc ) Refactors 3 requests down to 1 #634 ( owocki ) Integrate StandardBounties increasePayout() #626 ( msuess ) Refactors shared.js / web3 awareness code for more sanity #625 ( owocki ) explorer: updated view #621 ( thelostone-mc ) Update all alerts to include new alert style #553 ( KennethAshley ) Environment variable setting handling #359 ( mbeacom ) pre_web3_awareness_reafctor (2018-03-16) Full Changelog Implemented enhancements: nav: redesigned the dropdown #629 ( thelostone-mc ) explorer: updated tooltip #585 ( thelostone-mc ) Fixed bugs: AttributeError: 'NoneType' object has no attribute 'strip' #616 IndexError: list index out of range #613 profile_details.html references nonexistent profile.js resulting in Http404 #612 KeyError: 'comment' #598 fix for empty github notification #622 ( owocki ) Check dict existence in gitcoin bot payload view #599 ( mbeacom ) Closed issues: test 123 #595 Upgrade to the latest Django revision #583 Increase Code Coverage by 5% #408 Reminder to remove the legacy/* application once those bounties are done #406 Uncaught Error: Web3ProviderEngine does not support synchronous requests. #340 addd logo to metamask contract metadata repo #320 Bot / Github integration Revamp MVP #152 In tip flow, sometimes we are not able to get the email address of the user from github #75 Merged pull requests: css: dropdown fix #630 ( thelostone-mc ) Enable ESLint in pre-commit and on Travis CI #624 ( mbeacom ) Sends followup emails after 48 emails to bounty fulfiller and submitter #610 ( owocki ) tooltip: updated as per review comments #606 ( thelostone-mc ) slack notifications upon start / stop work #591 ( owocki ) destroys legacy bounty handling code (except for on legacy kill bounty page) #589 ( owocki ) nav: redesigned the dropdown #586 ( thelostone-mc ) General faucet cleanup #582 ( mbeacom ) Feature/faucet -- with kevin's changes #581 ( owocki ) removes optional add_bcc option from mailer #579 ( owocki ) explorer: added sort feature #578 ( thelostone-mc ) Cleanup syntax and linting issues for backend code #577 ( mbeacom ) css: refactored media queries #573 ( thelostone-mc ) mocks expiration date on standardbounties #566 ( owocki ) Writing coverage for marketing model, increasing coverage to 33% #524 ( leonprou ) ESLint configuration to help code with more style #468 ( michelgotta ) BOT / GITHUB INTEGRATION REVAMP MVP #236 ( romanjesus ) pre_faucet (2018-03-09) Full Changelog Implemented enhancements: show tips on leaderboard / profiles #544 ( owocki ) Closed issues: IndexError: list index out of range #564 Explorer changes followup #555 Update Issue Explorer Front End #503 void #455 Show consistent top navigation across the app #415 Clear Distinction Between Web 3 States #413 Merged pull requests: sendgrid event hooks #568 ( owocki ) pre-clean-urls (2018-03-07) Full Changelog Implemented enhancements: cleaner funded issue urls #452 ( owocki ) pre-clean-urls2 (2018-03-07) Full Changelog Implemented enhancements: As a user, I want the navigation bar to be consistent #548 Add form styles #514 ( KennethAshley ) Adding token conversion rate to bounties #387 ( bhenze ) Fixed bugs: Is there still a problem with 'start work' carrying over from bounty to bounty? #519 Http404 raising frequently on profile view #492 AttributeError: 'NoneType' object has no attribute 'pk' #483 Integration branch triage issues #474 void #462 Added remove filter functionality for Search Tags #562 ( eswarasai ) css : fixed display for devices below 380px #559 ( thelostone-mc ) FIX: Replace selects with select2 and update arrow #539 ( KennethAshley ) Closed issues: gitcoincobot doesnt work for ERC20 issues #536 Test #531 void #515 void #511 void #500 Consistent Form Styles Across the Gitcoin #498 As a user I'd like a cleaned up explorer page. #493 Version conflict when running tests #488 'new work' comments appear twice on github issue from gitcoincobot #480 void #479 void #476 DoesNotExist: BountyFulfillment matching query does not exist. #471 void #470 void #469 Issues in 'Work Started' should be 'Open' #466 void #464 void #460 status not populating correctly on legacy issues #453 bust the cloudfront cache when an issue updates #446 Consistent tone and voice to communicate with me #439 Create Gitcoin UI Kit #437 Align Current State of the Issue Explorer #436 Update White Paper Page Select List #434 Create Consistent Form Styles #433 dashboard_bountyfulfillment is not being updated properly #428 Clear understanding whether something is an error or informational #425 Show left rail radio filters when appropriate #411 TypeError: an integer is required (got type NoneType) #409 Fix lingering bounty_fulfiller (claimee) references #401 HTML/CSS Touch ups on Bounty Details Page #399 Make Process Bounty page more user friendly #398 Wrong issue title in gitcoin.co #366 TypeError: an integer is required (got type NoneType) #332 standardbounties cleanup: multiple fulfillments #308 standardbounties cleanup: state issues #284 Coloradocoin receive page (due Feb 1) #261 Push Open Source Forward => Grow Open Source #238 design- /pitch page - where people can pitch project ideas #198 link profile in nav somewhere #191 show conv rate rate at time of posting #165 As a user, I'd like to be able to close my browser window after I submit a web3 tx, so I can do other things without canceling. #128 GitHub oauth in new funding flow #98 Merged pull requests: review: added feedback for the explorer page #558 ( thelostone-mc ) Unify navbar template #549 ( mbeacom ) Add initial changelog #545 ( mbeacom ) WIP: Feature/faucet #541 ( KennethAshley ) Fix unselectable icons on select2 selects #532 ( KennethAshley ) Add Wyvern (WYV) token #525 ( protinam ) core: Rebirth of the explorer #523 ( thelostone-mc ) dashboard: base setup #505 ( thelostone-mc ) Update web3 and eth-utils to fix issue 488 #489 ( jasonrhaas ) html: removed left rails #486 ( thelostone-mc ) Correct typos and grammatical errors #484 ( cpbennett4 ) text: fixed typo #473 ( thelostone-mc ) alert user to local env networks #465 #472 ( ckhatri ) Fix ES Linting issues for leaderboard.js #461 ( tra38 ) Fix isort-check build failure #459 ( JakeStoeffler ) launches web3 what / why video #449 ( owocki ) easier tip redemption #396 ( owocki ) (WIP) February integration branch #379 ( owocki ) Add dummy external bounties #377 ( KennethAshley ) WIP -- COLO Coin Redemption #331 ( eswarasai ) css: prettified bounty_details page #323 ( thelostone-mc ) prefebint (2018-02-13) Full Changelog Closed issues: Use BountyFulfillment for all fulfiller_ references #402 Fix dashboard/notifications.py #400 feb integration branch - remove references to Bounty.fulfiller\\_ #397 \"Are you still working on this?\" #394 (unknown): Syntax error #391 MultipleObjectsReturned: get() returned more than one Profile -- it returned 2! #386 This is a test issue for purposes of a demo during Consensys Mesh Retreat #384 Bounty creation transaction link points to rinkeby etherscan address. #370 Travis builds failing #367 AttributeError: 'NoneType' object has no attribute 'get' #361 Submitting work throws a \"Math is not a function\" #357 Profile Page needs to be sized up if it's smaller than it should be #355 Increase Code Coverage by 4% #353 RangeError: Maximum call stack size exceeded #351 RangeError: Maximum call stack size exceeded #350 html: setting max-width to 500px casues weird display #347 New funded issue form does not automatically add the URL from the querystring #346 SyntaxError: expected expression, got '*' #338 as a user, i want to be able to process two bounties in multiple tabs so i can be efficient. #334 in activity_report management command, add a from\\_address and to\\_address field #322 tip emails not going out #321 Issue summaries lose formatting like new lines #317 new bounty status #316 stanardbounties cleanup: tune rate limiter #281 standardbounties cleanup: why aren't 500 error emails to ADMINs working #279 This is a test issue for purposes of a demo during Rocky Mountain Blockchain #270 game mechanics for project wheatgrass #260 sometimes web3 buttons on the gitcoin interface take 60s to respond #226 code: signal to tell user that unclaimed issues may already be in progress #206 Code Faucet Page #184 twitter posts about new funded issues do not unfurl correctly #110 move to python3, django 2.0 #68 Bounty Life-cycle #61 Merged pull requests: Fix migration conflict #395 ( mbeacom ) rollbar: replaces ** with Math.pow #392 ( thelostone-mc ) Increase code coverage #375 ( tyleryasaka ) js: replaced ** with Math.pow() #374 ( thelostone-mc ) Default network should be mainnet #371 ( jasonrhaas ) Update Docker image to support Windows #365 ( mbeacom ) Changes Math to Math.pow for gwei->ether gas calculation #358 ( poffdeluxe ) Use ImageOps.fit instead of Image.thumbnail #356 ( poffdeluxe ) css: set max-width to 100% to fix display #348 ( thelostone-mc ) Modify static handling to use Whitenoise #345 ( mbeacom ) css: prettified /help page #337 ( thelostone-mc ) allows multiple pending transactions at once #335 ( owocki ) html: replaced slack image with font-awesome icon #333 ( thelostone-mc ) diff favicons in prod vs local #328 ( owocki ) adds user action table, stats cleanup #327 ( owocki ) Adjust email handling for tip flow #326 ( mbeacom ) javascript: convert to es6 and make sure it passes linting #325 ( ethikz ) Kevin/new statuses #319 ( owocki ) pre_january2018_feature_integration2 (2018-01-29) Full Changelog Fixed bugs: standardbounties cleanup: Github claim work comment/interest comment updating seems to fail #282 When attempting to sign up for gitcoin slack I get a CSRF Failure #276 Closed issues: Error on DB restore #309 Uncaught ReferenceError: web3 is not defined #304 ReferenceError: web3 is not defined #299 ReferenceError: Can't find variable: web3 #298 ReferenceError: Can't find variable: web3 #296 Test issue from Rollbar #283 why are all the 404s 500ing #280 The first LIVE StandardBounties Bounty on Gitcoin #278 standardbounties: where do we store info that's not in the bounty detail spec? #253 standardbounties: migration plan #252 standardbounties: figure out how to massage expressed interest PR in #249 new 404/500 error page #231 typography cleanup after PR 116 #151 Merged pull requests: Modify slack email invitation handling #314 ( mbeacom ) (WIP) January 2018 Multiple Integrations #240 ( mbeacom ) pre_january2018_feature_integration (2018-01-26) Full Changelog Fixed bugs: www.gitcoin.co doesnt work #254 Closed issues: gh int: Add github logout method #266 standardbounties: support new IPFS schema #265 standardbounties: test ERC20 tokens #257 standardbounties: regression test the twitter notifications, github comments, and emails #256 standardbounties: estimateGas() #248 standardbounties: gas limit set too high #247 standardbounties: tx throws but the frontend thinks it succeeded anyway #246 standardbounties: integrate metamask gas estimates module #245 As a gitcoin founder, I want to send a demo funded issue, so I can demo the product to the mesh. #229 As a gitcoin founder, I want to send a demo funded issue, so I can demo the product to the mesh. #228 dataviz of gas costs vs confirmation time #209 design: waiting room quote while page is waiting for web3 updates #181 Code iOS landing page #174 core : contributing.md guideline + linter #65 Browser Extension Revamp #50 waiting room entertainment while tx mines #32 Mentors #30 Merged pull requests: Update notifications.py #277 ( tommycox ) Add Rollbar error handling #274 ( mbeacom ) doc: changed port to 8000 #272 ( thelostone-mc ) doc: changed port to 8000 in github integration steps #271 ( thelostone-mc ) Add initial pre-commit configuration #269 ( mbeacom ) roundup email 20170116 #243 ( owocki ) Fix the test suite isort failures #242 ( connorwarnock ) Changed bounties URL in JS to prevent 301 redirect #235 ( tossj ) backend db & API support to show how many comments exist for an issue #219 ( amites ) Gitcoin: Issue #174 #207 ( Elaniobro ) Changed links to MetaMask Chrome extension to MetaMask website #204 ( tossj ) Display random quote when a web3 transaction takes place #158 ( tra38 ) v0.1 (2018-01-10) Full Changelog Closed issues: test 123 #224 foo the bar #223 Error executing transaction #220 Search by nickname doesn't work #213 Design: Gitcoin Toolbox #133 submit_working (2018-01-09) Implemented enhancements: In the admin, create a view that shows bounties and tips over time #20 Design a more aesthetically pleasing bounty detail page #17 bounty details page should have a 'back' button on it #7 clawback expired bounty interface #5 Expose psql port in docker stack #217 ( mbeacom ) Fixed bugs: Tips: 7 second delay when clicking on 'send tip' on the mainnet. #16 Closed issues: Docker-based PostgreSQL port inaccessible locally #216 Toolbox page: launch it #196 design: signal to tell user that unclaimed issues may already be in progress #190 Disabled localStorage breaks Issue Explorer #188 code: /mission page #177 small module design: waiting room quote #175 Design: Faucet page #173 add /addon/ as firefox addon redirection #170 claim: gas limit is set over limit #169 Code HTML: Toolbox Page #168 Travis builds failing - ethereum dependency changes #163 oops #159 Csv export management command to spit out activity report #157 explore the idea of a gas faucet #153 In Issue Explorer, Double Quotes (\") are Displayed instead of Correct Single Quotes (') #150 Travis builds failing on cytoolz #142 Design: Mission, values, vision, how we interact #139 design: ios gitcoin.co landing page #137 Double @ sign in github bot comments #131 Some of the buttons are glitchy and unpolished. #126 remove uppercase text from text description #125 Pytest version conflict with ethereum package #123 Add missing migrations #121 Error in sync_profile #120 Python comment linting and semicolon/unused import removal #119 Specify validation error for email validation checks #118 AnonymousUser #117 css: resize images to fit within the timeline container #107 /slack page content view does not fill page width on mobile #105 mail: tip amount rounded off to 2 decimals showing cause incorrect amount on mail #103 Transaction Underpriced when you try to receive a tip #101 bug: roadmap items shift to adjust for content on hover #100 expire email should be targeted to personas #96 Old Etherdelta API 50x frequently #94 Testing Strategy #90 Some models don't handle plurals correctly in admin #86 Problem on claimming a issue #82 Missleading button \"Accept/reject claim\" for non founder of the issue #81 Database files not compatible with Postgres 10.x #78 Email heading messed up on mobile resolutions #77 Overhaul leaderboards page design #76 support ERC20 token conversion rates on tips/bounties funding #73 css: mailing list breathing space #66 bug: roadmap items move when hover over them #64 Code Testimonials into Landing page #63 Modify docker-compose.yml to reduce running/exited services / persistent volume #58 Add persistent volume for PostgreSQL data #57 Decrease Docker image size #56 The corners or #upper_left and .bounty don't line up #54 auto-estimate USD amount on gitcoin.co/tip #53 Design a testimonials module on the landing page #52 Wrong issue info #51 Post funded issue to Craigslist #42 Issues should be displayed in decreasing order of value #40 Submit a funded issue (or send a tip) and provide feedback on the UX. #37 docker container for running locally #33 Mock up an Organization Overview page #31 Ops: Create cloudfront invalidation programmatically upon deploy in deploy.bash. #19 Tip page link 404s #14 Demonstrate tipping via a video #12 draft a blog post about tim-berners lee #4 list of erc20 coins should be more elegant #3 Web3 bountydetails interface documentation #2 HTTP API Documentation #1 Merged pull requests: remove duplicate viewport meta #218 ( gasolin ) Update PULL_REQUEST_TEMPLATE.md #215 ( Elaniobro ) css: shrunk vertical navbar + refactoring #212 ( thelostone-mc ) Add RDN Token support #210 ( ice09 ) metamask gas price preview #205 ( owocki ) Gitcoin's Mission #203 ( eswarasai ) add \"setup database\" section to documentation #199 ( galaxy233 ) Remove all-caps default in /tip (yge) #195 ( bumi ) Add sane fallback for localStorage usage #189 ( eth-button ) html: fixed github repo link #187 ( thelostone-mc ) add activity_report management command #180 ( choochootrain ) toolbox: coded design #172 ( thelostone-mc ) carousel: fixed css #167 ( thelostone-mc ) Generate high-entropy secrets and codes #166 ( 10a7 ) Pin cytoolz to 0.9.0 to fulfill ethereum new reqs #164 ( mbeacom ) shared.js: Escape single quotes with &#39; #162 ( adtac ) TLDR section on landing page #161 ( owocki ) add http://arcade.city token base ARCD #155 ( ernaneluis ) docker: added node to configuration and css lint setup #147 ( thelostone-mc ) Resolve Travis failures on dependency conflict #143 ( mbeacom ) css: Quick style fix for buttons using the btn-info class #134 ( algae12 ) Glitches fixes and overall better buttons look and feel #127 ( algae12 ) Resolve false fail on Travis #124 ( mbeacom ) General python cleanup #122 ( mbeacom ) Remove all-caps (text-uppercase) classes #116 ( bumi ) fix roadmap items shift #100 #113 ( alx ) Remove misleading buttons on gitcoin UI #112 ( tra38 ) css: fixed overflow scroll on tip recieve page #109 ( thelostone-mc ) css: resize images to fit within the timeline container #108 ( algae12 ) fix: rounded tip amount to 3 decimal places in mail #104 ( thelostone-mc ) Add Travis and Codecov integrations #102 ( mbeacom ) small fix for forcing the images of podium be bigger on leaderboard #99 ( ernaneluis ) doc: added contributing.md #97 ( thelostone-mc ) Update get_prices to use new etherdelta WS API #95 ( mbeacom ) Simplify bounty management command #93 ( mbeacom ) fix of issue #76 Overhaul leaderboards page design #91 ( ernaneluis ) Fix display of plurals for some models in admin #88 ( mbeacom ) PostgreSQL alpine and docker compose restart policies #85 ( mbeacom ) Tips now show USD estimates #84 ( rajatkapoor ) Fix grammer in alert on tip page #83 ( edkek ) testimonial: added carousel on landing page #80 ( thelostone-mc ) css: prettify the subscribe button #74 ( thelostone-mc ) Update tip page to auto calculate USD #72 ( mbeacom ) Cleanup python imports #71 ( mbeacom ) Fix roadmap items move when hover over them. #67 ( sc0Vu ) Add psql persistence and remove redundant services #60 ( mbeacom ) Decrease Docker image size #59 ( mbeacom ) fix bounty definition height #54 #55 ( Kielek ) Correct comma typo in statement of Gitcoin aliases #49 ( iamchrissmith ) WEB3 API documentation #47 ( lawrencelink ) Minor Typo Error #45 ( k4m4 ) Craigslist #44 ( rajatkapoor ) HTTP Strict Transport Security #41 ( sergio-alonso ) Standard pseudo-random generators are not suitable for security/cryptographic purposes. #39 ( sergio-alonso ) Update link on image #15 ( bransbury ) add dropdown menu search via select2, fix #3 #13 ( gasolin ) Fix space, typo and rename #11 ( gamwe6 ) Send tips in one step via Gitcoin.co #10 ( owocki ) Fix instruction for running locally #9 ( cifvts ) Documents API Fields & Filter/Sort URL Parameters #6 ( anglinb ) * This Change Log was automatically generated by github_changelog_generator","title":"Changelog"},{"location":"mk_changelog/#change-log","text":"","title":"Change Log"},{"location":"mk_changelog/#v20180416015-2018-10-12","text":"Full Changelog Merged pull requests: Update weekly roundup for 12OCT2018 #2430 ( mbeacom )","title":"v20180416.0.15 (2018-10-12)"},{"location":"mk_changelog/#v20180416014-2018-10-11","text":"Full Changelog Implemented enhancements: refactor grants/new #2423 ( thelostone-mc ) Closed issues: Implement \"Approve\" Page Frontend #2351 Implement Frontend - \"Subscription Terminated\" Email #2291 Implement Frontend - \"Grant Cancellation\" Email #2290 Implement Frontend - \"Update Notification\" Email #2289 Implement Frontend - \"New Grant\" Email #2288 Implement Frontend - \"Support Ended\" Email #2287 Implement Frontend - \"New Supporter\" Email #2286 Implement Frontend - \"Thank you for supporting 'grant x' email #2285 Create Design - \"Subscription Terminated\" Email #2090 Create Design - \"Granted Ended\" Email #2089 Create/modify \"Grants Index\" Page - Design #1889","title":"v20180416.0.14 (2018-10-11)"},{"location":"mk_changelog/#v20180416013-2018-10-11","text":"Full Changelog","title":"v20180416.0.13 (2018-10-11)"},{"location":"mk_changelog/#v20180416012-2018-10-11","text":"Full Changelog","title":"v20180416.0.12 (2018-10-11)"},{"location":"mk_changelog/#v20180416011-2018-10-11","text":"Full Changelog","title":"v20180416.0.11 (2018-10-11)"},{"location":"mk_changelog/#v20180416010-2018-10-11","text":"Full Changelog","title":"v20180416.0.10 (2018-10-11)"},{"location":"mk_changelog/#v2018041609-2018-10-11","text":"Full Changelog","title":"v20180416.0.9 (2018-10-11)"},{"location":"mk_changelog/#v2018041608-2018-10-11","text":"Full Changelog","title":"v20180416.0.8 (2018-10-11)"},{"location":"mk_changelog/#v2018041607-2018-10-11","text":"Full Changelog Closed issues: Crowdfund contributions not being included in some bounty totals on issue explorer #2228","title":"v20180416.0.7 (2018-10-11)"},{"location":"mk_changelog/#v2018041606-2018-10-11","text":"Full Changelog","title":"v20180416.0.6 (2018-10-11)"},{"location":"mk_changelog/#v2018041605-2018-10-11","text":"Full Changelog Fixed bugs: ValueError: The 'github_svg' attribute has no file associated with it. #2417","title":"v20180416.0.5 (2018-10-11)"},{"location":"mk_changelog/#v2018041604-2018-10-11","text":"Full Changelog","title":"v20180416.0.4 (2018-10-11)"},{"location":"mk_changelog/#v2018041603-2018-10-11","text":"Full Changelog","title":"v20180416.0.3 (2018-10-11)"},{"location":"mk_changelog/#v2018041602-2018-10-11","text":"Full Changelog Closed issues: UI: Unaligned buttons on bounty page #2406 Merged pull requests: fixed button alignment on bounty page #2416 ( evgeniuz )","title":"v20180416.0.2 (2018-10-11)"},{"location":"mk_changelog/#v2018041601-2018-10-11","text":"Full Changelog Implemented enhancements: i'd like the 'where is my eth going' modal to show up on gitcoin.co/tips #2366 Update Tips with Updated Auto Complete #2362 Show hidden users their own profile page #2258 Approval Required: Make it Clear Who is Actually Working #2100 Move Moderator Controls out of main Work Area #2045 Optimize Activity query on index page #2034 Gitcoin rain Animation Performance #2029 Replace sync_gas_prices web scraping with json #1921 quarterly stats v2 -- funder and \"no action\" views #1036 Display github status on issues next to comment count? #749 Update Hours Dropdown in Funder Form #627 gitcoinbot tune up #596 As a user, I don't want to see github comment blocks in the bounty detail/description #538 Add Notes Field When Funding an Issue #475 [WIP] Added tooltip hover on tips page #2376 ( usmanmuhd ) tip : autocomplete shows payout address #2372 ( thelostone-mc ) Migrate image converter to pyvips #2346 ( mbeacom ) re-enables org profiles #2343 ( owocki ) WOC: Adds tooltip hover on top of user input field. #2334 ( usmanmuhd ) Fix overflowing text on toolbox cards #2322 ( willsputra ) bounty: hide start + submit work for funder #2315 ( thelostone-mc ) payout: added autocomplete #2296 ( thelostone-mc ) Timborden/location leaderboards #2268 ( timborden ) css: removing multiple font-family declarations #2192 ( thelostone-mc ) SVG and PNG conversions and handling for Avatars #2106 ( mbeacom ) dashboard: enable deep link of search #2062 ( thelostone-mc ) Change Bounty Details #1968 ( pinkiebell ) Confirming Auto-translation #1916 ( nanspro ) Fixed bugs: Increasing Funding Not Working #2407 bug - advanced payout #2380 new profile -- 'None' on tips received view #2341 Start work rejected emails have bad URI #2329 \"submit work\" button is greyed out #2308 get_amount endpoint raising 404 #2305 Posted Bounty did not import test from Github #2300 When on the /not_a_token page, text styling and size for the Gitcoin header toolbar is inconsistent. #2280 Profile \"four oh four\" #2254 Error: Invalid number of arguments to Solidity function #2248 bug - livepeer profile isnt showing the bounties it should #2246 Japanese translations throwing errors when executing makemessages #2234 IntegrityError: null value in column \"txn_hash_3\" violates not-null constraint #2232 Underscores in URLs results in italicized text #2217 bug - my profile shows my profile pic but it should show my avatar #2189 Bounty Crowdfunding USD Inaccurate #2179 UI issues with the nav on resizing #2177 No 'Stop Work' / 'Stop Work & Ding Rep' #2165 bug - avatar is wrong skin color #2150 Funder Clicked Kill Bounty on Accident #2144 Text unreadable due to low contrast with background on subscription form #2141 how it works page QA #2139 bug - You must be authenticated via github to use this feature when using Faucet #2104 Adjust cookie banner for iOS/Safari #2103 Widget errors #2063 bug - cookie header doesnt work with other languages #2052 Contributor Landing Page CSS Bug #2041 Clicking Stop Work Did Not Stop Work #2032 Bad USDT conversion data #2015 Disable Advanced Payout submission if required fields are empty/invalid #2010 Funder Unable to Approve Worker #1985 404s on gitcoin profiles #1952 Submit Work Prior To Approval #1951 Better State Management: \"No result found\" and \"Results\" are getting displayed at the same time #1938 Small issue with display #1934 AttributeError: 'list' object has no attribute 'split' #1919 Debug and resolve preferred_payout_address irregularities #1902 ValueError: The API key that you have entered is not valid, did you enter a username by mistake? #1898 User Not Receive Tips Email Notification and Notification in Profile Not Showing Up #1870 Single Payout Bounty Broken #1859 Stop Work displays on old Start Work activity feed entries #1854 Bug: Clicking in the form should clear the plan template #1852 Incorrect Funding Time Period Shown on Issue Details #1774 == BUG LIST - JULY 2018 == #1671 Status of 'DoneOpened' on paid out issues that have had their statues manually changed prior to payout #1647 css: remove overflow hidden #1616 Make Button Updates to Avatar Builder #1567 Show Just 1 Alert Banner for ERC20 Token #1566 avatar bug -- wrong eye color #1543 Avatar Builder Bugs #1523 Error: Invalid number of arguments to Solidity function #1453 BUG Personal Information Display on Unselected Option #1387 This bounty was 'killed' but gitcoinbot commented on the thread saying it was approved / accepted. #703 There is something wrong with links visibility in Gitcoin announcements mails. See screenshot. #702 Tips Should Not Remember Last Tipped Person #528 CSS changes to tooltip hover in tips #2415 ( usmanmuhd ) bug: advanced payout #2383 ( thelostone-mc ) Bounty row layout fix(es) #2374 ( pinkiebell ) Fix #2280 header text size inconsistent on /not_a_token /mission #2358 ( excalliburbd ) Display tip received time only if it exists #2345 ( arun1595 ) Fix tooltip of start and stop work links #2344 ( arun1595 ) fixed avatar builder color handling #2321 ( evgeniuz ) Resolve get_amount 404 on new bounty page #2306 ( mbeacom ) Adjust issue_details to use profile access token #2303 ( mbeacom ) Adjust premailer to use base_url #2265 ( mbeacom ) Adjust ENS registrar hash and error handling #2233 ( mbeacom ) Set up showdown to parse links #2218 ( arun1595 ) crowdfunded: bug fix #2180 ( thelostone-mc ) Add overflow in header if minihero not present #2080 ( SaptakS ) api: fixed offset param in explorer #2006 ( thelostone-mc ) Fix assemble_leaderboards to catch missing all_ cases #1851 ( mbeacom ) Closed issues: Improper design of tooltip hover in tip #2410 migrate gitcoin from web3js 0.2 to 1.0 #2369 bug - padding on /explorer and bounty #2367 Profile Enhancement - Bounties in Progress #2347 Upgrade to django 2.1.2 #2342 usability problem on the new profile - its hard to read the activities #2340 \"stop work\" button has the same copy on the popup box as the \"start work\" button #2307 Adding Gitcoin bot to your repo link broken #2299 as a user, i want linked live gitcoin exemplars in the bounty creation flow #2271 how/funder 502 bad gateway #2257 Account settings error #2255 Unable to submit work without ETH in Metamask #2243 Design - Advanced Pay - Separate Tips from Advanced Pay #2242 Build - Advanced Pay - Amount Should Add to 100% #2241 Build - Advanced Pay - Add User Auto Complete #2240 bug - i dont see a 'stop work' button on a bounty even though i am funder #2229 add grants video to landing page #2223 Advanced Pay - Show preview of where my ETH is going, so i can have faith my ETH is safe #2215 Create leaderboard by city/country/region #2213 as a user, i want to request a funding limit increase via a webform, so i don't have to go through the information complexity of contacting support (and so anyone on gitcoin core team can to limit increases) #2199 Add Gitcoin Requests Into E-Mail Drip Campaign #2198 Bug - Funded Issue Showing $0 USD #2191 \"Submit Work\" javascript error #2182 [DATA] Profile gives wrong impression (false data) #2168 Make It Clear Issue Has Been Crowdfunded V2 #2164 bug - quarterly roundup is broken #2151 Add meta tags to improve Gitcoin SEO #2147 Make Cancel Bounty More Explicit #2145 Update Cookie Banner with Shorter Text #2122 Submitting Work Twice #2118 Build ERC-1337 Landing Page #2116 bug - avatar builder does not register new assetes #2102 AttributeError: 'NoneType' object has no attribute 'interested' #2094 Create Design - \"Update Notification\" Email #2088 Create Design - \"Funds Withdrawn\" Email #2087 Create Design - \"Support Ended\" Email #2085 Create Design - \"New Grant\" Email #2084 Create Design - \"New Supporter\" email #2083 Create Design - \"Thank you for supporting \"grant X\" email #2082 suggestion: profiles should have the standard activity feed on them, instead of trying to parse everything out into 'completed bounties' and 'started bounties' etc #2077 SEO - Fix Soft 404 + Add Recommendations #2075 As a contributor, I don't want to have to do math to understand the total amount of a funded bounty that has additional crowd funding. #2072 ValueError: too many values to unpack (expected 2) #2066 As a developer on Gitcoin developing for Gitcoin, I would like some direction on how to use the Rinkeby network to test out Gitcoin #2065 Update Issue Expiring Email #2061 as a user who is bountying on behalf of my company, i want an invoice for a bounty, so i can expense it #2057 as a user, i want gitcoin.co/inbox, so i can manage my notifications (and action items) #2050 [Design] Inviting Specific Gitcoiners To Work #2038 Gitcoin Requests (v0: Fork of Gitcoin Faucet) #2036 TypeError: unsupported operand type(s) for +: 'float' and 'NoneType' #2031 Implement \"Create Grant\" Page - Frontend #2024 Implement \"Cancel Funding\" Page - Frontend #2023 Implement \"Grants Withdrawal\" Page - Frontend #2022 Implement \"Fund Grant\" Page #2020 issue explorer keyword bug #2011 Add Ability to Select a Contributor via autocomplete to Tip #2001 Submitted \"start work\" info-comment did not show up in the connected GitHub issue. #1999 Workers who are not approved to work on a task should not be warned for abandonment, the 3-day Gitcoin bot nudge should start from the point of approval, not the point of application #1996 as a bounty hunter, I want to be reminded to submit my work on Gitcoin once the ticket is closed on Github so I can get paid out for my work #1990 Multi-Party Payout Recipients Not Showing in 'Work Done' #1983 Auto-Approvals: No Update of Gitcoin Activity (in Issue Details) #1981 test github issue for demo to token foundry #1979 get_notifications - TypeError: string indices must be integers #1976 invalid literal for int() with base 10: '926)' #1972 No values in \"Denomination\" input #1970 DESIGN - As a potential contributor, I want the \"Top 3 Guarantee\" so I know that Gitcoin is worth my efforts. #1961 Create \"Grants Detail - Admin\" Page - Design #1960 Make it Easy for Funders to Reserve an Issue For or Tag a Contributor #1956 August Cut Off ======================= #1955 Make it Clear for Funders - How to Payout #1950 RelatedObjectDoesNotExist: User has no profile. #1949 Add Approve Worker on Issue Details #1947 User Receivin Twin Emails #1946 Make Clear on Funder Form How Syncing and Editing Works #1943 UX Add Project Type + Approval Settings to Issue Details #1928 Write script and create explainer video for Dev Grants #1926 Create \"Cancel Funding\" Page - Design #1910 Create \"My Grants\" Page - Design #1909 Create \"Fund Grant\" Page - Design #1908 Create \"Grants Withdrawal\" Page - Design #1907 Create/Modify \"Grants Detail\" Page - Design #1905 Request for Adding Fund Branding to Gitcoin Pages and Gitcoinbot Messages #1895 Create/Modify \"Create Grant\" View - Design #1890 Add Project Length to the Issue Details Summary #1888 Requests (WIP) #1885 Automated load and endpoint testing (locust, selenium, gatling?) #1884 API Refactoring / Standardization and code optimization/cleanup (queries, etc) #1883 Converting CSS to SASS/SCSS and modularizing #1882 Infrastructure: Caching and response time optimizations #1881 Infrastructure: healhchecks and scalability #1880 URI : migrate to path/repath + remove redundant URI #1879 Funder Dashboard #1878 Plan for Contributor Dashboard #1877 Wagtail CMS #1875 Funder Habit Forming #1872 Gitcoin Bot Updates #1871 Front End Refactor List #1868 Confirm Auto-Translation of Gitcoin to Japanese #1863 Landing Page Update #1861 Design: Dedicated Moderator Actions #1858 Confirm Auto-Translation of Gitcoin to Hindi #1844 bug - https://gitcoin.co/get 502's out #1842 bug - activities list is empty on profiles #1840 As a funder, I want to add the new funders video to the landing page, so I can see why gitcoin works for funding #1836 JSONDecodeError: Expecting value: line 1 column 1 (char 0) #1835 crowdfunding v2 #1832 JSONDecodeError: Expecting value: line 1 column 1 (char 0) #1815 How It Works V2 #1808 View By Orgs V1 #1798 crowdfunding v2 #1797 Add Deep Link to Explorer Search #1791 BadFunctionCallOutput: Could not decode contract function call getBountyData return data b'' for output_types ['string'] #1777 Show Cancelled Bounties Latest Activity in Profile #1770 BadFunctionCallOutput: Could not decode contract function call getFulfillment return data b'' for output_types ['bool', 'address', 'string'] #1754 Inventory Current Gitcoin UI Styles #1738 Clone Repo from KennethAshley and work from grants branch. #1714 What is the data flow? Do you have a diagram? Is data written to IPFS or postgres first? And what is initiator of action? #1710 Have the Staketree contracts been audited? #1709 Do the Staketree contracts need any tuning? Are we going to use contracts that are already deployed or deploy our own instances? #1708 Should there be a view for a patron to check on the status of their grant subscription(s)? #1707 Should there be a view for a developer to check on the status of their grant(s)? /grants/yourgrants, /grants/grantstatus #1706 Ensure Staketree contracts have all required functionality, linting, and tests #1705 Write tests for newly implemented smart contracts #1704 Write tests for newly implemented backend #1703 Write tests for newly implemented frontend #1702 implement any needed routes #1701 Ensure data is stored correctly in each location. #1700 Figure out data flow and ensure actions are performed on blockchain, IPFS and postgres in correct order. #1699 Implement any needed functions #1698 Check web3 functionality. Is it implemented in Kenneth's code? Are the contracts being instantiated and made visible? #1697 Instantiate contracts and point functions correctly #1696 BUILD Action Plan Example for Start Work Dialog #1674 Work Schemes - How it Works Break Down #1670 Feature: Moderator Dashboard (Admin) #1669 New avatar assets #1663 BadFunctionCallOutput: Could not decode contract function call getBountyToken return data b'' for output_types ['address'] #1626 Django Pipeline SCSS Migration #1624 Individual Market V1 #1623 On-demand QA environments by PR #1621 BadFunctionCallOutput: Could not decode contract function call getBountyArbiter return data b'' for output_types ['address'] #1612 BadFunctionCallOutput: Could not decode contract function call getNumFulfillments return data b'' for output_types ['uint256'] #1608 As a user on Contributor Landing Page v2, I want programming language specific terms, so I can see bounties / opportunities relative to my skillset #1599 Update Fund Issue Icon #1568 Remove 'Dibs' from Gitcoin Bot comment on Github #1535 Update Gitcoin Bot Comment (on Github) When Funding Increased #1518 CODE - As a user, I want gitcoin.co/vision to exist, so I can understand the core team's vision. #1510 The BIG Gitcoin Grants (powered by Staketree) Bounty #1469 DESIGN Contributor Dashboard #1468 DESIGN - As a user, I want gitcoin.co/is_not_a_shitcoin to exist, so I can understand why Gitcoin did not do a token / token sale. #1443 Ability to Customize the Frequency of Gitcoin Bot #1431 As a funder, id like the ability to extend the expiration date of a bounty, so i can keep it open #1427 as a funder, i want feedback / commenting ability on the accept submission page, so i can give feedback #1410 Build -- Show Submissions to Accept on Profile Dropdown and in Profile #1373 BUG -- Profiles with no info on them look funny. #1363 AuthStateMissing: Session value state missing. #1290 As a user, I want to be able to pledge to an already-pledged issue #1287 FieldError: Cannot resolve keyword 'github_issue_number' into field. Choices are: _val_usd_db, accepted, balance, bounty_owner_address, bounty_owner_email, bounty_owner_github_username, bounty_owner_name, bounty_type, canceled_on, contract_address, create #1228 Integrate with the Elastic APM library #1208 Add Elastic APM to k8s stack #1207 Build Funder Dashboard - Working Prototype - As a funder, I want a place where I can track all my stuff, so I can manage it all #1177 Code As a Front-End Developer I want consistent CSS classes for buttons #1173 Emoji Not Showing On Issue Explorer #1157 [Design] Post-Bounty Completion Flow [Funder] #1152 MOBILE EPIC #1142 USABILITY/PERFORMANCE EPIC #1140 RESEARCH & DATA EPIC #1138 BLOCKCHAIN PROJECTS EPIC #1137 FUNDER WORKFLOW EPIC #1136 UNIQUE GITCOINER EPIC #1134 INFRASTRUCTURE EPIC #1133 COMMUNITY IDEAS EPIC #1132 CONTRIBUTOR WORKFLOW EPIC #1131 MARKETING/ BD EPIC #1130 ONBOARDING EPIC #1128 [Design]: 'Good First Issue' Aggregator #1123 Revisit Project Timing #1109 Fund Bounty With Multiple Tokens #1100 bounty is open but github issue is closed #994 what languages should we support next? #970 I've lost track of my bounty tip #968 [Design] Funder Feature: Reach Out To Top Bounty Hunters #947 Relationship Between Toolbox Items and Core Product #851 EthOS -- a SolidCoin Experiment #843 Duplicate \"Funds Paid\" email being sent #837 test out autotranslate #814 As a site admin, I want a Gitcoin Drip Marketing Campaign that explains our vision (and how to use Gitcoin) over time, so we can enable our users to be successful. #794 Celery #778 Grants Landing page #718 Add # of Bounties Completed Dynamic Counter #682 Translate the webapp to other languages #643 Expired Status == Open Status? #637 How Does This Work? #633 when a tip is redeemed, gitcoinbot should comment back on the thread and let everyone know #597 New Navigation Structure Research #587 Mobile Audit of Gitcoin.co #561 Add more prominent notification that I've been tipped #546 as a new user, how do i update my github username on the funding/new page? #542 Sync Github and Gitcoin Issue Details #507 Consistent fonts across the Gitcoin site #502 Update Gitcoin Brand Guide #499 galaxy s8 chrome mobile display issues #496 as a user, i want to be clear which bounty fields are going to be public, so i can manage my privacy #451 A New Front End Framework #440 Use Gitcoin Brand Template on Terms Page #435 Relevant information needed to understand gas price #431 Consistent fonts across the app #426 User feedback: claiming of issues #403 (unknown): uncaught exception: not supported #324 Merged pull requests: grants / index : add team-members #2412 ( thelostone-mc ) landing: contributor page #2405 ( thelostone-mc ) Adjust new grants, fix grant details and cards for user details and logos #2399 ( mbeacom ) grants/new: refactor #2397 ( thelostone-mc ) WIP grants/new: refactor #2396 ( thelostone-mc ) Fix eslint #2392 ( mbeacom ) General grants cleanup #2391 ( mbeacom ) Adding live exemplars with proper formatting. #2385 ( Anish-Agnihotri ) refactor: css + markup cleanup #2384 ( thelostone-mc ) added pony for avatar builder #2373 ( thelostone-mc ) change grant card styles #2361 ( octavioamu ) Update roundup email for 5OCT2018 #2360 ( mbeacom ) Created new Avatar accessory category called Masks and created a Jack-o-Lantern Mask #2356 ( gianni-dalerta ) Adjust Travis config to handle GeoIP dbs #2338 ( mbeacom ) tip autocomplete workarounds #2337 ( owocki ) Fix #2329 - Adjust email template URL references and fix bad ref #2330 ( mbeacom ) fix ios text #2326 ( willsputra ) Adding all emails and their appropriate assets for grants branch. #2319 ( Anish-Agnihotri ) Add GH ratelimit healthcheck, job, cmd and additional Infura specific healthcheck #2318 ( mbeacom ) WIP Index #2312 ( octavioamu ) Implement Front-end - \"New Grant\" Email #2311 ( excalliburbd ) Adjust issue details token handling and move user specs to currentProfile #2304 ( mbeacom ) Update roundup email for 28SEP2018 #2298 ( mbeacom ) Temporarily removes advanced payout as an option #2295 ( SaptakS ) Makes the issue title a required field in new funding #2274 ( SaptakS ) updates documentation #2270 ( owocki ) Update roundup email for 21SEP2018 #2264 ( mbeacom ) Add VSCode remote debugging handling and documentation #2263 ( mbeacom ) added space cadet clothing Refs: https://github.com/gitcoinco/web/iss\u2026 #2262 ( marnibrewster ) Fix box position bug in select2 #2251 ( octavioamu ) html: updated text on banner contributor page #2238 ( thelostone-mc ) Refactor profile page #2237 ( SaptakS ) Update i18n translations and resolve Japanese trans errors #2236 ( mbeacom ) Added title and meta tags #2231 ( aashutoshrathi ) Weekly Roundup - 14SEP2018 #2222 ( mbeacom ) proposed gitcoin contribution monetary policy #2221 ( owocki ) hero: updated text + resize + restructure #2220 ( thelostone-mc ) Increase Funding Limit Request Form #2209 ( pinkiebell ) Adjust cookie banner for iOS/Safari #2207 ( mul1sh ) bot: updated markdown #2202 ( thelostone-mc ) navbar: fix tablet friendly #2196 ( thelostone-mc ) Replace project length with time commitment #2190 ( arun1595 ) Autogenerated documentation #2183 ( mbeacom ) Roundup email updates for 7SEP2018 #2181 ( mbeacom ) seo : optimize #2178 ( thelostone-mc ) Make It Clear Issue Has Been Crowdfunded V2 #2173 ( pinkiebell ) svgo: compress img #2172 ( thelostone-mc ) Fixes admin priviledge to stop work in activity #2167 ( SaptakS ) Refactor issue expiration email #2162 ( SaptakS ) migrates from current_bounty=True to .current() because the latter is\u2026 #2161 ( owocki ) Add middleware to disable autodetect lang by header #2157 ( mbeacom ) Hide Personal Information on Unselected Option #2156 ( rahulpat ) avatar: ui fixes #2154 ( thelostone-mc ) Update title to issue in slack notifications #2153 ( arun1595 ) WOC: Prevent advanced payout form submission when recipient address is empty #2149 ( rahulpat ) sendgrid categories #2148 ( owocki ) bounty: changes cancel button to red #2146 ( thelostone-mc ) css: fix missing background color #2142 ( thelostone-mc ) review: added feedback #2140 ( thelostone-mc ) bot : remove dibs text from message #2138 ( thelostone-mc ) newsletter 8/31 #2136 ( vs77bb ) Fix minor grammatical issue #2135 ( arun1595 ) Cleanup email templates #2133 ( mbeacom ) Isolate moderator and admin actions for ease of usability #2132 ( arun1595 ) show accept/reject bounty in permissioned bounty #2131 ( thelostone-mc ) landing: reduce size of title on mobile #2128 ( thelostone-mc ) Adding icons to tree section #2127 ( nanspro ) Update text for cookielaw #2124 ( SaptakS ) Fixes version of eth-utils and web3 to make compatible with other pac\u2026 (Ended up fixing eth-abi and keeping eth-utils and web3 to the same version to avoid breaking) #2123 ( SaptakS ) update : how_it_works page #2121 ( thelostone-mc ) bounty: enable submit only once per user #2119 ( thelostone-mc ) small tip tweaks #2111 ( owocki ) bounty: crowdfunded bounties #2109 ( thelostone-mc ) Add user search autocomplete #2108 ( octavioamu ) eslint: fix #2107 ( thelostone-mc ) migrates from current_bounty=True to .current() because the latter is more exhaustive #2105 ( owocki ) Adds some new eye styles. Male & female versions! #2099 ( saricden ) Bounty Requests: Move to django forms #2096 ( pinkiebell ) Adds codefund banner in the issue explorer and issue details page #2095 ( SaptakS ) newsletter 8/24 #2093 ( vs77bb ) Add base elastic apm integration #2092 ( mbeacom ) warns user if they try to bounty something but dont have enough tokens #2086 ( owocki ) Add (Issue is closed) to the 'View on Github' button if is_issue_closed. #2081 ( pinkiebell ) eslint : lint fixes #2079 ( thelostone-mc ) Update static references to replace hardcoded graph and gas static references #2076 ( mbeacom ) shared.js: Add {show,hide}BusyOverlay #2073 ( pinkiebell ) Fixes navbars with dash class, the narrow navbars #2070 ( SaptakS ) Fix widget loop #2068 ( octavioamu ) fix widget errors #2064 ( octavioamu ) Add base healthchecks and LB 200 endpoint #2060 ( mbeacom ) invoices #2059 ( owocki ) dashboard: remove save search link #2058 ( thelostone-mc ) Gitcoin Bounty Requests V0 #2056 ( pinkiebell ) refactor: remove save search #2051 ( thelostone-mc ) Rain #2049 ( octavioamu ) Use S3 to serve static #2048 ( mbeacom ) Add shirtsweater avatar asset #2047 ( ajayns ) Multi-Party Payout Recipients Not Showing in 'Work Done' # #2040 ( owocki ) Adds fund branding organisation information with a bounty #2039 ( SaptakS ) new leaderboard items #2035 ( owocki ) code clean up #2033 ( thelostone-mc ) refactor: remove unneeded html tag #2030 ( thelostone-mc ) deprecates old tip receive flow #2027 ( owocki ) Create grants branch on gitcoinco/web repo #2018 ( captnseagraves ) newsletter 8/17 #2017 ( vs77bb ) pages/dashboard: Fix issue explorer keyword bug #2012 ( pinkiebell ) Remove FullStory #2009 ( mbeacom ) Fixes text and alignment of no-issue-banner #2007 ( SaptakS ) bounty: enable accept / reject worker for owner #2005 ( thelostone-mc ) Auto-Translation to Japanese #1863 #2003 ( aashutoshrathi ) Rename Chinese locale file to correct format. #2002 ( ziyangkoo ) css: fixes #1998 ( thelostone-mc ) bounty_details.js: Show 'Submit Work' only for approved &-or started bounties. #1997 ( pinkiebell ) start work : update placeholder #1994 ( thelostone-mc ) Newsletter 8/10 #1984 ( vs77bb ) gas guzzlers in gas station #1980 ( owocki ) Upgrade cryptography python package to 2.3 - Security #1978 ( mbeacom ) Adjust gitcoin bot get_notifications to use pygithub #1977 ( mbeacom ) img: removed unused images #1975 ( thelostone-mc ) replaced misspelled 'deonomination' with 'denomination' #1974 ( zevaverbach ) Strip characters from stdbounties_id and check isdigit #1973 ( mbeacom ) uri : cleanup #1971 ( thelostone-mc ) Redis based caching #1969 ( mbeacom ) workaround for ipfs hashes not existing #1965 ( owocki ) new bounty : updated UI #1963 ( thelostone-mc ) fix #1921 replace sync_gas_prices from web scraping to json #1959 ( PumpkingWok ) what_is_gitcoin : revert to old design #1957 ( thelostone-mc ) bounty: restructure pages #1948 ( thelostone-mc ) explorer: ensure results from latest api call are served to the user #1941 ( thelostone-mc ) hack: trailing slash for profile #1937 ( thelostone-mc ) Fix #1934 - Resolve cancelled funds appearing in profile total #1935 ( mbeacom ) allow trailing slsah for profile #1931 ( thelostone-mc ) livestream 8/3 #1930 ( vs77bb ) Improve tip slack notification #1929 ( arun1595 ) lander video switcharooooooooooooO #1927 ( owocki ) sets the bounties limit if not specified, for performance reasons #1925 ( owocki ) sync geth stopgap fix #1924 ( owocki ) Switching tree section on landing page #1923 ( nanspro ) Display project length in issue details page #1922 ( arun1595 ) shared.js/mutate_interest: Show a generic message on network errors. #1918 ( pinkiebell ) Upgrade django to 2.1, modify field defaults, and address deprecations #1915 ( mbeacom ) as a user, i want documentation about chain of custody, so that i know my funds are secure #1913 ( owocki ) dashboard: remove tech stack filter #1911 ( thelostone-mc ) not_a_token page #1906 ( octavioamu ) Moderators v1 #1903 ( mbeacom ) Update the presskit copy #1900 ( mbeacom ) Restructure #1897 ( thelostone-mc ) sends an email to funders who have been inactive for 30 days, asking if they have any feedback #1894 ( owocki ) Split create_new_bounty kwargs building and check if once #1892 ( mbeacom ) change name of missing image #1891 ( octavioamu ) refactor PR #1887 ( thelostone-mc ) as a user, i want receive tip email copy to be clear, so i know where to find my ETH #1886 ( owocki ) added branding style to terms page #1869 ( evgeniuz ) css: minor refactor #1862 ( thelostone-mc ) expiration start work day 0 #1857 ( owocki ) Minor tweaks to action plan textarea #1856 ( arun1595 ) fix it twice for 'why cant i payout this issue?' question for funders #1853 ( owocki ) css: display filter tags + sort on mobile #1849 ( thelostone-mc ) Sentry integration #1846 ( mbeacom ) Visually improves the readonly fields #1845 ( SaptakS ) leaderboard on weekly roundup #1841 ( owocki ) Extend expiration of bounties #1838 ( SaptakS ) contributor page: css updates #1833 ( thelostone-mc ) adds recent activity on funder landing page so ppl can see how active the site is #1831 ( owocki ) Rework 'Start Work Dialog' and gitcoinbot message structure #1781 ( pinkiebell ) [WIP] UI Inventory #1755 ( pinkiebell ) Crowdfunding of Bounties && New Tips Architecture && Social Sharing #1737 ( owocki ) nav_auth.html: make nav_avatar an \\<a> tag and link it to /profile/. #1690 ( pinkiebell ) Show Just 1 Alert Banner for ERC20 Token #1668 ( pinkiebell ) save recent searches in tabs above search bar -- like http://www.hipmunk.com/ does #1447 ( owocki ) WIP: Feature/increase dashboard tests coverage #858 ( cryptomental )","title":"v20180416.0.1 (2018-10-11)"},{"location":"mk_changelog/#pre_crowdfund-2018-07-25","text":"Full Changelog Implemented enhancements: Make GitcoinBot Recognize Closed Issues. #1640 Confusing placeholder text for issue URLs #1194 Gitcoin Bot Enhancements #1040 as a user, i want the ability to test slackbot integration so i can know it's working #1004 Links opening in new tab/window open in same target #676 As a user, I want to sort and filter the bounty list by technical stack / keywords #343 Modify issueURL placeholder text to reflect GH issues #1195 ( mbeacom ) Add yapf linting base and lint dataviz app #1169 ( mbeacom ) gitcoinbot: updated language #1150 ( thelostone-mc ) css: fixed comment layout #1073 ( thelostone-mc ) fixes https://github.com/gitcoinco/web/issues/1040 #1043 ( owocki ) drastically improve api read performance #1026 ( owocki ) bounty: unify modal designs #809 ( sethmcleod ) Fixed bugs: StatisticsError: no median for empty data #1809 Too Many Alerts #1792 Gas Price Showing as a Funded Issue? #1773 Title & Descriptions not Displaying in Funder Form #1772 Gitcoin Bot Bounty Value Missing on Github Issue #1771 User Profile and Gitcoin Logo are not clickable #1739 Error Alerts Should Convey a Problem #1692 Button Text Not Legible #1686 Back Button on Contributor Ftux Not Working #1685 White paper page isn't responsive and rendering is off #1641 BUG -- gitcoinbot not commenting on github thread for bountied issues #1627 Uncaught TypeError: Cannot read property 'getBoundingClientRect' of undefined #1603 Dai Value Bug Gitcoin Bot #1592 Disable Editing of Issue Description on Funder Form #1588 bug - issues on accept work page #1580 [Bug] As a funder, I cannot approve a bounty hunter for work. #1537 Avatar Bug on Mobile #1527 Incorrect values (# bounties completed and $ rewarded) in the Leaderboards #1506 Error in the Home link extracted from Github. #1505 TypeError: unsupported operand type(s) for *: 'float' and 'decimal.Decimal' #1503 UnboundLocalError: local variable 'interest' referenced before assignment #1502 Bug: Broken Links in Footer #1435 New footer messsed up on https://gitcoin.co/ios #1430 Gitcoin completion/funding counts on org icons are incorrect #1404 SyntaxError: illegal character #1398 SyntaxError: Unexpected token '>' #1395 ReferenceError: moveWithScroll is not defined #1394 TypeError: Cannot read property 'getItem' of null #1393 BUG Image Not Displaying on Issue Details #1391 BUG Markdown Messed Up on Issue Detials View #1388 Update Soft & Hard Expired #1375 BUG -- Cancelled Bounty on Gitcoin Did Not Return Funds #1367 Require agreement on kill bounty #1358 BUG - Black circle on ENS page #1353 Running sync_geth against Rinkeby results in all unknown schema errors #1334 Visiting Tools continuously makes failed requests #1324 Back button UI is messed up in Receive Tip success page #1313 BUG - profile has inconsistent stats #1293 As an anonymous user, I would like to unsubscribe from email notifications. #1165 Unable to filter for C# #1078 Profile editing fails due to required slack fields #1072 'Stop Work' button appears on someone else's work. #1067 Gitcoinbot work submitted message has weird formatting #1063 can't search by freeform text anymore #1046 Cannot claim bounty on Rinkeby #854 erroneous gitcoinbot comment #733 Gitcoin issue status changed back to Open from Work Started #695 Links opening in new tab/window open in same target #676 add sorting functionality back to the gitcoin explorer #570 users reported receiving each email twice #115 Remove duplicate Tip properties #1810 ( mbeacom ) Fix division by zero error #1805 ( arun1595 ) WIP: Fix record_bounty_activity.. #1660 ( pinkiebell ) Clean up user's personal URL from github #1512 ( arun1595 ) ios: updated css + refactored #1445 ( thelostone-mc ) Update slack CTA link #1415 ( arun1595 ) Clean hashbang from gh urls #1381 ( mbeacom ) Fix font awesome icon classes #1354 ( arun1595 ) Fix feedback icons overlap with input value and center the icons vertically #1349 ( arun1595 ) toolbox: avoid $.get when url is undefined #1325 ( thelostone-mc ) dashboard: results row fix #1307 ( thelostone-mc ) ENS: Ensure 10%+ gas minimum #1303 ( mbeacom ) bug: set width to 100% on magnify #1178 ( thelostone-mc ) bug: added button--primary to back to gitcoin button #1168 ( thelostone-mc ) Closed issues: AttributeError: 'NoneType' object has no attribute 'fulfillments' #1826 AttributeError: 'NoneType' object has no attribute 'fulfillments' #1825 AttributeError: 'NoneType' object has no attribute 'fulfillments' #1824 StatusError: HTTPError: 504 Server Error: GATEWAY_TIMEOUT for url: https://ipfs.gitcoin.co:443/api/v0/cat?stream-channels=true&arg=QmfC7iLEvAwe8xDqk8FmGaoGbB3QGRNL3EYzFUfVkde1vo #1821 AttributeError: 'NoneType' object has no attribute 'fulfillments' #1820 StatusError: HTTPError: 504 Server Error: GATEWAY_TIMEOUT for url: https://ipfs.gitcoin.co:443/api/v0/cat?stream-channels=true&arg=QmNk3CfMScMut3kcFKP7DMCV1y1ZF99D8N3hNZ1bmGqj2T #1819 The sumo popup doesn't trigger for new visitors #1812 ZeroDivisionError: float division by zero #1806 Add autotranslate base for Chinese #1804 Cannot fund issues #1801 Include link to bounty in Gitcoin bot's post #1794 Image alignment is wrong on /bounty/quickstart #1766 JSONDecodeError: Expecting value: line 1 column 1 (char 0) #1762 Testing Fund an Issue #1761 BUG - emails to email_logger@gitcoin.co are cheiwng up our sendgrid credits #1760 Bounty on Gas Price Analysis Content - 7/15/2018 #1751 NameError: name 'tokens' is not defined #1748 JSONDecodeError: Expecting ',' delimiter: line 1 column 597 (char 596) #1745 TemplateDoesNotExist: head/v2/images/avatar/head/1-f8d5c2.svg.txt #1744 ValueError: not enough values to unpack (expected 2, got 1) #1743 Bug - gas page is not mobile friendly. #1742 Get project to stable point, rebase current KennethAshley:grants with gitcoin:master #1713 Set up project and run tests to ensure baseline #1712 Determine whether 199 skipped tests is normal or not #1711 CODE - as a marketer, i want gitcoin.co/presskit so I can know Gitcoin's brand guidelines #1683 as a user, i want this module on /about to be clickable, so i can click it. #1682 BUG - Exception when loading /explorer via API on local #1679 Coop Bounty - 1 Start Work Missing #1678 Implement Gitcoin internationalization / i18n support #1675 Bug: Code not visible on website #1667 bug - misaligned css on the acceptance page #1665 dupe activities #1661 Wrong profile in activities / messed up activity log #1659 ZeroDivisionError: float division by zero #1650 Organizations V1 Tech Approach #1643 View Of Hidden Bounties #1636 As a user, I want the cookie popup to not show up until the sumo popup is dismissed, so they don't overlap with each other? #1630 Metamask Locked button not prominent on Navbar #1629 V2 Metamask Connection State #1625 Exception: attempting to create a new bounty (875) when is_greater_than_x_days_old = True #1620 in tip flow, user should be notified if they are on the wrong network #1606 as a user, i want standard bounty tx's to be processed instantly by gitcoin, so i know my tx went through #1605 Contributor Landing Page QA #1594 Dropdowns on the topbar don't close when clicking on another dropdown #1593 IndexError: list index out of range #1565 Build Waiting State #1562 Update Buttons in Account Settings #1561 Updates - Activate DAI #1560 Fund Issue button out of place on mobile #1557 as a user, i want to be prompted to login when creating my avatar so i dont waste time building an avatar and can't save it #1554 Create Profile Flyout #1529 Add Link to Access Avatar Builder #1520 Outstanding Funder Form Updates #1519 Contributor Ftux V1.1 #1516 Put Admin Controls on one line #1511 States \"please review questions\" - but there are no questions #1509 Update Notif-Gitcoin Message Format - Slack #1507 Outstanding avatar issues #1504 Disable Gitcoin Bot Responses #1498 design: new 404 page #1493 travis fails with 'The command \"pytest -p no:ethereum\" exited with 1.' #1492 Change login link hover color on ENS page #1484 Remove Extra Kerning on All Gitcoin Emails #1480 Make Icon on Issue Explorer Circular #1478 DESIGN View by Org on Issue Explorer #1467 Admin Toggle - Clear Comments on Github Issue #1465 Code - Update https://gitcoin.co/mission to show off that we use an open protocol #1463 As a user, I want a beautiful svg animation for the Gitcoin Tree as I scroll down the landing page, so I can be enamoured with the mission to grow Open Source #1462 z-index issue on gitcoin.co/ens #1457 BadFunctionCallOutput: Could not decode contract function call getBountyToken return data b'' for output_types ['address'] #1456 Ratelimited #1455 DESIGN - as a marketer, i want gitcoin.co/presskit so I can know Gitcoin's brand guidelines #1451 As a user, I want a better 404 page for hidden profiles #1436 Bring Discord Bot to Parity with Slack Bot #1434 Funder Feature - Extend My Bounty Time Frame #1429 Gitcoin Bot and Project Status #1425 Uncaught SyntaxError: Unexpected token => #1423 Frontend Coding Advanced Payout Feature #1422 can't run docker-compose up -d --build #1419 Uncaught ReferenceError: Accounts is not defined #1418 Gitcoinbot should not do reminders on contest/cooperative bounties #1409 As an admin I want to triage the Landing Page Conversion Rate, which is way down since the new LP launched. #1408 Gitcoin Landing Page V2.1 #1407 BadFunctionCallOutput: Could not decode contract function call getBountyData return data b'' for output_types ['string'] #1400 As a funder, I'd like to know how many times a developer has started a bounty but not finished it #1390 BUILD Contributor Landing Page #1386 As a funder, I want to allow the crowd to increase contributions to a bounty, so we can crowdfund issues. #1380 As a funder, I want to changeBountyFulfillmentAmount() for contest/cooperative bounties, so I can pay out multiple submissions #1379 Gitcoin organization shield #1378 Add Visual to Gitcoin Bot Status #1374 TypeError: object of type 'int' has no len() #1371 Update https://gitcoin.co/mission to show off that we use an open protocol #1370 BadFunctionCallOutput: Could not decode contract function call getBountyArbiter return data b'' for output_types ['address'] #1369 test 3443 #1366 on the new funder form, the design of the price estimation is wrong #1361 As a funder, I want to have a 'Powered by Gitcoin' button so that I can forward people to Gitcoin on my existing bounty page #1359 Form input feedback icon overlaps with a long input field value #1348 As a user, i'd like faucet distributions to scale up and down with the eth network backlog so i can always have enough gas to submit a standard bounties tx #1341 Admin: Stop Work + Stop Work & Slash #1340 empty user comments should be handled on gitcoinbot #1336 fontawesome : Revert to css #1331 system thinks bounty is cancelled when it is not #1326 'Email us' link in New funding page throws 404 #1320 Notify me if a 2nd Person Starts Work #1319 Tip form pre-populates with last sent tip information #1315 Gitcoin $50K Creative :) #1312 ValueError: {'code': -32000, 'message': 'replacement transaction underpriced'} #1302 code - as a community member, i want a public gitcoin.co/results page, so I can show off that the system is working #1300 Pytest / Travis failing TestAssembleLeaderboards.test_handle_command #1298 organization profiles #1292 windows variable error when submiting work? #1291 ValueError: {'code': -32000, 'message': 'known transaction: cc3dd39aed568cef83849b8af36191ba49c3dbb0ba818c1b9e0f3462d0d9c9f0'} #1289 TypeError: unsupported operand type(s) for /: 'NoneType' and 'int' #1288 TypeError: unsupported operand type(s) for /: 'NoneType' and 'int' #1286 prune DB size #1278 AttributeError: 'NoneType' object has no attribute 'replace' #1274 Modular FTUX #1267 Bounty amounts not showing on /profile #1264 Profile V3 #1263 Fix Settings Responsive View #1261 add saptak/aditya/scott to the team page on /about #1257 BUILD: HOW IT WORKS #1244 GDPR: DISCONNECT & DELETE #1243 GDPR: Write Email To Gitcoin Community #1242 GDPR: Update Email Preferences #1241 GDPR: Update Privacy Tab #1240 GDPR: Show Message in Modal #1239 GDPR: Remove remembering terms #1238 GDPR -- Privacy Policy Updates Email #1237 GDPR -- Cookie Consent #1236 GDPR: Settings Content Updates #1235 GDPR - check about checkbox prefills #1234 GDPR -- Ask for re opt-in from all EU customers #1233 GDPR -- update privacy policy #1232 GDPR -- Add info to our contact forms #1231 JSONDecodeError: Expecting value: line 1 column 1 (char 0) #1230 Ratelimited #1229 FieldError: Invalid order_by arguments: ['http://testasp.vulnweb.com/t/xss.html?%00.jpg'] #1227 ValueError: The ExternalBounty could not be created because the data didn't validate. #1226 Detailed Funder Flow with multiple issue support #1224 Design Developer Landing Page #1223 Code - cleanup mission / values page #1220 Add CSAT surveys for bounty interactions - FE #1211 Add CSAT surveys for bounty interactions - BE #1210 Add NPS feedback for the platform #1209 Add the kubernetes base IaC to repo #1200 \u600e\u6837\u7528JAVA\u8bed\u8a00\u7f16\u8bd1\u4e00\u4e2a\u65f6\u5149\u6c99\u6f0f\u3002 #1191 Failing pytest - test_tip #1172 ValueError: The 'node_image' attribute has no file associated with it. #1154 ValueError: The 'node_image' attribute has no file associated with it. #1153 post an ethereum themed gif #1149 RESEARCH EPIC #1139 test #1135 Parent of #920 #1127 Epic 1 #1125 Abstract Away Gas Price / Gas Limit #1124 nginx Doesn't Seem to Recognize (or Direct Properly) www.gitcoin.co #1122 As a user, I want to be prompted to authenticate before seeing a start work modal #1107 How to surface work schemes to the community #1106 Make Image a Thumbnail for Long Descriptions #1105 Build New Gitcoin Landing Page #1104 BUILD - As a funder (Project recruiter), I want a place where I can track all my stuff, so i can have a flow of web3.0 talent #1092 As a member of the community, I want these Profile Privacy Features, so I can be more private #1091 SyntaxError: broken PNG file (chunk b'\\x00\\x00\\x00\\x00') #1089 e-mail should be optional #1088 Transactions didn't post after adding higher gas price in meta mask #1069 Local storage of explorer filter does not consistently load #1064 JSONDecodeError: Expecting value: line 1 column 1 (char 0) #1057 Misalignment with arrows on new page #1056 as a user, i want to be able to save my avatar to be my gitcoin profile #1051 as a user, i want to know when my information is gonna be public, so i can manage my info privacy #1048 BadFunctionCallOutput: Could not decode contract function call getNumFulfillments return data b'' for output_types ['uint256'] #1047 BadFunctionCallOutput: Could not decode contract function call getFulfillment return data b'' for output_types ['bool', 'address', 'string'] #1045 'Stop Work' Enhancements #1041 Started work / Stop Work History #1037 Funder Dropdown Options #1030 Cannot read property 'split' of undefined #1025 design - as a community member, i want a public gitcoin.co/results page, so I can show off that the system is working #1020 Add discord bot integration #1015 List used contracts under metamask icon in the footer #1013 Explorer multiselect \"Any\" option doesn't behave as expected #1011 as a user, i want one click approval of erc20 token bounties, because its faster and easier #1007 Build Quickstart Screen & Tidy Up Funder Flow #982 as a repo owner, i want different bounty work schemes, so i can choose the right bounty type for the job #973 Create Seamless Onboarding Experience - Contributor #957 make gitcoinbot status indicator into an image #952 code - as a user, i want a quarterly 'my stats' email, so i can see my activity on the platform #946 code - gitcoin.co/activity #925 Code - Profile Frontend Refresh #920 as an admin, i want to spin up a gitcoin geth node, so i can use it for gitcoin stuff #901 FTUX Backend #859 Funder Activities Task Flow #852 Funder FTUX #850 How to ensure funder payout? #848 Event Flier #847 New Marketing Landing Page #846 Gitcoin Email Updates #845 As a user, I want to build an Avatar, so I can show off my bad self. #813 seperate repo owners / developers earlier in the landing page #811 DESIGN - cleanup mission / values page #805 [DESIGN] - Bigger Text Area for Bounty Description #781 in my settings, i should be able to disguise myself from the leaderboard/having a profile #710 better guide rails around what tasks are a good fit for gitcoin, how to price them #681 [DESIGN] Gitcoin Requests #671 Feedback mechanism funder + contributor for each project #660 Design: Profile Refresh #656 As a user, I want a \"My Work' module so I can see what work is active / done for me on gitcoin #655 confusing first user experience for bounties #652 as a marketer, i want a specific landing page for python, so i can better target consumers #620 Increase Code Coverage by 4% #607 Gitcoin Bounty Hunter Explorer Dashboard #588 Gitcoin Bot Updates #567 Consolidate Funder Actions Into a Dedicated Area #534 How to Get Started (Developer) #516 as a user, i want tooltips on gitcoin.co/new to tell me what each field does #497 gitcoin ENS subdomains #450 As a user, I want to add an 'apply' step to the bounty process, so I can accept the best applicants #442 Build Onboarding Flow - MVP #441 Clear and concise series of Gitcoin emails #438 Unify Modal Designs #430 Clear distinction between content that is clickable and not #427 Clear no results page #418 Consistent messaging across the app #417 As a developer, I want grants available to sponsor my ongoing work in open source. #380 Error: MetaMask detected another web3. MetaMask will not work reliably with another web3 extension. This usually happens if you have two MetaMasks installed, or MetaMask and another web3 extension. Please remove one and try again. #368 as a website mantainer, i want a javascript widget that can show off my bounties, so i can lead more of my community to gitcoin #354 css : Media queries to fix up the landing page #273 stale bounties filter #197 mission / values page v2 #178 Allow users to view their tips / bounties on the web. #141 Tip Receive UX Flow Feedback #136 Epic CSS Cleanup #135 Feedback from a user: ability to manage keyword prerferences. #132 Find funded issues by specific address #92 Send a notification (github, browser, or otherwise) instead of email for tips/bounties. #43 Bot / Github integration Revamp #34 Job Matching Engine #28 Pilot Partnerships #27 Make Language filter UI clearer in Bounties #25 The big 'feedback on the project' post. #18 Merged pull requests: fix for stretched laptop on contributor landing page #1829 ( owocki ) activity feed on landing page to increase conversion rate #1828 ( owocki ) Change color of payout submit button #1827 ( SaptakS ) dashboard/templates: Add 'required' attribute to all 'terms' checkboxes #1818 ( pinkiebell ) Fix checkbox icon #1817 ( octavioamu ) shows how it works on landing page / external nav #1813 ( owocki ) Utilize hosted IPFS node and fallback to Infura #1802 ( mbeacom ) restructuted profiles #1800 ( thelostone-mc ) Do not display an 'wrong network' alert banner if metamask is locked. #1796 ( pinkiebell ) Add gitcoin bounty details url to start work github bot copy #1795 ( mbeacom ) consolidated payment wizard flow #1789 ( owocki ) Make back button work on contributor onboard #1788 ( mttmartin ) attach job desc ux fixes #1787 ( owocki ) Replace disabled attribute with readonly for title and desc #1785 ( SaptakS ) General lint/cleanup of tip views #1784 ( mbeacom ) Refactor GH issue details endpoint #1780 ( mbeacom ) Disables editing of the issue title and description #1779 ( SaptakS ) urls.py + about #1778 ( thelostone-mc ) Adds gasLimitEstimate for bulk payout #1776 ( SaptakS ) Adds google optimize to contributor landing page #1775 ( SaptakS ) Remove soft-expired logic from user interface. #1768 ( pinkiebell ) Fix image alignment on /bounty/quickstart #1767 ( pinkiebell ) Mobile responsive Gas Navigation and Resizing SVG gas graphs #1765 ( Kempo ) fixed linter errors. assigned new variable in for loop. #1757 ( whb07 ) css: fixed loading state #1752 ( thelostone-mc ) 3d dataviz of gas prices vs confirmation time #1749 ( owocki ) Make the user profile in onepager link to /profile/ #1740 ( pinkiebell ) onepages: updated to Muli & letter-spacing #1736 ( thelostone-mc ) Gitcoin Newsletter (7/13) #1735 ( vs77bb ) Fix alerts without types #1734 ( arun1595 ) Activity stream #1732 ( darkdarkdragon ) no sumo popup if logged in #1730 ( owocki ) Allow maxAge GET param for embed image responses #1729 ( mbeacom ) updated 404 page #1726 ( thelostone-mc ) Vision page #1725 ( octavioamu ) Updated Gitcoin Contribution Documentation with Issue Types #1724 ( frankchen07 ) Bug - Misaligned Css On The Acceptance Page #1665 #1721 ( olafghanizadeh ) Allow upto 4 cards in a row to utilise more space #1719 ( SaptakS ) Makes get started button blue as suggested by Alisa #1718 ( SaptakS ) Improve the css for newsletter #1717 ( SaptakS ) Presskit page #1683 #1691 ( olafghanizadeh ) contributor_landing: added newsletter #1689 ( thelostone-mc ) Clickable bounty hunters #1682 #1688 ( olafghanizadeh ) Contributor landing page: change text color of 'Get started' to white. #1687 ( pinkiebell ) Fix markdown of html tags in issue description #1684 ( pinkiebell ) Display an error banner on network error on start-/stop work.. #1681 ( pinkiebell ) contributor : language specific impl #1677 ( thelostone-mc ) refactor YGE code (done) & start on bulk payouts (done) #1666 ( owocki ) fix for https://github.com/gitcoinco/web/issues/1661 #1662 ( owocki ) Change 'not enabled this token'-banner color to orange. #1657 ( pinkiebell ) Fix Dai Value Bug Gitcoin Bot #1592 #1656 ( pinkiebell ) Fix: White paper page isn't responsive and rendering is off #1654 ( pinkiebell ) Display bounty title before value #1653 ( arun1595 ) hide network pill on mobile + reorder media query code #1651 ( thelostone-mc ) gas estimation calculator on gas page #1648 ( owocki ) Implement management command 'sync_listener' #1645 ( pinkiebell ) Changes color of getting started from green to gc blue #1639 ( SaptakS ) css : fixes #1638 ( thelostone-mc ) Fix gas settings #1637 ( SaptakS ) Add Hotjar #1635 ( mbeacom ) Replace 'worth' with 'value' #1634 ( arun1595 ) bug: set title attribute to null when switching to right network #1633 ( thelostone-mc ) Newsletter PR (7/6) #1632 ( vs77bb ) as a issue submitter, i want diff issue templates for diff issue types on gitcoin/co repo, so i can have more customized templates to my use case #1628 ( owocki ) gas advisories #1619 ( owocki ) Fix - #1593 #1615 ( Abhay07 ) Remove unnecessary script #1614 ( arun1595 ) Make event names in slack notifications consistent #1613 ( arun1595 ) Add Joseph's testimonial #1611 ( arun1595 ) Remove duplicate script tags #1610 ( arun1595 ) add Build Waiting State #1604 ( iamonuwa ) We Believe Section added in gitcoin.co/mission #1602 ( Abhay07 ) email: reindent + update css #1601 ( thelostone-mc ) added scott to the team page #1600 ( thelostone-mc ) moves tokens from being hardcoded in the codebase to being stored in the db #1598 ( owocki ) adds OZR token #1596 ( owocki ) Upgrade Django to 2.0.7 #1595 ( mbeacom ) adds help link to how it works dropdown #1591 ( owocki ) new metamask banner #1590 ( thelostone-mc ) Ensure avatar auth #1587 ( premachb ) results page by different keyword #1586 ( owocki ) Fix gas price settings css #1585 ( SaptakS ) Newsletter PR #1583 ( vs77bb ) Update RUNNING_LOCALLY_DOCKER.md #1577 ( eayoungs ) Update where to display how it works again #1576 ( mbeacom ) Adds results link to the footer #1575 ( SaptakS ) nav: fix on mobile #1574 ( thelostone-mc ) fixed alerts #1573 ( thelostone-mc ) Upgrade docker and travis to use Python 3.7 #1572 ( mbeacom ) refs: https://github.com/gitcoinco/web/issues/1568 #1571 ( thelostone-mc ) hide message + USD when not available #1570 ( thelostone-mc ) Display how it works everywhere except index page #1569 ( mbeacom ) fix : eslint errors #1564 ( thelostone-mc ) text: Go -> Save #1563 ( thelostone-mc ) Save Avatar takes you to Profile Page #1559 ( SaptakS ) Add link to the issue URL in the confirmation page #1558 ( SaptakS ) Fix for #1457 (Updated zIndex for Cookie Banner) #1556 ( premachb ) landing : added growing tree svg #1555 ( thelostone-mc ) avatar schwag request form #1551 ( owocki ) Implements a svg badge.. #1546 ( pinkiebell ) Fix broken CSS from how it works #1541 ( mbeacom ) Fix localstorage issue in firefox #1540 ( SaptakS ) all admin actions are in a new line #1539 ( thelostone-mc ) minor changes: added #1538 ( thelostone-mc ) Update how it works to use one url #1536 ( mbeacom ) ftux : further changes #1533 ( thelostone-mc ) Fix gasPrice on changing recommendation #1531 ( SaptakS ) newsletter 6/22 #1530 ( vs77bb ) Check for slow instead of fast #1526 ( SaptakS ) Fix malformed HTML #1525 ( arun1595 ) Fix buttons in standalone avatar page #1524 ( SaptakS ) Funder FTUX #1521 ( SaptakS ) Update slack notification format #1517 ( arun1595 ) Discord test button and send webhook msg with avatar #1514 ( kelvintyb ) Fix selectmenu initialization issue #1513 ( arun1595 ) Fix typo #1508 ( arun1595 ) 1244 how it works #1501 ( darkdarkdragon ) Remove bot's response to repos missing @gitcoinbot #1500 ( arun1595 ) Update open gitcoin role on about page #1499 ( arun1595 ) Fix jquery selector #1497 ( arun1595 ) Refactor getNetwork code #1496 ( arun1595 ) Fix pytest version #1495 ( SaptakS ) add https://cln.network token base CLN #1491 ( leonprou ) as a funder, i want to advertise that i am hiring on my bounty, so bounty hunters can take this into account when attempting my bounty #1488 ( owocki ) Change pull request link hover color #1487 ( arun1595 ) /results page is slow, this PR perf profile helps diagnose that and makes it faster #1486 ( owocki ) Change login link hover color to white #1485 ( arun1595 ) Remove unnecessary letter spacing in emails #1481 ( sprusr ) WIP: Make funder icons circular #1479 ( arun1595 ) Added the gas amount to the right place #1477 ( shad-k ) Roundup 6/15 #1474 ( vs77bb ) WIP: Contributor landing page #1459 ( arun1595 ) Fix font awesome loading in ENS page #1458 ( arun1595 ) Add name linking to vivek's slack notification and welcomebot #1452 ( mbeacom ) robot_error: set max-width #1450 ( thelostone-mc ) updated font-size for ftux large devices #1448 ( thelostone-mc ) Issue Explorer Check in tools for Admin (Vivek) #1446 ( owocki ) no flex on alert messages #1444 ( owocki ) Simple Nav #1439 ( owocki ) Update django logger and deploy script handling #1437 ( mbeacom ) Replace arrow functions with traditional functions #1424 ( arun1595 ) Start/Stop history #1420 ( darkdarkdragon ) rollbar : quickstart #1417 ( thelostone-mc ) Upgrade django to 2.0.6 #1414 ( mbeacom ) Add space between not and have #1413 ( arun1595 ) landing page: final changes #1412 ( thelostone-mc ) roundup 6/8 #1411 ( vs77bb ) landing : updated mobile design #1406 ( thelostone-mc ) Github notification safeguard for local #1405 ( mbeacom ) Fix: return of login #1403 ( SaptakS ) Open gitcoin profile links on the same tab #1401 ( SaptakS ) External links should open in new tab with noreferrer and noopener #1399 ( SaptakS ) Adds funding link in the navbar for landing page #1397 ( SaptakS ) Corrects lightbulb image name #1396 ( SaptakS ) Fixes: https://github.com/gitcoinco/web/issues/1391 #1392 ( kziemianek ) Fix project type number #1385 ( arun1595 ) Enhancement bounty info view on the bounty details page #1384 ( arun1595 ) Fix minor typo #1383 ( arun1595 ) birth: landing page #1377 ( thelostone-mc ) Update top banners in different bounty flow pages #1365 ( SaptakS ) Let price estimation text span a whole row #1362 ( arun1595 ) Fix FontAwesome static refs #1360 ( mbeacom ) Funder form v3 #1356 ( SaptakS ) notif: updated banner #1355 ( thelostone-mc ) Add min value for hours worked input field on submit work form #1350 ( arun1595 ) temp: using font-awesome CDN #1346 ( thelostone-mc ) Remove invalid css #1345 ( arun1595 ) add 'stop work & slash' button #1343 ( jvmaia ) profile : revamp #1342 ( thelostone-mc ) disable sendgrid events until we figure out root cause of db size issues #1339 ( owocki ) Trim issue action plan before validation #1338 ( arun1595 ) Adjust sync_geth settings and docs for local #1335 ( mbeacom ) fontawesome: revert to css #1333 ( thelostone-mc ) shared: refactored + removed dead code #1332 ( thelostone-mc ) Decrease the scope of GH perms requested on login #1328 ( mbeacom ) UX/UI for new results page #1327 ( travisdmathis ) show pricing guide on new bounty form #1322 ( owocki ) Fix email link in newsletter and mailchimp templates #1321 ( arun1595 ) Don't save tip information in local storage except current user's #1318 ( arun1595 ) docker-compose was wrong #1317 ( owocki ) Fix primary button style in receive tip success page #1314 ( arun1595 ) WIP: Stats email v2 #1311 ( oogetyboogety ) org profiles #1310 ( owocki ) as a user, i want to show number abandonments on gitcoin profile, so i can know who's a flake #1309 ( owocki ) Quickstart PR with corrected redirect #1308 ( SaptakS ) Fix: specify height of upper left only for submit bounty form #1306 ( SaptakS ) css: fixed dashboard filter row #1304 ( thelostone-mc ) Enable autocorrection via pre-commit and add yapf #1301 ( mbeacom ) fixes ENS #1299 ( owocki ) adds ENS subdomain registrations to activity report #1296 ( owocki ) helper command for pg_top #1295 ( owocki ) send tip from github username, not just 'full name' #1294 ( owocki ) Fix broken image in about page #1285 ( arun1595 ) Add checks for bounty/tip notifications on local/dev #1284 ( mbeacom ) ftux: refactor + restructure + url rename #1281 ( thelostone-mc ) admin / impersonate users #1280 ( owocki ) records form submission records for GDPR purposes + mailchimp permi-delete #1279 ( owocki ) Adds SaptakS to team #1277 ( SaptakS ) leaderboard updates for mitch #1275 ( owocki ) Improves deletion confirmation modal button styling #1272 ( SaptakS ) css: fixed font name #1271 ( thelostone-mc ) roundup 5/25/18 #1270 ( vs77bb ) Updates text in deletion modal #1269 ( SaptakS ) settings: updated styling + linting #1266 ( thelostone-mc ) css: update cookie styling #1265 ( thelostone-mc ) Mission/Values Page Redesign / Refactor #1260 ( travisdmathis ) settings: redid page #1255 ( thelostone-mc ) WIP: GDPR Cookie consent #1254 ( mbeacom ) GDPR: Management command to send email to all gitcoin users #1252 ( SaptakS ) GDPR: show updated policy via modal #1251 ( thelostone-mc ) GDPR -- Add info to our contact forms #1250 ( owocki ) GDPR reconsenet from EU residents #1249 ( owocki ) GDPR: Adds disclosure and consent withdrawal information in privacy tab #1248 ( SaptakS ) Email Preferences at a much more granular level #1247 ( owocki ) GDPR: Fixes https://github.com/gitcoinco/web/issues/1243 #1246 ( owocki ) GDPR: Remove remembering terms and blockchain tos from the funder forms #1245 ( SaptakS ) UTS46 ENS domain names #1225 ( owocki ) GDPR & Associated Privacy Updates -- Must be merged by EOD May 24 2018 #1222 ( owocki ) ens cleanup / marketing stuff #1219 ( owocki ) css: clean up ENS #1197 ( thelostone-mc ) one time approvals for each erc20 token used on gitcoin #1190 ( owocki ) fix for 'accept submission' not showing up #1189 ( owocki ) dashboard : minor fixes #1187 ( thelostone-mc ) roundup! vivek's first PR #1182 ( vs77bb ) Add Livepeer Token (LPT) for tipping #1176 ( jozanza ) Add CR fixtures and disable get_prices by default #1175 ( mbeacom ) add Unblocked Ledger Token (ULT) #1174 ( 7alman ) Add fulfillment endpoint for each entry by std bounty id #1170 ( mbeacom ) HOLD: releases iOS landing page link - DO NOT MERGE UNTIL IOS APP IS READY #1167 ( owocki ) image: ran make compress-images #1164 ( thelostone-mc ) about: fixed up CSS for about page community + alumini #1163 ( thelostone-mc ) css: added important for overridden prop #1161 ( thelostone-mc ) css: set limit for image in issue description #1159 ( thelostone-mc ) allows configurable 'max start work amount' #1158 ( owocki ) Modified web3 address to be optional for EthOS #1148 ( eswarasai ) Added etherscan url in EthOS Tweet #1147 ( eswarasai ) onboard : autopopulate keywords for users #1146 ( thelostone-mc ) Mark ethos hacking #1145 ( owocki ) Adds cors headers, and conditionally allow all for GET requests of bounties. #1126 ( matthewlilley ) js : added gettext across all alerts #1121 ( thelostone-mc ) updated start work dialog -> to ask hunter for action plan #1118 ( thelostone-mc ) Add Avocado (AVO) token #1116 ( peter-evans ) Fixes: https://github.com/gitcoinco/web/issues/1030 #1115 ( bakaoh ) Style refresh quote button #1114 ( arun1595 ) Prompt the user to log in before starting work #1113 ( arun1595 ) ant token name did not show up #1108 ( owocki ) project_types (formerly work schemes) #1098 ( owocki ) data privacy on new issue submit #1097 ( owocki ) makes email address optional in new bounties #1096 ( owocki ) As a member of the community, I want these Profile Privacy Features, so I can be more private #1095 ( owocki ) alumni model and view #1093 ( owocki ) ios applink on the landing page and bottom notifciation #1090 ( owocki ) Change cursor of questions in help page to pointer #1086 ( arun1595 ) Fix grammatical issue #1085 ( arun1595 ) Change Running Locally Header #1084 ( arun1595 ) dashboard: side_bar filters refactor #1082 ( thelostone-mc ) dashboard: fix filter uri #1081 ( thelostone-mc ) bugfix: tech stack filter fix #1080 ( thelostone-mc ) Dynamic widget documentation #1076 ( matthewlilley ) Add left margin for activity time #1074 ( arun1595 ) mail: updated alt + removed extra \\</p> + reindent #1071 ( thelostone-mc ) test button to test slack integration #1070 ( darkdarkdragon ) Fixed #1046 #1068 ( eswarasai ) fix toggle any filter #1065 ( joshmorel ) css: funding / killing form update #1061 ( thelostone-mc ) the ability for bounty funders to snooze gitcoinbot inactivity warnings #1059 ( owocki ) escalation not removal #1058 ( owocki ) css: prettified start work dialog box to match style + stop work button #1055 ( thelostone-mc ) gives staff the ability to remove users from a bounty #1042 ( owocki ) logs abandoned work and prevents users from starting new work bc of it #1039 ( owocki ) staggers cron start times #1034 ( owocki ) Quickstart screen for bounty creation flow #1029 ( SaptakS ) Slack Welcomebot on AWS Lambda #1017 ( mbeacom ) quarterly_stats Fixes: https://github.com/gitcoinco/web/issues/946 #1016 ( CuriousLearner ) Add autotranslate base #971 ( mbeacom ) QA: Implement Avatar builder Frontend (Fixes #813) #967 ( Smona ) sets default search project status to 'any' #936 ( owocki ) ftux: birth #889 ( thelostone-mc ) WIP: Update FaucetRequest with FK to Profile #884 ( mbeacom ) ENS Subdomain Feature #509 ( scottydelta )","title":"pre_crowdfund (2018-07-25)"},{"location":"mk_changelog/#pre-pr884-2018-04-30","text":"Full Changelog Fixed bugs: Faucet translation isn't rendering properly #1032 NoReverseMatch: Reverse for 'viz_index' not found. 'viz_index' is not a valid view function or pattern name. #1022 Gitcoin bot 2nd attempt doesn't render properly #991 BE tests currently failing #953 [BUG] The User Menu is Covered on TX Confirmation Screen #924 Gitcoinbot did not comment when bounty was posted #915 No unsupported network alert on bounty funding #773 Modify setup_lang to use User #980 ( mbeacom ) expiration tests fix #913 ( kziemianek ) Closed issues: DoesNotExist: Profile matching query does not exist. #1008 AttributeError: 'AnonymousUser' object has no attribute 'profile' #1005 testaroooooooo 123 #996 Updating user notification preferences fails and returns (403) CSRF verification failed #988 Resolve pytest / travis failures #987 error when submitting faucet request #979 TypeError: bad operand type for unary +: 'str' #976 AttributeError: 'NoneType' object has no attribute 'email' #954 test 123 #949 Issue explorer don't show issue in case gas price has been changed #945 ConnectionError: HTTPSConnectionPool(host='ipfs.infura.io', port=5001): Max retries exceeded with url: /api/v0/cat/QmXxkBASF92QvFFwChwZAECSRsjoMstMHJ2A9bwXuchXbA (Caused by NewConnectionError('\\<urllib3.connection.VerifiedHTTPSConnection object at 0x7f6791 #932 Test is a test issue #929 As a user, I would should be informed when I no longer need to keep tip confirmation window open #928 AttributeError: 'JsonResponse' object has no attribute 'read' #921 AttributeError: 'LeaderboardRank' object has no attribute 'local_avatar_url' #914 Design Funder Landing Page #908 Test title #907 404 after logout at profile page #905 Navbar responsive issue #903 as a submitter, i want to link my github PR when i submit work, so i can show off what i did #893 design - as a user, i want a quarterly 'my stats' email, so i can see my activity on the platform #892 make fix stylelint error #877 timezone issues with opened date #876 as a repo owner, i want to be able to approve people who've started work, so i can filter those who i want to work with #812 design - gitcoin.co/activity #804 Allow the user to set different language for the Gitcoin app #802 coding - /mentors page #725 as a user, i want upvotes / downvotes on tool page, so i can cast my vote on gitcoin's tool direction #706 Gitcoin should monitoring issue pull request as well #696 refactor bounty.value_in_usdt into two functions #693 Notify Gitcoin/Funder that Developer is Starting Work #683 (DESIGN) As a user, I want a Blockchain Job Board so I can find professional work in the space #540 Handle multiple bounties per github issue URL #533 Fund an Issue Suggestion/FTUX #529 Display Tips on Leaderboard #522 How to Get Started (Repo Maintainer) #517 Http404 #481 new_bounty marketing emails need to be moved to a background job #477 Clean Up Bounty Creation Flow #429 Functioning Search Field #412 As a core team member, i want to Track deploys & releases for faster debugging #405 (unknown): Uncaught this network is not supported in bounty_address() for gitcoin #362 Add slack bot integration #259 As a team member, I'd like to be on the /about page, so I can show off that I'm part of the team. #222 Merged pull requests: fixes for https://gitcoincommunity.slack.com/archives/C8E45J5D0/p1525097521000711 #1024 ( owocki ) slack welcome messages #1012 ( owocki ) hotfix: wait for approval to issue bounty #1006 ( owocki ) adds rates estimate on bounty details page #998 ( owocki ) Action URLS Cleanup (and other goodies) #983 ( owocki ) Notify Gitcoin/Funder that Developer is Starting Work #981 ( darkdarkdragon ) unsupported network warnings when trying to do an aciton on a network we dont support #978 ( owocki ) warnings when youre looking at a non mainnet bounty #977 ( owocki ) pricing brackets #972 ( owocki ) Adds bounty flow doc to readme #956 ( owocki ) Add slack bot integration #955 ( darkdarkdragon ) smarter github notifications #948 ( owocki ) Tool modifications #944 ( mbeacom ) track hours worked on fulfillment #942 ( owocki ) about: Fix Origin Story #933 ( thelostone-mc ) verboseness of gitcoinbot reminders #931 ( owocki ) more feedback emails #930 ( owocki ) bounty: hide timeline on cancelled bounties #922 ( thelostone-mc ) fixes https://github.com/gitcoinco/web/issues/876 #919 ( owocki ) make expiration status less inclusive #918 ( owocki ) about: core team design revamp #916 ( thelostone-mc ) navbar responsive issues #904 ( kziemianek ) avatar cleanup - and adds the ability to blend in the gitcoin logo to an avatar #902 ( owocki ) ability to add a pr link to work submission #900 ( owocki ) nav + explorer fixes #890 ( thelostone-mc ) Upgrade deb image to Stretch #888 ( mbeacom ) Added team bios and community member links to /about page #887 ( jakerockland ) WIP - d3 data viz experiments #886 ( owocki ) dashboard: Tests cleanup. #857 ( cryptomental ) preferred language #810 ( kziemianek ) Initial commit for Search functionality #790 ( eswarasai ) Tool voting #763 ( kziemianek )","title":"pre-pr884 (2018-04-30)"},{"location":"mk_changelog/#20180416-2018-04-16","text":"Full Changelog Implemented enhancements: Detect GitHub issue activity other than comments #458 ( JakeStoeffler ) Fixed bugs: Cannot submit work #883 feedback crm just went a little haywire #873 Closed issues: TypeError: Object of type '__proxy__' is not JSON serializable #844 Detect \"Referencing\" as \"Work\" #576 Merged pull requests: Add admin link to navbar for staff and switch settings icon #899 ( mbeacom ) adds tutorials on help page #898 ( owocki ) Github comments when user is warned/removed (in addition to the emails that are sent when this happens) #897 ( owocki )","title":"20180416 (2018-04-16)"},{"location":"mk_changelog/#20180415master-2018-04-16","text":"Full Changelog Implemented enhancements: Feature/refactor value in usdt #853 ( cryptomental ) Fixed bugs: Bounty details screen on mobile not responsive #759 Closed issues: Incorrect dollar value shown for bounties #879 As a user, I want to break apart my email settings and my profile settings #795 Merged pull requests: Update Travis pipeline to use new stages #885 ( mbeacom ) identify trust wallet #882 ( kziemianek ) new nav for auth/login for site #881 ( owocki ) status update dates on the bounty model #878 ( owocki ) new_bounty emails #867 ( owocki ) in my settings, i should be able to disguise myself from the leaderboard/having a profile #745 ( owocki )","title":"20180415master (2018-04-16)"},{"location":"mk_changelog/#pre-853-2018-04-12","text":"Full Changelog Fixed bugs: admin login broken in prod #871 Closed issues: AttributeError: 'NoneType' object has no attribute 'email' #872 This is a test bounty for demo purposes #868 As a user, I only want to receive 1 match email per day, so I dont unsubscribe #454 Merged pull requests: Django Auth Redux #862 ( mbeacom )","title":"pre-853 (2018-04-12)"},{"location":"mk_changelog/#pre-django-auth-redux-2018-04-11","text":"Full Changelog Implemented enhancements: responsive profile #825 ( kziemianek ) Fixed bugs: Broken profile markup #817 alpha tag confusion #792 Fixed heights in tips list #787 Funded issues are shown up as expiring in search results #783 fix for bouty details buttons padding #842 ( kziemianek ) Bean/fix typos #829 ( StareIntoTheBeard ) Closed issues: update can_submit_after_expiration_date #855 Request Funding Increase #849 Expired bounty invalid days ago counter #839 Canceled Bounty gitcoinbot github message was wrong #838 bounty detail page - button padding is messed up at certain resolutions #836 IndexError: list index out of range #835 AssertionError: Cannot filter a query once a slice has been taken. #833 'done' bounties should not have the time left field visible #824 comment needs left padding #823 RelatedObjectDoesNotExist: User has no profile. #820 Document and check all possible status values #816 Logo width is incorrect #808 Performance Updates #777 design - /mentors page #565 Update Gitcoin Email Designs #563 Code - /pitch pages #506 Price fluctuates on the explorer stats page #491 As a site admin, I want a Gitcoin Drip Marketing Campaign that explains our vision (and how to use Gitcoin) over time, so we can enable our users to be successful. #448 I want to see the progress of my newly created bounty tickets #422 Issue Explorer Details Page V2 #419 Merged pull requests: Add ipdb and django shell access to docker setup #863 ( mbeacom ) docker shell fixes #861 ( owocki ) fix expiration tests #860 ( kziemianek ) update can_submit_after_expiration_date #856 ( owocki ) fix for Expired bounty invalid days ago counter #840 ( owocki ) bounty: hide progress bar on work done status #828 ( thelostone-mc ) Fixes: https://github.com/gitcoinco/web/issues/792 #827 ( willsputra ) docker / github login instructions #822 ( owocki ) todos should be falsy #821 ( owocki ) Django auth #818 ( mbeacom ) bug fix : bounty + landing + dashboard #807 ( thelostone-mc ) bounty: added progress bar #764 ( thelostone-mc ) bounty: mobile alignment fix #762 ( thelostone-mc ) Email design update #746 ( jakerockland )","title":"pre-django-auth-redux (2018-04-11)"},{"location":"mk_changelog/#pre-django-auth-1-2018-04-06","text":"Full Changelog Implemented enhancements: Profile should make use of the django user framework #312 Closed issues: See what my last actions were when I logged in (as bounty funder). #423 Merged pull requests: bounty: fixed avatar url + tooltip style #784 ( thelostone-mc ) bounty : minor changes #768 ( thelostone-mc ) Add django auth framework #574 ( mbeacom )","title":"pre-django-auth-1 (2018-04-06)"},{"location":"mk_changelog/#pre-django-auth-2018-04-06","text":"Full Changelog Fixed bugs: the big 'profile might need a redesign or some bugfixes' thread. #580 Closed issues: \"ReferenceError: Accounts is not defined\" Error printed to console when sending a tip #806 As a user, I would like to view profile bounties, repos, etc in a paginated fashion #550 An easy way to read the list of funded issues on my profile page #424","title":"pre-django-auth (2018-04-06)"},{"location":"mk_changelog/#20180404-template-1-2018-04-05","text":"Full Changelog","title":"20180404-template-1 (2018-04-05)"},{"location":"mk_changelog/#20180404-template-0-2018-04-05","text":"Full Changelog","title":"20180404-template-0 (2018-04-05)"},{"location":"mk_changelog/#20180404-base-template-2018-04-04","text":"Full Changelog Closed issues: Groundwork for Internationalization (Translation of App to Other Languages) #642 Merged pull requests: stylelint:fix info in CONTRIBUTING.md #803 ( kziemianek ) Limit Profile stat results to valid bounties #791 ( mbeacom ) Fixes: https://github.com/gitcoinco/web/issues/642 #728 ( bakaoh )","title":"20180404-base-template (2018-04-04)"},{"location":"mk_changelog/#pre-728-2018-04-04","text":"Full Changelog Closed issues: Responsive Design Issues On The Gitcoin Website #684","title":"pre-728 (2018-04-04)"},{"location":"mk_changelog/#pre-684-responsive-cleanup-2018-04-04","text":"Full Changelog Implemented enhancements: 'my projects' tab should be greyed out if user is not logged in #769 Issue Explorer Detail #737 issue funder should be able to stop work #666 Investigate Image Compression Across Gitcoin for Performance Improvements #608 inline validations #554 Need to be able to stop work bounties as the funder #463 standardbounties: automatically cross-process bounties posted to bounties.network to gitcoin #268 Static handling and cache invalidation #262 css: rebirth of the bounty #691 ( thelostone-mc ) fixing some width, flex, and spacing issues as discovered in issue #684 #688 ( joshmobley ) changed all target=new to target=_blank with rel=noopener #677 ( michelgotta ) revamped tool page #672 ( owocki ) Inline validations #571 ( KennethAshley ) Fixed bugs: Getting an Error When Trying to Tip User #776 Issue Explorer Check-box Undone #744 after sending tip, blue alert that should have had a success message in it said 'undefined' #687 refresh_bounties empty URL bug #686 TypeError: Object of type 'BountyFulfillment' is not JSON serializable #678 loading page is busted #653 KeyError: 'token' #649 standard bounties: multiple bounties per issue URL #251 standardbounties: if you try to fulfill a bounty that doesnt exist it spins forever #250 bug: need auto refresh on gitcoin submission pending page #179 explorer: added missing css stylesheet #747 ( thelostone-mc ) html: removed extra css link from header.html #739 ( thelostone-mc ) Closed issues: test 123 #788 Really thin kill bounty screen #786 messed up CSS on https://gitcoin.co/funding/process #780 avatar_url is wrong #779 Hardcoded year in emails copyright section. #765 Contributing Link in README.md doesn't work #755 test 123 #752 NameError: name 'time' is not defined #751 NameError: name 'time' is not defined #750 test 123 #734 test 123 #722 test 123 #720 reverse bounties #719 'accepted' time is wrong on bounty #714 Using docker to setup and got \"localhost refused to connect\" error, and ReadMe file is outdated #713 /explorer on mobile needs some alignment fixes #705 bounty explorer can be slow #689 as a user, i want to ahve an 'in alpha' badge on alpha tools, so i can know which tools aren't yet GA #685 gitcoin.co/new issue page not responsive #679 Scope of task #670 test 123 #654 Emails with [DEBUG] header in prod #650 Faucet giving 500 when submissino #646 Update Gitcoin Weekly Newsletter #632 as a user, i want gitcoin to integrate standardbounties contribute() method, so i can contribute more funds to a bounty #617 Tidy Up Issue Explorer #601 as an administrator, id like to add faucet distributions to activity_report, so i can track them #600 redesign embeddable widget for github reops #594 upgrade: font-awesome 5 #593 Add Gitcoin Newsletter Page #584 Latest News Updates #518 Clear and concise message about work started from Gitcoin Bot #508 Remove Subscribe to Funded Issues at top of Issue Detail Page #504 Longer titles are profile page overflow their bounds #501 gitcoinbot did not comment on github when work\\_done event fired #495 Issue explorer on mobile needs a quick cleanup #494 Exception: attempting to create a new bounty when is_greater_than_x_days_old = True #485 People shouldn't be able to start work on more than 3 issues at a time #478 JSONDecodeError: Expecting value: line 1 column 1 (char 0) #467 BACKEND -- Gitcoin External Bounties tool #447 Clear Connection Between Notification and Error States #432 Consistent display of ETH and USD across app #421 To see only open issues #420 Consistent button styles across the app #416 Consistent H1 treatment #414 Clear and concise tooltips #410 Standardbounties expiration date treated differently than Gitcoin expiration date #393 Uncaught ReferenceError: getParam is not defined #390 Uncaught TypeError: Cannot read property 'coinbase' of undefined #389 Uncaught TypeError: Cannot read property 'accounts' of undefined #388 (unknown): \uad6c\ubb38 \uc624\ub958 #385 (unknown): ':' is required. #383 JSONDecodeError: Expecting value: line 1 column 1 (char 0) #382 Error: Access is denied. #381 (unknown): Syntax error #376 (CODE) as a user, i want to see bounties from other platforms, so i can work on bounties outside of the gitcoin ecosysstem #372 TypeError: an integer is required (got type NoneType) #360 Uncaught SyntaxError: Identifier 'slides' has already been declared #352 Uncaught SyntaxError: Identifier 'slides' has already been declared #349 Cannot read property '2' of null when submitting bounty #342 Test Issue #341 SyntaxError: expected expression, got '*' #339 Uncaught ReferenceError: web3 is not defined #336 Uncaught TypeError: Cannot read property 'accounts' of undefined #318 Error: Web3ProviderEngine does not support synchronous requests. #307 Error: Syntax error, unrecognized expression: select[name=deonomination #306 Uncaught ReferenceError: nextSlide is not defined #305 Uncaught ReferenceError: web3 is not defined #303 Uncaught SyntaxError: Unexpected token * #302 (unknown): Syntax error #300 (unknown): Script error. #297 ReferenceError: Can't find variable: nextSlide #295 Uncaught ReferenceError: nextSlide is not defined #294 ReferenceError: Can't find variable: nextSlide #293 Uncaught ReferenceError: nextSlide is not defined #292 Uncaught ReferenceError: web3 is not defined #291 Uncaught ReferenceError: web3 is not defined #290 Uncaught ReferenceError: nextSlide is not defined #289 Uncaught TypeError: Cannot read property 'coinbase' of undefined #287 Uncaught TypeError: Cannot read property 'accounts' of undefined #286 flow to reject a claim and payout to someone else is kind of cumbersome #275 StandardBounties: The ability to ingest Bounties.Network Bounties #264 ERC20 batch tip send #233 improvement - filtering bounties for repository #232 Issue Explorer Usability tweak #227 Treat claimed issues as open #225 design: index of bounties from other bounty projects #221 Detect profile from Metamask/Github #214 funded issue links are long and clunky #201 Environment variable based settings #144 saving search UI is broken on iphone 7 #8 Merged pull requests: explorer: updated label for issues with status done #785 ( thelostone-mc ) bounty: process + kill bounty width fix #782 ( thelostone-mc ) CSS clean up \ud83c\udf89 #775 ( sethmcleod ) disable my projects filters if user not logged in #771 ( kziemianek ) current year in copyright email section #766 ( kziemianek ) Alpha Tag #758 ( willsputra ) bounty: css letter spacing fix for h1..h6 #757 ( thelostone-mc ) Fixed Contributing Link in README.md #756 ( Sabihashaik ) bounty: css fix for wonky contributor info #741 ( thelostone-mc ) html: reordered css links #740 ( thelostone-mc ) bounty: display submit only on starting work #738 ( thelostone-mc ) #679 - new issue responsive updates #735 ( joshmobley ) fixed broken save search UI & missing save search text on mobile #731 ( willsputra ) accepted_on date in fulfillment model #729 ( owocki ) Optimize images in assets #724 ( mbeacom ) handle multiple bounties per github url #723 ( owocki ) Add image compression #712 ( cassidypignatello ) bounty: review feedback added #711 ( thelostone-mc ) workaround for web3 sync issues #709 ( owocki ) twitter.com/gitcoinfeed #708 ( owocki ) css: fixed explorer overflow on mobile #707 ( thelostone-mc ) Fixes: https://github.com/gitcoinco/web/issues/687 #699 ( kziemianek ) css: sidebar fixup #697 ( thelostone-mc ) Issue funder can remove users from issue #675 ( kziemianek ) Offchain Bounties #673 ( owocki ) doc: corrected setup path #667 ( thelostone-mc ) Records UserAction events for Tip, Start/Stop Work, and Bounty related things #664 ( owocki ) People shouldn't be able to start work on more than 3 issues at a time #663 ( owocki ) no faucet spoofing #662 ( owocki ) no faucet spoofing #661 ( owocki ) Add GeoIP2 and lang middleware #657 ( mbeacom ) Adds testimonial video to landing page #645 ( owocki ) Redesign and implementation of embed widget #644 ( michelgotta ) @gitcoinbot tune up! #641 ( zoek1 ) use AGPLv3 license #638 ( gasolin ) fontawesome: upgrade to v5 #635 ( thelostone-mc ) Refactors 3 requests down to 1 #634 ( owocki ) Integrate StandardBounties increasePayout() #626 ( msuess ) Refactors shared.js / web3 awareness code for more sanity #625 ( owocki ) explorer: updated view #621 ( thelostone-mc ) Update all alerts to include new alert style #553 ( KennethAshley ) Environment variable setting handling #359 ( mbeacom )","title":"pre-684-responsive-cleanup (2018-04-04)"},{"location":"mk_changelog/#pre_web3_awareness_reafctor-2018-03-16","text":"Full Changelog Implemented enhancements: nav: redesigned the dropdown #629 ( thelostone-mc ) explorer: updated tooltip #585 ( thelostone-mc ) Fixed bugs: AttributeError: 'NoneType' object has no attribute 'strip' #616 IndexError: list index out of range #613 profile_details.html references nonexistent profile.js resulting in Http404 #612 KeyError: 'comment' #598 fix for empty github notification #622 ( owocki ) Check dict existence in gitcoin bot payload view #599 ( mbeacom ) Closed issues: test 123 #595 Upgrade to the latest Django revision #583 Increase Code Coverage by 5% #408 Reminder to remove the legacy/* application once those bounties are done #406 Uncaught Error: Web3ProviderEngine does not support synchronous requests. #340 addd logo to metamask contract metadata repo #320 Bot / Github integration Revamp MVP #152 In tip flow, sometimes we are not able to get the email address of the user from github #75 Merged pull requests: css: dropdown fix #630 ( thelostone-mc ) Enable ESLint in pre-commit and on Travis CI #624 ( mbeacom ) Sends followup emails after 48 emails to bounty fulfiller and submitter #610 ( owocki ) tooltip: updated as per review comments #606 ( thelostone-mc ) slack notifications upon start / stop work #591 ( owocki ) destroys legacy bounty handling code (except for on legacy kill bounty page) #589 ( owocki ) nav: redesigned the dropdown #586 ( thelostone-mc ) General faucet cleanup #582 ( mbeacom ) Feature/faucet -- with kevin's changes #581 ( owocki ) removes optional add_bcc option from mailer #579 ( owocki ) explorer: added sort feature #578 ( thelostone-mc ) Cleanup syntax and linting issues for backend code #577 ( mbeacom ) css: refactored media queries #573 ( thelostone-mc ) mocks expiration date on standardbounties #566 ( owocki ) Writing coverage for marketing model, increasing coverage to 33% #524 ( leonprou ) ESLint configuration to help code with more style #468 ( michelgotta ) BOT / GITHUB INTEGRATION REVAMP MVP #236 ( romanjesus )","title":"pre_web3_awareness_reafctor (2018-03-16)"},{"location":"mk_changelog/#pre_faucet-2018-03-09","text":"Full Changelog Implemented enhancements: show tips on leaderboard / profiles #544 ( owocki ) Closed issues: IndexError: list index out of range #564 Explorer changes followup #555 Update Issue Explorer Front End #503 void #455 Show consistent top navigation across the app #415 Clear Distinction Between Web 3 States #413 Merged pull requests: sendgrid event hooks #568 ( owocki )","title":"pre_faucet (2018-03-09)"},{"location":"mk_changelog/#pre-clean-urls-2018-03-07","text":"Full Changelog Implemented enhancements: cleaner funded issue urls #452 ( owocki )","title":"pre-clean-urls (2018-03-07)"},{"location":"mk_changelog/#pre-clean-urls2-2018-03-07","text":"Full Changelog Implemented enhancements: As a user, I want the navigation bar to be consistent #548 Add form styles #514 ( KennethAshley ) Adding token conversion rate to bounties #387 ( bhenze ) Fixed bugs: Is there still a problem with 'start work' carrying over from bounty to bounty? #519 Http404 raising frequently on profile view #492 AttributeError: 'NoneType' object has no attribute 'pk' #483 Integration branch triage issues #474 void #462 Added remove filter functionality for Search Tags #562 ( eswarasai ) css : fixed display for devices below 380px #559 ( thelostone-mc ) FIX: Replace selects with select2 and update arrow #539 ( KennethAshley ) Closed issues: gitcoincobot doesnt work for ERC20 issues #536 Test #531 void #515 void #511 void #500 Consistent Form Styles Across the Gitcoin #498 As a user I'd like a cleaned up explorer page. #493 Version conflict when running tests #488 'new work' comments appear twice on github issue from gitcoincobot #480 void #479 void #476 DoesNotExist: BountyFulfillment matching query does not exist. #471 void #470 void #469 Issues in 'Work Started' should be 'Open' #466 void #464 void #460 status not populating correctly on legacy issues #453 bust the cloudfront cache when an issue updates #446 Consistent tone and voice to communicate with me #439 Create Gitcoin UI Kit #437 Align Current State of the Issue Explorer #436 Update White Paper Page Select List #434 Create Consistent Form Styles #433 dashboard_bountyfulfillment is not being updated properly #428 Clear understanding whether something is an error or informational #425 Show left rail radio filters when appropriate #411 TypeError: an integer is required (got type NoneType) #409 Fix lingering bounty_fulfiller (claimee) references #401 HTML/CSS Touch ups on Bounty Details Page #399 Make Process Bounty page more user friendly #398 Wrong issue title in gitcoin.co #366 TypeError: an integer is required (got type NoneType) #332 standardbounties cleanup: multiple fulfillments #308 standardbounties cleanup: state issues #284 Coloradocoin receive page (due Feb 1) #261 Push Open Source Forward => Grow Open Source #238 design- /pitch page - where people can pitch project ideas #198 link profile in nav somewhere #191 show conv rate rate at time of posting #165 As a user, I'd like to be able to close my browser window after I submit a web3 tx, so I can do other things without canceling. #128 GitHub oauth in new funding flow #98 Merged pull requests: review: added feedback for the explorer page #558 ( thelostone-mc ) Unify navbar template #549 ( mbeacom ) Add initial changelog #545 ( mbeacom ) WIP: Feature/faucet #541 ( KennethAshley ) Fix unselectable icons on select2 selects #532 ( KennethAshley ) Add Wyvern (WYV) token #525 ( protinam ) core: Rebirth of the explorer #523 ( thelostone-mc ) dashboard: base setup #505 ( thelostone-mc ) Update web3 and eth-utils to fix issue 488 #489 ( jasonrhaas ) html: removed left rails #486 ( thelostone-mc ) Correct typos and grammatical errors #484 ( cpbennett4 ) text: fixed typo #473 ( thelostone-mc ) alert user to local env networks #465 #472 ( ckhatri ) Fix ES Linting issues for leaderboard.js #461 ( tra38 ) Fix isort-check build failure #459 ( JakeStoeffler ) launches web3 what / why video #449 ( owocki ) easier tip redemption #396 ( owocki ) (WIP) February integration branch #379 ( owocki ) Add dummy external bounties #377 ( KennethAshley ) WIP -- COLO Coin Redemption #331 ( eswarasai ) css: prettified bounty_details page #323 ( thelostone-mc )","title":"pre-clean-urls2 (2018-03-07)"},{"location":"mk_changelog/#prefebint-2018-02-13","text":"Full Changelog Closed issues: Use BountyFulfillment for all fulfiller_ references #402 Fix dashboard/notifications.py #400 feb integration branch - remove references to Bounty.fulfiller\\_ #397 \"Are you still working on this?\" #394 (unknown): Syntax error #391 MultipleObjectsReturned: get() returned more than one Profile -- it returned 2! #386 This is a test issue for purposes of a demo during Consensys Mesh Retreat #384 Bounty creation transaction link points to rinkeby etherscan address. #370 Travis builds failing #367 AttributeError: 'NoneType' object has no attribute 'get' #361 Submitting work throws a \"Math is not a function\" #357 Profile Page needs to be sized up if it's smaller than it should be #355 Increase Code Coverage by 4% #353 RangeError: Maximum call stack size exceeded #351 RangeError: Maximum call stack size exceeded #350 html: setting max-width to 500px casues weird display #347 New funded issue form does not automatically add the URL from the querystring #346 SyntaxError: expected expression, got '*' #338 as a user, i want to be able to process two bounties in multiple tabs so i can be efficient. #334 in activity_report management command, add a from\\_address and to\\_address field #322 tip emails not going out #321 Issue summaries lose formatting like new lines #317 new bounty status #316 stanardbounties cleanup: tune rate limiter #281 standardbounties cleanup: why aren't 500 error emails to ADMINs working #279 This is a test issue for purposes of a demo during Rocky Mountain Blockchain #270 game mechanics for project wheatgrass #260 sometimes web3 buttons on the gitcoin interface take 60s to respond #226 code: signal to tell user that unclaimed issues may already be in progress #206 Code Faucet Page #184 twitter posts about new funded issues do not unfurl correctly #110 move to python3, django 2.0 #68 Bounty Life-cycle #61 Merged pull requests: Fix migration conflict #395 ( mbeacom ) rollbar: replaces ** with Math.pow #392 ( thelostone-mc ) Increase code coverage #375 ( tyleryasaka ) js: replaced ** with Math.pow() #374 ( thelostone-mc ) Default network should be mainnet #371 ( jasonrhaas ) Update Docker image to support Windows #365 ( mbeacom ) Changes Math to Math.pow for gwei->ether gas calculation #358 ( poffdeluxe ) Use ImageOps.fit instead of Image.thumbnail #356 ( poffdeluxe ) css: set max-width to 100% to fix display #348 ( thelostone-mc ) Modify static handling to use Whitenoise #345 ( mbeacom ) css: prettified /help page #337 ( thelostone-mc ) allows multiple pending transactions at once #335 ( owocki ) html: replaced slack image with font-awesome icon #333 ( thelostone-mc ) diff favicons in prod vs local #328 ( owocki ) adds user action table, stats cleanup #327 ( owocki ) Adjust email handling for tip flow #326 ( mbeacom ) javascript: convert to es6 and make sure it passes linting #325 ( ethikz ) Kevin/new statuses #319 ( owocki )","title":"prefebint (2018-02-13)"},{"location":"mk_changelog/#pre_january2018_feature_integration2-2018-01-29","text":"Full Changelog Fixed bugs: standardbounties cleanup: Github claim work comment/interest comment updating seems to fail #282 When attempting to sign up for gitcoin slack I get a CSRF Failure #276 Closed issues: Error on DB restore #309 Uncaught ReferenceError: web3 is not defined #304 ReferenceError: web3 is not defined #299 ReferenceError: Can't find variable: web3 #298 ReferenceError: Can't find variable: web3 #296 Test issue from Rollbar #283 why are all the 404s 500ing #280 The first LIVE StandardBounties Bounty on Gitcoin #278 standardbounties: where do we store info that's not in the bounty detail spec? #253 standardbounties: migration plan #252 standardbounties: figure out how to massage expressed interest PR in #249 new 404/500 error page #231 typography cleanup after PR 116 #151 Merged pull requests: Modify slack email invitation handling #314 ( mbeacom ) (WIP) January 2018 Multiple Integrations #240 ( mbeacom )","title":"pre_january2018_feature_integration2 (2018-01-29)"},{"location":"mk_changelog/#pre_january2018_feature_integration-2018-01-26","text":"Full Changelog Fixed bugs: www.gitcoin.co doesnt work #254 Closed issues: gh int: Add github logout method #266 standardbounties: support new IPFS schema #265 standardbounties: test ERC20 tokens #257 standardbounties: regression test the twitter notifications, github comments, and emails #256 standardbounties: estimateGas() #248 standardbounties: gas limit set too high #247 standardbounties: tx throws but the frontend thinks it succeeded anyway #246 standardbounties: integrate metamask gas estimates module #245 As a gitcoin founder, I want to send a demo funded issue, so I can demo the product to the mesh. #229 As a gitcoin founder, I want to send a demo funded issue, so I can demo the product to the mesh. #228 dataviz of gas costs vs confirmation time #209 design: waiting room quote while page is waiting for web3 updates #181 Code iOS landing page #174 core : contributing.md guideline + linter #65 Browser Extension Revamp #50 waiting room entertainment while tx mines #32 Mentors #30 Merged pull requests: Update notifications.py #277 ( tommycox ) Add Rollbar error handling #274 ( mbeacom ) doc: changed port to 8000 #272 ( thelostone-mc ) doc: changed port to 8000 in github integration steps #271 ( thelostone-mc ) Add initial pre-commit configuration #269 ( mbeacom ) roundup email 20170116 #243 ( owocki ) Fix the test suite isort failures #242 ( connorwarnock ) Changed bounties URL in JS to prevent 301 redirect #235 ( tossj ) backend db & API support to show how many comments exist for an issue #219 ( amites ) Gitcoin: Issue #174 #207 ( Elaniobro ) Changed links to MetaMask Chrome extension to MetaMask website #204 ( tossj ) Display random quote when a web3 transaction takes place #158 ( tra38 )","title":"pre_january2018_feature_integration (2018-01-26)"},{"location":"mk_changelog/#v01-2018-01-10","text":"Full Changelog Closed issues: test 123 #224 foo the bar #223 Error executing transaction #220 Search by nickname doesn't work #213 Design: Gitcoin Toolbox #133","title":"v0.1 (2018-01-10)"},{"location":"mk_changelog/#submit_working-2018-01-09","text":"Implemented enhancements: In the admin, create a view that shows bounties and tips over time #20 Design a more aesthetically pleasing bounty detail page #17 bounty details page should have a 'back' button on it #7 clawback expired bounty interface #5 Expose psql port in docker stack #217 ( mbeacom ) Fixed bugs: Tips: 7 second delay when clicking on 'send tip' on the mainnet. #16 Closed issues: Docker-based PostgreSQL port inaccessible locally #216 Toolbox page: launch it #196 design: signal to tell user that unclaimed issues may already be in progress #190 Disabled localStorage breaks Issue Explorer #188 code: /mission page #177 small module design: waiting room quote #175 Design: Faucet page #173 add /addon/ as firefox addon redirection #170 claim: gas limit is set over limit #169 Code HTML: Toolbox Page #168 Travis builds failing - ethereum dependency changes #163 oops #159 Csv export management command to spit out activity report #157 explore the idea of a gas faucet #153 In Issue Explorer, Double Quotes (\") are Displayed instead of Correct Single Quotes (') #150 Travis builds failing on cytoolz #142 Design: Mission, values, vision, how we interact #139 design: ios gitcoin.co landing page #137 Double @ sign in github bot comments #131 Some of the buttons are glitchy and unpolished. #126 remove uppercase text from text description #125 Pytest version conflict with ethereum package #123 Add missing migrations #121 Error in sync_profile #120 Python comment linting and semicolon/unused import removal #119 Specify validation error for email validation checks #118 AnonymousUser #117 css: resize images to fit within the timeline container #107 /slack page content view does not fill page width on mobile #105 mail: tip amount rounded off to 2 decimals showing cause incorrect amount on mail #103 Transaction Underpriced when you try to receive a tip #101 bug: roadmap items shift to adjust for content on hover #100 expire email should be targeted to personas #96 Old Etherdelta API 50x frequently #94 Testing Strategy #90 Some models don't handle plurals correctly in admin #86 Problem on claimming a issue #82 Missleading button \"Accept/reject claim\" for non founder of the issue #81 Database files not compatible with Postgres 10.x #78 Email heading messed up on mobile resolutions #77 Overhaul leaderboards page design #76 support ERC20 token conversion rates on tips/bounties funding #73 css: mailing list breathing space #66 bug: roadmap items move when hover over them #64 Code Testimonials into Landing page #63 Modify docker-compose.yml to reduce running/exited services / persistent volume #58 Add persistent volume for PostgreSQL data #57 Decrease Docker image size #56 The corners or #upper_left and .bounty don't line up #54 auto-estimate USD amount on gitcoin.co/tip #53 Design a testimonials module on the landing page #52 Wrong issue info #51 Post funded issue to Craigslist #42 Issues should be displayed in decreasing order of value #40 Submit a funded issue (or send a tip) and provide feedback on the UX. #37 docker container for running locally #33 Mock up an Organization Overview page #31 Ops: Create cloudfront invalidation programmatically upon deploy in deploy.bash. #19 Tip page link 404s #14 Demonstrate tipping via a video #12 draft a blog post about tim-berners lee #4 list of erc20 coins should be more elegant #3 Web3 bountydetails interface documentation #2 HTTP API Documentation #1 Merged pull requests: remove duplicate viewport meta #218 ( gasolin ) Update PULL_REQUEST_TEMPLATE.md #215 ( Elaniobro ) css: shrunk vertical navbar + refactoring #212 ( thelostone-mc ) Add RDN Token support #210 ( ice09 ) metamask gas price preview #205 ( owocki ) Gitcoin's Mission #203 ( eswarasai ) add \"setup database\" section to documentation #199 ( galaxy233 ) Remove all-caps default in /tip (yge) #195 ( bumi ) Add sane fallback for localStorage usage #189 ( eth-button ) html: fixed github repo link #187 ( thelostone-mc ) add activity_report management command #180 ( choochootrain ) toolbox: coded design #172 ( thelostone-mc ) carousel: fixed css #167 ( thelostone-mc ) Generate high-entropy secrets and codes #166 ( 10a7 ) Pin cytoolz to 0.9.0 to fulfill ethereum new reqs #164 ( mbeacom ) shared.js: Escape single quotes with &#39; #162 ( adtac ) TLDR section on landing page #161 ( owocki ) add http://arcade.city token base ARCD #155 ( ernaneluis ) docker: added node to configuration and css lint setup #147 ( thelostone-mc ) Resolve Travis failures on dependency conflict #143 ( mbeacom ) css: Quick style fix for buttons using the btn-info class #134 ( algae12 ) Glitches fixes and overall better buttons look and feel #127 ( algae12 ) Resolve false fail on Travis #124 ( mbeacom ) General python cleanup #122 ( mbeacom ) Remove all-caps (text-uppercase) classes #116 ( bumi ) fix roadmap items shift #100 #113 ( alx ) Remove misleading buttons on gitcoin UI #112 ( tra38 ) css: fixed overflow scroll on tip recieve page #109 ( thelostone-mc ) css: resize images to fit within the timeline container #108 ( algae12 ) fix: rounded tip amount to 3 decimal places in mail #104 ( thelostone-mc ) Add Travis and Codecov integrations #102 ( mbeacom ) small fix for forcing the images of podium be bigger on leaderboard #99 ( ernaneluis ) doc: added contributing.md #97 ( thelostone-mc ) Update get_prices to use new etherdelta WS API #95 ( mbeacom ) Simplify bounty management command #93 ( mbeacom ) fix of issue #76 Overhaul leaderboards page design #91 ( ernaneluis ) Fix display of plurals for some models in admin #88 ( mbeacom ) PostgreSQL alpine and docker compose restart policies #85 ( mbeacom ) Tips now show USD estimates #84 ( rajatkapoor ) Fix grammer in alert on tip page #83 ( edkek ) testimonial: added carousel on landing page #80 ( thelostone-mc ) css: prettify the subscribe button #74 ( thelostone-mc ) Update tip page to auto calculate USD #72 ( mbeacom ) Cleanup python imports #71 ( mbeacom ) Fix roadmap items move when hover over them. #67 ( sc0Vu ) Add psql persistence and remove redundant services #60 ( mbeacom ) Decrease Docker image size #59 ( mbeacom ) fix bounty definition height #54 #55 ( Kielek ) Correct comma typo in statement of Gitcoin aliases #49 ( iamchrissmith ) WEB3 API documentation #47 ( lawrencelink ) Minor Typo Error #45 ( k4m4 ) Craigslist #44 ( rajatkapoor ) HTTP Strict Transport Security #41 ( sergio-alonso ) Standard pseudo-random generators are not suitable for security/cryptographic purposes. #39 ( sergio-alonso ) Update link on image #15 ( bransbury ) add dropdown menu search via select2, fix #3 #13 ( gasolin ) Fix space, typo and rename #11 ( gamwe6 ) Send tips in one step via Gitcoin.co #10 ( owocki ) Fix instruction for running locally #9 ( cifvts ) Documents API Fields & Filter/Sort URL Parameters #6 ( anglinb ) * This Change Log was automatically generated by github_changelog_generator","title":"submit_working (2018-01-09)"},{"location":"mk_contributors/","text":"Contributing to Gitcoin Contributions to gitcoin could come in different forms. Some contribute code changes, others contribute docs, others help answer questions from users, help keep the infrastructure running, We welcome all contributions from folks who are willing to work in good faith with the community. No contribution is too small and all contributions are valued. Monetization Policy Code of Conduct Issues Discussions And General Help Pull Requests Step 1: Fork Step 2: Branch Step 3: Code Step 4: Commit Step 5: Rebase Step 6: PRs Python Docstrings Classes Methods Example VSCode Remote Debugger VSCode Prerequisites Add Launch Configuration VSCode Additional Resources Additional Resources FAQ Contributing Static Assets Monetization Policy This repo uses Gitcoin to incentivize contributions from contributors all around the world. We believe that properly incentivizing Open Source Software means providing funding to support contributors, but we also recognize the dangerous precedent that is set when contributors who have been contributing for intrinsic reasons begin to expect extrinsic rewards for their contributions. Gitcoin has written about this, in the abstract, here . Tangibly, our monetary policy is: Our mission is to \"Grow Open Source\". Read More about our Mission here . We believe that contributors should contribute for intrinsic reasons first (see mission statement above), and we hereby provide notice that we will not be able to fund all contributions. Appreciate it if and when a Tip comes! Scope that is explicitly funded upfront will be posted to the Github Issue by @gitcoinbot , and will also be posted to the Gitcoin Issue Explorer . Code of Conduct Contributions to Gitcoin are governed by the Contributor Covenant version 1.4 . All contributors and participants agree to abide by its terms. To report violations, shoot out an email to founders@gitcoin.co The Code of Conduct is designed and intended, above all else, to help establish a culture within the project that allows anyone and everyone who wants to contribute to feel safe doing so. Open, diverse, and inclusive communities live and die on the basis of trust. Contributors can disagree with one another so long as they are done in good faith and everyone is working towards a common goal. Issues Issues in gitcoin/web are the primary means by which bug reports and general discussions are made. A contributor is allowed to create an issue, discuss, and provide a fix if needed. Before opening an issue, check to see if there are any current issues with similar key words. This helps us cut down on duplicate tickets. When you open an issue , you'll notice four templates (bug, custom, discussion, feature) with the user-story format we like for our issue reports. When starting a new issue, please do your best to be as detailed and specific as possible. Bug report - use this to create a bug report to help us improve Gitcoin Discussion - use this template to start a discussion Feature request - use this to suggest a project idea Custom report - use this to report an issue that doesn't fall under any other category Discussions And General Help As Gitcoin is still at its early stages, drop by gitcoin.co/slack and say hi to know what's next / to get your answers cleared up. Pull Requests Pull Requests are the way in which concrete changes are made to the code and documentation. Prerequisites You must install pre-commit in order to enable our precommit hooks and pre-commit install from your gitcoinco/web root directory. In order to make use of the pre-commit hooks used for this repository, you should have a valid installation of node / npm , isort ( pip install isort ), yapf ( pip install yapf ), stylelint ( npm install -g stylelint ), and eslint ( npm install -g eslint ). User facing copy / text should be run through Django Translation Framework . For example, HTML user-facing pieces of copy are in {% blocktrans %} or {% trans %} fields. javascript user-facing pieces of copy are in gettext fields. each of the views.py user-facing pieces of copy are in gettext_lazy fields each of the models help_text s are internationalized as are all the emails in marketing/mails.py run make autotranslate or a combination of the necessary ./manage.py makemessages and ./manage.py compilemessages commands. If you are contributing user-facing assets, interface components or other relevant visuals, then please add them to our UI Inventory page. Step 1: Fork Fork the project on GitHub and clone your fork locally. git clone git@github.com:username/web.git cd web git remote add upstream https://github.com/gitcoinco/web.git git fetch upstream Step 2: Branch It's always better to create local branches to work on a specific issue. Makes life easier for you if you are the kind who enjoys multiple things parallely. These should also be created directly off of the master branch. git checkout -b my-branch -t upstream/master Step 3: Code To keep the style of the Javascript code consistent we have a basic linting configured. To check your contributed code for errors run npm run eslint . To make life easy use the automatic fixing by running npm run eslint:fix before your commit. Use the pre-configured eslint for Javascript Avoid trailing whitespace & un-necessary white lines Indentation is as follows 1 tab = 2 spaces for .html and .js files 1 tab = 4 spaces for everything else Use rem for CSS when applicable Add relevant unit tests for all new Python logic and update existing tests to accommodate new logic. You can run tests via: make pytest If you introduce new backend methods or classes, you must include docstrings that conform to PEP-257 and follow the existing patterns throughout the codebase. See app/avatar/(models|views|utils).py - If you introduce a new django module, like: avatar or marketing , you must update pydocmd.yaml to include relevant python modules from the newly introduced app. Step 4: Commit Ensure your code changes adhere to our styling and linting standards: make fix (or npm run eslint:fix; npm run stylelint:fix; isort -rc --atomic .; yapf -i -r -e \"app/**/migrations/*.py\" -e \"app/app/settings.py\" -p app/app/ app/avatar/ app/credits/ app/dataviz/ app/enssubdomain/ app/ethos/ app/github/ ) List all your changes as a list if needed else simply give a brief description on what the changes are. All lines at 100 columns. If your PR fixed an issue, Use the Fixes: prefix and the full issue URL. For other references use Refs: . Examples: Fixes: https://github.com/gitcoinco/web/issues/87 Refs: https://github.com/gitcoinco/web/issues/91 Sample commit A ```txt if you can write down the changes explaining it in a paragraph which each line wrapped within 100 lines. Fixes: https://github.com/gitcoinco/web/issues/87 Refs: https://github.com/gitcoinco/web/issues/91 ``` Sample commit B ```txt - list out your changes as points if there are many changes - if needed you can also send it across as - all wrapped within 100 lines Fixes: https://github.com/gitcoinco/web/issues/87 Refs: https://github.com/gitcoinco/web/issues/91 ``` Squashing and Merging your commits to make our history neater is always welcomed, but squashing can be handled during the merge process. Step 5: Rebase Ensure you neat description on what your PR is for, so that it's easier for folks to understand the gist of it before jumping to the the code / doc. As a best practice, once you have committed your changes, it is a good idea to use git rebase (not git merge ) to ensure your changes are placed at the top. Plus merge conflicts can be resolved git fetch upstream git rebase upstream/master Step 6: PRs Please ensure that your pull request follows all of the community guidelines to include: Title is descriptive and generally focused on what the PR addresses (If your PR is a work in progress, include WIP in the title. Once the PR is ready for review, please remove WIP ) Description explains what the PR achieves or addresses If the PR modifies the frontend in any way, please attach screenshots and/or GIFs of all purposeful changes (before and after screens are recommended) The PR passes all CI checks, to include: Stickler, and Travis CI. If tests are failing or coverage is decreased while adding logic to any backend code, you will be asked to include relevant tests and your PR will not be merged until all checks pass. Python Docstrings Gitcoin attempts to adhere to PEP-257 while employing the Google Python Style Guide approach to docstring formatting. Classes class Gitcoin: \"\"\"Define the overall Gitcoin object. Attributes: repo (str): The Gitcoin repository. \"\"\" repo = 'gitcoinco/web' Methods def foo(bar='bar'): \"\"\"Handle string concatenation of the provided suffix. Args: bar (str): The foo suffix. Defaults to: bar. Attributes: foobar (str): The foo string concatenated with the provided bar variable. Returns: str: The concatenated string. \"\"\" foobar = f'foo{bar}' return foobar Example from __future__ import braces class Example: \"\"\"Define the overall Example object.\"\"\" # Class attributes. repo = 'gitcoinco/web' known_dances = ['tango'] def example(self): \"\"\"Some Example.example class method docstring. Returns: bool: Whether or not the Example performs the specified dance. \"\"\" return 'example' def example2(self): \"\"\"Some Example.example2 class method docstring. Attributes: var (str): The example2 variable. \"\"\" var = 'example2' def can_dance(example, dance='tango'): \"\"\"Handle determining whether or not Example can perform the provided dance. Args: dingo (dashboard.Example): The Example object. dance (str): The dance type. Defaults to: tango. Returns: bool: Whether or not the Example performs the specified dance. \"\"\" return dance in example.known_dances def example3(self): \"\"\"Some example3 method docstring. Attributes: var (str): The example3 variable. Returns: str: The example var text. \"\"\" var = 'example3' return var VSCode Remote Debugger One benefit of using VSCode is the built-in debugger and you can use the vscode debugger with Gitcoin! You must complete all prerequisite steps, add the launch.json configuration snippet, and ensure the Gitcoin web docker container is running. If this is your first time using the debugger, it's advised that you stop your existing docker-compose services: docker-compose down , add the necessary environment variable to .env , and rebuild the web image via: docker-compose build web or docker-compose up -d --build to additionally start the services following the build. Once you have completed all of the below outlined steps, you should be able to start debugging! VSCode Prerequisites VSCode Python support extension is installed. Gitcoin Docker Setup has been completed. Add VSCODE_DEBUGGER_ENABLED=on to your .env file. (This envvar must be added before downing/starting the compose services in order for the necessary ptvsd req to be installed) Please note: Completely restart the docker-compose services ( docker-compose down; docker-compose up -d ) following successful completion of all steps. Add Launch Configuration In order to use the vscode remote debugger for the Gitcoin Django app, you must add the below snippet to your Python debugger launch.json configuration. You can do this by: Switch to the Debugging tab ( \u21e7\u2318D ) Select Add Configuration... from the dropdown menu Add the following json snippet to the configurations array and save the file: { \"name\": \"Gitcoin Remote Debugger\", \"type\": \"python\", \"request\": \"attach\", \"localRoot\": \"${workspaceRoot}\", \"remoteRoot\": \"/code\", \"port\": 3030, \"host\": \"localhost\" } Additional VSCode Resources VSCode Debugging Overview VSCode Debugging Intro Video Additional Resources We either strongly employ or encourage the review and implementation of the following resources: Python Style Guide: PEP-8 The Zen of Python: PEP-20 Docstrings: PEP-257 Docutils: PEP-258 f-strings: PEP-498 Google Python Style Guide Hitchhiker's Guide to Python Django Documentation FAQ Contributing Static Assets Note: Please remember to optimize/compress your image assets via: make compress-images (Requires: jpeq-recompress, optipng, and svgo in PATH ) You can install the necessary binaries via: npm install -g jpeg-recompress-bin pngquant-bin svgo brew install optipng Q: I need to add static assets... Where to I put them? All assets that will be used as static resources must be placed into their appropriate place in the app/assets directory. Q: I've added the new assets to the appropriate directory, but can't seem to use them. How do I make Django recognize my newly added assets? Run: make collect-static if using Docker or cd app; python3 manage.py collectstatic -i other for virtualenv/local setup. Additionally, you can check out the Django Managing Static Files Documentation Welcome to the gitcoin community. Lets Grow Open Source Software.","title":"Contributor's Guide"},{"location":"mk_contributors/#contributing-to-gitcoin","text":"Contributions to gitcoin could come in different forms. Some contribute code changes, others contribute docs, others help answer questions from users, help keep the infrastructure running, We welcome all contributions from folks who are willing to work in good faith with the community. No contribution is too small and all contributions are valued. Monetization Policy Code of Conduct Issues Discussions And General Help Pull Requests Step 1: Fork Step 2: Branch Step 3: Code Step 4: Commit Step 5: Rebase Step 6: PRs Python Docstrings Classes Methods Example VSCode Remote Debugger VSCode Prerequisites Add Launch Configuration VSCode Additional Resources Additional Resources FAQ Contributing Static Assets","title":"Contributing to Gitcoin"},{"location":"mk_contributors/#monetization-policy","text":"This repo uses Gitcoin to incentivize contributions from contributors all around the world. We believe that properly incentivizing Open Source Software means providing funding to support contributors, but we also recognize the dangerous precedent that is set when contributors who have been contributing for intrinsic reasons begin to expect extrinsic rewards for their contributions. Gitcoin has written about this, in the abstract, here . Tangibly, our monetary policy is: Our mission is to \"Grow Open Source\". Read More about our Mission here . We believe that contributors should contribute for intrinsic reasons first (see mission statement above), and we hereby provide notice that we will not be able to fund all contributions. Appreciate it if and when a Tip comes! Scope that is explicitly funded upfront will be posted to the Github Issue by @gitcoinbot , and will also be posted to the Gitcoin Issue Explorer .","title":"Monetization Policy"},{"location":"mk_contributors/#code-of-conduct","text":"Contributions to Gitcoin are governed by the Contributor Covenant version 1.4 . All contributors and participants agree to abide by its terms. To report violations, shoot out an email to founders@gitcoin.co The Code of Conduct is designed and intended, above all else, to help establish a culture within the project that allows anyone and everyone who wants to contribute to feel safe doing so. Open, diverse, and inclusive communities live and die on the basis of trust. Contributors can disagree with one another so long as they are done in good faith and everyone is working towards a common goal.","title":"Code of Conduct"},{"location":"mk_contributors/#issues","text":"Issues in gitcoin/web are the primary means by which bug reports and general discussions are made. A contributor is allowed to create an issue, discuss, and provide a fix if needed. Before opening an issue, check to see if there are any current issues with similar key words. This helps us cut down on duplicate tickets. When you open an issue , you'll notice four templates (bug, custom, discussion, feature) with the user-story format we like for our issue reports. When starting a new issue, please do your best to be as detailed and specific as possible. Bug report - use this to create a bug report to help us improve Gitcoin Discussion - use this template to start a discussion Feature request - use this to suggest a project idea Custom report - use this to report an issue that doesn't fall under any other category","title":"Issues"},{"location":"mk_contributors/#discussions-and-general-help","text":"As Gitcoin is still at its early stages, drop by gitcoin.co/slack and say hi to know what's next / to get your answers cleared up.","title":"Discussions And General Help"},{"location":"mk_contributors/#pull-requests","text":"Pull Requests are the way in which concrete changes are made to the code and documentation.","title":"Pull Requests"},{"location":"mk_contributors/#prerequisites","text":"You must install pre-commit in order to enable our precommit hooks and pre-commit install from your gitcoinco/web root directory. In order to make use of the pre-commit hooks used for this repository, you should have a valid installation of node / npm , isort ( pip install isort ), yapf ( pip install yapf ), stylelint ( npm install -g stylelint ), and eslint ( npm install -g eslint ). User facing copy / text should be run through Django Translation Framework . For example, HTML user-facing pieces of copy are in {% blocktrans %} or {% trans %} fields. javascript user-facing pieces of copy are in gettext fields. each of the views.py user-facing pieces of copy are in gettext_lazy fields each of the models help_text s are internationalized as are all the emails in marketing/mails.py run make autotranslate or a combination of the necessary ./manage.py makemessages and ./manage.py compilemessages commands. If you are contributing user-facing assets, interface components or other relevant visuals, then please add them to our UI Inventory page.","title":"Prerequisites"},{"location":"mk_contributors/#step-1-fork","text":"Fork the project on GitHub and clone your fork locally. git clone git@github.com:username/web.git cd web git remote add upstream https://github.com/gitcoinco/web.git git fetch upstream","title":"Step 1: Fork"},{"location":"mk_contributors/#step-2-branch","text":"It's always better to create local branches to work on a specific issue. Makes life easier for you if you are the kind who enjoys multiple things parallely. These should also be created directly off of the master branch. git checkout -b my-branch -t upstream/master","title":"Step 2: Branch"},{"location":"mk_contributors/#step-3-code","text":"To keep the style of the Javascript code consistent we have a basic linting configured. To check your contributed code for errors run npm run eslint . To make life easy use the automatic fixing by running npm run eslint:fix before your commit. Use the pre-configured eslint for Javascript Avoid trailing whitespace & un-necessary white lines Indentation is as follows 1 tab = 2 spaces for .html and .js files 1 tab = 4 spaces for everything else Use rem for CSS when applicable Add relevant unit tests for all new Python logic and update existing tests to accommodate new logic. You can run tests via: make pytest If you introduce new backend methods or classes, you must include docstrings that conform to PEP-257 and follow the existing patterns throughout the codebase. See app/avatar/(models|views|utils).py - If you introduce a new django module, like: avatar or marketing , you must update pydocmd.yaml to include relevant python modules from the newly introduced app.","title":"Step 3: Code"},{"location":"mk_contributors/#step-4-commit","text":"Ensure your code changes adhere to our styling and linting standards: make fix (or npm run eslint:fix; npm run stylelint:fix; isort -rc --atomic .; yapf -i -r -e \"app/**/migrations/*.py\" -e \"app/app/settings.py\" -p app/app/ app/avatar/ app/credits/ app/dataviz/ app/enssubdomain/ app/ethos/ app/github/ ) List all your changes as a list if needed else simply give a brief description on what the changes are. All lines at 100 columns. If your PR fixed an issue, Use the Fixes: prefix and the full issue URL. For other references use Refs: . Examples: Fixes: https://github.com/gitcoinco/web/issues/87 Refs: https://github.com/gitcoinco/web/issues/91 Sample commit A ```txt if you can write down the changes explaining it in a paragraph which each line wrapped within 100 lines. Fixes: https://github.com/gitcoinco/web/issues/87 Refs: https://github.com/gitcoinco/web/issues/91 ``` Sample commit B ```txt - list out your changes as points if there are many changes - if needed you can also send it across as - all wrapped within 100 lines Fixes: https://github.com/gitcoinco/web/issues/87 Refs: https://github.com/gitcoinco/web/issues/91 ``` Squashing and Merging your commits to make our history neater is always welcomed, but squashing can be handled during the merge process.","title":"Step 4: Commit"},{"location":"mk_contributors/#step-5-rebase","text":"Ensure you neat description on what your PR is for, so that it's easier for folks to understand the gist of it before jumping to the the code / doc. As a best practice, once you have committed your changes, it is a good idea to use git rebase (not git merge ) to ensure your changes are placed at the top. Plus merge conflicts can be resolved git fetch upstream git rebase upstream/master","title":"Step 5: Rebase"},{"location":"mk_contributors/#step-6-prs","text":"Please ensure that your pull request follows all of the community guidelines to include: Title is descriptive and generally focused on what the PR addresses (If your PR is a work in progress, include WIP in the title. Once the PR is ready for review, please remove WIP ) Description explains what the PR achieves or addresses If the PR modifies the frontend in any way, please attach screenshots and/or GIFs of all purposeful changes (before and after screens are recommended) The PR passes all CI checks, to include: Stickler, and Travis CI. If tests are failing or coverage is decreased while adding logic to any backend code, you will be asked to include relevant tests and your PR will not be merged until all checks pass.","title":"Step 6: PRs"},{"location":"mk_contributors/#python","text":"","title":"Python"},{"location":"mk_contributors/#docstrings","text":"Gitcoin attempts to adhere to PEP-257 while employing the Google Python Style Guide approach to docstring formatting.","title":"Docstrings"},{"location":"mk_contributors/#classes","text":"class Gitcoin: \"\"\"Define the overall Gitcoin object. Attributes: repo (str): The Gitcoin repository. \"\"\" repo = 'gitcoinco/web'","title":"Classes"},{"location":"mk_contributors/#methods","text":"def foo(bar='bar'): \"\"\"Handle string concatenation of the provided suffix. Args: bar (str): The foo suffix. Defaults to: bar. Attributes: foobar (str): The foo string concatenated with the provided bar variable. Returns: str: The concatenated string. \"\"\" foobar = f'foo{bar}' return foobar","title":"Methods"},{"location":"mk_contributors/#example","text":"from __future__ import braces class Example: \"\"\"Define the overall Example object.\"\"\" # Class attributes. repo = 'gitcoinco/web' known_dances = ['tango'] def example(self): \"\"\"Some Example.example class method docstring. Returns: bool: Whether or not the Example performs the specified dance. \"\"\" return 'example' def example2(self): \"\"\"Some Example.example2 class method docstring. Attributes: var (str): The example2 variable. \"\"\" var = 'example2' def can_dance(example, dance='tango'): \"\"\"Handle determining whether or not Example can perform the provided dance. Args: dingo (dashboard.Example): The Example object. dance (str): The dance type. Defaults to: tango. Returns: bool: Whether or not the Example performs the specified dance. \"\"\" return dance in example.known_dances def example3(self): \"\"\"Some example3 method docstring. Attributes: var (str): The example3 variable. Returns: str: The example var text. \"\"\" var = 'example3' return var","title":"Example"},{"location":"mk_contributors/#vscode-remote-debugger","text":"One benefit of using VSCode is the built-in debugger and you can use the vscode debugger with Gitcoin! You must complete all prerequisite steps, add the launch.json configuration snippet, and ensure the Gitcoin web docker container is running. If this is your first time using the debugger, it's advised that you stop your existing docker-compose services: docker-compose down , add the necessary environment variable to .env , and rebuild the web image via: docker-compose build web or docker-compose up -d --build to additionally start the services following the build. Once you have completed all of the below outlined steps, you should be able to start debugging!","title":"VSCode Remote Debugger"},{"location":"mk_contributors/#vscode-prerequisites","text":"VSCode Python support extension is installed. Gitcoin Docker Setup has been completed. Add VSCODE_DEBUGGER_ENABLED=on to your .env file. (This envvar must be added before downing/starting the compose services in order for the necessary ptvsd req to be installed) Please note: Completely restart the docker-compose services ( docker-compose down; docker-compose up -d ) following successful completion of all steps.","title":"VSCode Prerequisites"},{"location":"mk_contributors/#add-launch-configuration","text":"In order to use the vscode remote debugger for the Gitcoin Django app, you must add the below snippet to your Python debugger launch.json configuration. You can do this by: Switch to the Debugging tab ( \u21e7\u2318D ) Select Add Configuration... from the dropdown menu Add the following json snippet to the configurations array and save the file: { \"name\": \"Gitcoin Remote Debugger\", \"type\": \"python\", \"request\": \"attach\", \"localRoot\": \"${workspaceRoot}\", \"remoteRoot\": \"/code\", \"port\": 3030, \"host\": \"localhost\" }","title":"Add Launch Configuration"},{"location":"mk_contributors/#additional-vscode-resources","text":"VSCode Debugging Overview VSCode Debugging Intro Video","title":"Additional VSCode Resources"},{"location":"mk_contributors/#additional-resources","text":"We either strongly employ or encourage the review and implementation of the following resources: Python Style Guide: PEP-8 The Zen of Python: PEP-20 Docstrings: PEP-257 Docutils: PEP-258 f-strings: PEP-498 Google Python Style Guide Hitchhiker's Guide to Python Django Documentation","title":"Additional Resources"},{"location":"mk_contributors/#faq","text":"","title":"FAQ"},{"location":"mk_contributors/#contributing-static-assets","text":"Note: Please remember to optimize/compress your image assets via: make compress-images (Requires: jpeq-recompress, optipng, and svgo in PATH ) You can install the necessary binaries via: npm install -g jpeg-recompress-bin pngquant-bin svgo brew install optipng Q: I need to add static assets... Where to I put them? All assets that will be used as static resources must be placed into their appropriate place in the app/assets directory. Q: I've added the new assets to the appropriate directory, but can't seem to use them. How do I make Django recognize my newly added assets? Run: make collect-static if using Docker or cd app; python3 manage.py collectstatic -i other for virtualenv/local setup. Additionally, you can check out the Django Managing Static Files Documentation Welcome to the gitcoin community. Lets Grow Open Source Software.","title":"Contributing Static Assets"},{"location":"mk_envvars/","text":"Recognized Environment Variables The following environment variables are currently accepted by the local web application. You can overwrite the default values for these environment variables by adding them to the web/app/app/.env file. All of the environment variables used by this application conform to the django-environ documentation . Initial Overrides Variable Description Type Default CACHE_URL The django-environ compatible uri to your cache. str dbcache://my_cache_table DATABASE_URL The django-environ compatible uri to your database. str psql://postgres:postgres@db:5432/postgres DEBUG Whether or not to run the environment in Debug mode. bool True SECRET_KEY The secret key to use for your Django environment. str TODO Project / Entry Specific Variable Description Type Default FORCE_PROVISION Whether or not to force provisioning even if the container has been previously provisioned bool False FORCE_GET_PRICES Whether or not to force pulling fresh conversion rate data from etherdelta and poloniex bool False DISABLE_INITIAL_CACHETABLE Whether or not to disable the initial createcachetable bool False DISABLE_INITIAL_COLLECTSTATIC Whether or not to disable the initial collectstatic bool False DISABLE_INITIAL_MIGRATE Whether or not to disable the initial data migration bool False DISABLE_INITIAL_LOADDATA Whether or not to disable the initial loaddata fixture import bool False Amazon Web Services Variable Description Type Default AWS_ACCESS_KEY_ID Your AWS access key ID. str '' AWS_SECRET_ACCESS_KEY Your AWS secret access key str '' S3_REPORT_BUCKET The S3 bucket to be used to store reports. str TODO S3_REPORT_PREFIX The S3 path prefix to be used when storing reports. str TODO Colorado Coin Variable Description Type Default COLO_ACCOUNT_ADDRESS The coin distribution address. str '' COLO_ACCOUNT_PRIVATE_KEY The coin distribution private key. str '' Django Variable Description Type Default INSTALLED_APPS A list of additional apps to be recognized by Django. list [] Fortmatic Variable Description Type Default FORTMATIC_LIVE_KEY The Formatic live (production) API key str '' FORTMATIC_TEST_KEY The Formatic test API key str '' Github Authentication Variable Description Type Default GITHUB_API_BASE_URL The Github API URL. str https://api.github.com GITHUB_AUTH_BASE_URL The Github OAuth authorization URL. str https://github.com/login/oauth/authorize GITHUB_TOKEN_URL The Github OAuth access token URL. str https://github.com/login/oauth/access_token GITHUB_SCOPE The Github application scope. str read:user,user:email,read:org GITHUB_CLIENT_ID The client ID of the Github OAuth app. str TODO GITHUB_CLIENT_SECRET The client secret of the Github OAuth app. str TODO GITHUB_API_USER The username of the Github account. str TODO GITHUB_API_TOKEN The token of the Github account. str TODO GITHUB_APP_NAME The name of your Github OAuth application. str gitcoin-local Gitcoin Bot For further information, please check out the Gitcoin Bot Documentation . Variable Description Type Default GITCOINBOT_APP_ID The Gitcoin Bot App ID provided by Github. str '' GITCOIN_BOT_CERT_PATH The relative path to the Gitcoin Bot pem certificate. str '' GITHUB_EVENT_HOOK_URL The Github event hook payload URL for Gitcoin Bot. str github/payload/ IGNORE_COMMENTS_FROM A list of Github handles to ignore comments from. list ['gitcoinbot', ] Sentry Variable Description Type Default SENTRY_DSN The Sentry DSN. str '' SENTRY_JS_DSN The DSN for Javascript Sentry reporting (defaults to SENTRY_DSN). str '' SendGrid Variable Description Type Default SENDGRID_EVENT_HOOK_URL The SendGrid event hook URL. str sg_event_process SENDGRID_API_KEY The SendGrid API Key, required for sending emails. str None Slack Variable Description Type Default SLACK_TOKEN The API token to be used for interacting with Slack. str TODO Silk The below environment variables are useful for overwriting Django Silk settings. Variable Description Type Default ENABLE_SILK Whether or not to enable the Django Silk profiling and inspection tool. bool False SILKY_PYTHON_PROFILER Whether or not to enable the function profiler . bool True SILKY_PYTHON_PROFILER_BINARY Whether or not to enable the generation of .prof files. bool False SILKY_AUTHENTICATION Whether or not to require user authentication to access Silk. bool False SILKY_AUTHORISATION Whether or not to require is_staff to access Silk. bool False SILKY_META Whether or not to enable meta profiling . bool True SILKY_INTERCEPT_PERCENT Limit the number of request/responses stored by Silk. int 100 SILKY_MAX_RECORDED_REQUESTS Limit the number of request/response rows stored by Silk. int 10000 SILKY_MAX_RECORDED_REQUESTS_CHECK_PERCENT The percent of recorded data to perform gargbase collection on. int 10 SILKY_DYNAMIC_PROFILING dict {} Web3 Variable Description Type Default WEB3_HTTP_PROVIDER The Web3 HTTP provider URI to be used. str https://rinkeby.infura.io INFURA_USE_V3 Use new API bool False INFURA_V3_PROJECT_ID Infura Project ID str 1e0a90928efe4bb78bb1eeceb8aacc27 VSCode Remote Debugging If you opt to modify the port or listener interface, you must update your launch.json configuration accordingly. Variable Description Type Default VSCODE_DEBUGGER_ENABLED Whether or not to enable the ptvsd remote debugging service. bool False VSCODE_DEBUGGER_PORT The ptvsd port to be used for debugging. str 3030 VSCODE_DEBUGGER_INTERFACE The ptvsd network interface to be used for debugging. str 0.0.0.0 Miscellaneous Variable Description Type Default FAUCET_AMOUNT The amount of ETH to be distributed for approved faucet requests. float .0005 GITTER_TOKEN The Gitter chat API token. str False Kudos Variable Description Type Default KUDOS_NETWORK The kudos network you will use rinkeby for local str mainnet KUDOS_OWNER_ACCOUNT Wallet address to own the kudos. str 0xD386793F1DB5F21609571C0164841E5eA2D33aD8 KUDOS_LOCAL_SYNC Turns The kudos listener on/off on or off None","title":"Environment Variables"},{"location":"mk_envvars/#recognized-environment-variables","text":"The following environment variables are currently accepted by the local web application. You can overwrite the default values for these environment variables by adding them to the web/app/app/.env file. All of the environment variables used by this application conform to the django-environ documentation .","title":"Recognized Environment Variables"},{"location":"mk_envvars/#initial-overrides","text":"Variable Description Type Default CACHE_URL The django-environ compatible uri to your cache. str dbcache://my_cache_table DATABASE_URL The django-environ compatible uri to your database. str psql://postgres:postgres@db:5432/postgres DEBUG Whether or not to run the environment in Debug mode. bool True SECRET_KEY The secret key to use for your Django environment. str TODO","title":"Initial Overrides"},{"location":"mk_envvars/#project-entry-specific","text":"Variable Description Type Default FORCE_PROVISION Whether or not to force provisioning even if the container has been previously provisioned bool False FORCE_GET_PRICES Whether or not to force pulling fresh conversion rate data from etherdelta and poloniex bool False DISABLE_INITIAL_CACHETABLE Whether or not to disable the initial createcachetable bool False DISABLE_INITIAL_COLLECTSTATIC Whether or not to disable the initial collectstatic bool False DISABLE_INITIAL_MIGRATE Whether or not to disable the initial data migration bool False DISABLE_INITIAL_LOADDATA Whether or not to disable the initial loaddata fixture import bool False","title":"Project / Entry Specific"},{"location":"mk_envvars/#amazon-web-services","text":"Variable Description Type Default AWS_ACCESS_KEY_ID Your AWS access key ID. str '' AWS_SECRET_ACCESS_KEY Your AWS secret access key str '' S3_REPORT_BUCKET The S3 bucket to be used to store reports. str TODO S3_REPORT_PREFIX The S3 path prefix to be used when storing reports. str TODO","title":"Amazon Web Services"},{"location":"mk_envvars/#colorado-coin","text":"Variable Description Type Default COLO_ACCOUNT_ADDRESS The coin distribution address. str '' COLO_ACCOUNT_PRIVATE_KEY The coin distribution private key. str ''","title":"Colorado Coin"},{"location":"mk_envvars/#django","text":"Variable Description Type Default INSTALLED_APPS A list of additional apps to be recognized by Django. list []","title":"Django"},{"location":"mk_envvars/#fortmatic","text":"Variable Description Type Default FORTMATIC_LIVE_KEY The Formatic live (production) API key str '' FORTMATIC_TEST_KEY The Formatic test API key str ''","title":"Fortmatic"},{"location":"mk_envvars/#github-authentication","text":"Variable Description Type Default GITHUB_API_BASE_URL The Github API URL. str https://api.github.com GITHUB_AUTH_BASE_URL The Github OAuth authorization URL. str https://github.com/login/oauth/authorize GITHUB_TOKEN_URL The Github OAuth access token URL. str https://github.com/login/oauth/access_token GITHUB_SCOPE The Github application scope. str read:user,user:email,read:org GITHUB_CLIENT_ID The client ID of the Github OAuth app. str TODO GITHUB_CLIENT_SECRET The client secret of the Github OAuth app. str TODO GITHUB_API_USER The username of the Github account. str TODO GITHUB_API_TOKEN The token of the Github account. str TODO GITHUB_APP_NAME The name of your Github OAuth application. str gitcoin-local","title":"Github Authentication"},{"location":"mk_envvars/#gitcoin-bot","text":"For further information, please check out the Gitcoin Bot Documentation . Variable Description Type Default GITCOINBOT_APP_ID The Gitcoin Bot App ID provided by Github. str '' GITCOIN_BOT_CERT_PATH The relative path to the Gitcoin Bot pem certificate. str '' GITHUB_EVENT_HOOK_URL The Github event hook payload URL for Gitcoin Bot. str github/payload/ IGNORE_COMMENTS_FROM A list of Github handles to ignore comments from. list ['gitcoinbot', ]","title":"Gitcoin Bot"},{"location":"mk_envvars/#sentry","text":"Variable Description Type Default SENTRY_DSN The Sentry DSN. str '' SENTRY_JS_DSN The DSN for Javascript Sentry reporting (defaults to SENTRY_DSN). str ''","title":"Sentry"},{"location":"mk_envvars/#sendgrid","text":"Variable Description Type Default SENDGRID_EVENT_HOOK_URL The SendGrid event hook URL. str sg_event_process SENDGRID_API_KEY The SendGrid API Key, required for sending emails. str None","title":"SendGrid"},{"location":"mk_envvars/#slack","text":"Variable Description Type Default SLACK_TOKEN The API token to be used for interacting with Slack. str TODO","title":"Slack"},{"location":"mk_envvars/#silk","text":"The below environment variables are useful for overwriting Django Silk settings. Variable Description Type Default ENABLE_SILK Whether or not to enable the Django Silk profiling and inspection tool. bool False SILKY_PYTHON_PROFILER Whether or not to enable the function profiler . bool True SILKY_PYTHON_PROFILER_BINARY Whether or not to enable the generation of .prof files. bool False SILKY_AUTHENTICATION Whether or not to require user authentication to access Silk. bool False SILKY_AUTHORISATION Whether or not to require is_staff to access Silk. bool False SILKY_META Whether or not to enable meta profiling . bool True SILKY_INTERCEPT_PERCENT Limit the number of request/responses stored by Silk. int 100 SILKY_MAX_RECORDED_REQUESTS Limit the number of request/response rows stored by Silk. int 10000 SILKY_MAX_RECORDED_REQUESTS_CHECK_PERCENT The percent of recorded data to perform gargbase collection on. int 10 SILKY_DYNAMIC_PROFILING dict {}","title":"Silk"},{"location":"mk_envvars/#web3","text":"Variable Description Type Default WEB3_HTTP_PROVIDER The Web3 HTTP provider URI to be used. str https://rinkeby.infura.io INFURA_USE_V3 Use new API bool False INFURA_V3_PROJECT_ID Infura Project ID str 1e0a90928efe4bb78bb1eeceb8aacc27","title":"Web3"},{"location":"mk_envvars/#vscode-remote-debugging","text":"If you opt to modify the port or listener interface, you must update your launch.json configuration accordingly. Variable Description Type Default VSCODE_DEBUGGER_ENABLED Whether or not to enable the ptvsd remote debugging service. bool False VSCODE_DEBUGGER_PORT The ptvsd port to be used for debugging. str 3030 VSCODE_DEBUGGER_INTERFACE The ptvsd network interface to be used for debugging. str 0.0.0.0","title":"VSCode Remote Debugging"},{"location":"mk_envvars/#miscellaneous","text":"Variable Description Type Default FAUCET_AMOUNT The amount of ETH to be distributed for approved faucet requests. float .0005 GITTER_TOKEN The Gitter chat API token. str False","title":"Miscellaneous"},{"location":"mk_envvars/#kudos","text":"Variable Description Type Default KUDOS_NETWORK The kudos network you will use rinkeby for local str mainnet KUDOS_OWNER_ACCOUNT Wallet address to own the kudos. str 0xD386793F1DB5F21609571C0164841E5eA2D33aD8 KUDOS_LOCAL_SYNC Turns The kudos listener on/off on or off None","title":"Kudos"},{"location":"mk_gitcoinbot/","text":"Gitcoinbot is a Github App for Gitcoin.co Usage instructions Gitcoinbot is a bot that allows you to interact with gitcoin via the github comments, like follows: Help Command Gitcoinbot Bounty Installation Instructions To get it running on your repo, you can install it here or click the install button blow Post Installation. Congratulations on installing @gitcoinbot. This bot facilitates gitcoin bounties via github commands. You can go here . Click configure, then you may select which repository you want the Gitcoinbot to be working. Here are the commands it understands: bounty <amount> <currency> -- receive link to gitcoin.co form to create bounty. submit work -- receive link to gitcoin.co to submit work on a bounty. start work -- receive link to gitcoin.co to start work on a bounty. tip <user> <amount> <currency> -- receive link to complete tippping another github user . help -- displays a help menu Go ahead and open up a test issue and give it a try!","title":"GitcoinBot"},{"location":"mk_gitcoinbot/#gitcoinbot-is-a-github-app-for-gitcoinco","text":"","title":"Gitcoinbot is a Github App for Gitcoin.co"},{"location":"mk_gitcoinbot/#usage-instructions","text":"Gitcoinbot is a bot that allows you to interact with gitcoin via the github comments, like follows:","title":"Usage instructions"},{"location":"mk_gitcoinbot/#help-command","text":"","title":"Help Command"},{"location":"mk_gitcoinbot/#gitcoinbot-bounty","text":"","title":"Gitcoinbot Bounty "},{"location":"mk_gitcoinbot/#installation-instructions","text":"To get it running on your repo, you can install it here or click the install button blow","title":"Installation Instructions"},{"location":"mk_gitcoinbot/#post-installation","text":"Congratulations on installing @gitcoinbot. This bot facilitates gitcoin bounties via github commands. You can go here . Click configure, then you may select which repository you want the Gitcoinbot to be working. Here are the commands it understands: bounty <amount> <currency> -- receive link to gitcoin.co form to create bounty. submit work -- receive link to gitcoin.co to submit work on a bounty. start work -- receive link to gitcoin.co to start work on a bounty. tip <user> <amount> <currency> -- receive link to complete tippping another github user . help -- displays a help menu Go ahead and open up a test issue and give it a try!","title":"Post Installation."},{"location":"mk_rest_api/","text":"HTTPS API Gitcoin provides a simple HTTPS API to access data without having to run your own Ethereum node. The API is live at https://gitcoin.co/api/v0.1 Datatypes Beyond simple datatypes like string or integer the API returns datatypes like dates that are serialized in a very specific fashion. Datatype Description Example date_time Date and time represented in ISO 8601 2017-09-24T18:59:53.964344Z ethereum_address An ethereum token address with the leading 0x 0x636f3093258412b96c43bef3663f1b853253ec59 token_type The type of token offered as a reward. Ex: ETH or GIT ETH bounties The bounties endpoint provides a listing of bounties and their current status. There is one endpoint that access bounties: https://gitcoin.co/api/v0.1/bounties/ - Returns a list of bounties Fields Field Key Datatype Description url string URL for this specific bounty Ex: api/v0.1/bounties/9/ created_on date_time Creation timestamp modified_on date_time Last modified timestamp title string Title of the bounty web3_created date_time Creation timestamp for the transaction that holds this bounty value_in_token integer Amount of tokens rewarded for bounty token_name token_type Type of token. Ex: ETH , GIT token_address ethereum_address Address where the tokens are located bounty_type string Type of bounty. Ex: Bug , Feature , Security project_length string Relative length of project Ex: Hours , Days , Weeks , Months experience_level string Recommended experience level github_url string URL on GitHub where you can find the bounty description github_org_name string github org name github_repo_name string github repo name github_issue_number string github issue number keywords string comma delimited list of keywords current_bounty boolean Whether this bounty is the most current revision one or not expires_date date_time Date before which the bounty must be compelted value_in_eth integer Value of the bounty in Ethereum value_in_usdt float Approximation of value in USD at bounty web3_created timestamp value_in_usdt_now float Approximation of current value in USD now date_time Current date_time on the server action_urls dict a list of urls where user can take action against the bounty paid array List of users who have been paid from the bounty Current Status Field Key Datatype Description is_open boolean True if the bounty has not been completed status string Current status enum: ( open , The bounty was created), ( started , The bounty was started) ( submitted , Someone submitted work for the bounty) ( done , Someone fulfilled and completed the bounty) ( expired , The bounty expired w/o completion) Bounty Creator & Bounty Fulfiller Field Key Datatype Description bounty_owner_address ethereum_address Address of the person who owns the bounty bounty_owner_email string Email of the bounty owner bounty_owner_github_username string Username of the bounty owner metadata dictionary Misc metadata about the bounty and the creator fulfiller_address ethereum_address Address of the person who fulfilled the bounty fulfiller_email string Email of the person fulfilling the bounty fulfiller_github_username string Username of the fulfiller fulfiller_metadata dictionary githubUsername and notificationEmail for the fulfiller URL Parameters Filters You can filter the data returned from the API by providing these keys as URL parameters experience_level , project_length , bounty_type , bounty_owner_address , is_open , github_url and pk . github_url can take a comma-separated list of GitHub urls. pk takes an ID and returns a single bounty. Order By By passing an order_by parameter you can order the data by the provided key. Ex: ?order_by=expires_date . To sort in the opposite direction you can add a - in from the the key ?order_by=-expires_date . Example Request ~ % curl \"https://gitcoin.co/api/v0.1/bounties/?&order_by=web3_created\" [ { \"url\": \"https:\\/\\/gitcoin.co\\/api\\/v0.1\\/bounties\\/87\\/\", \"created_on\": \"2017-09-22T01:42:07.060841Z\", \"modified_on\": \"2017-09-23T12:36:11.946334Z\", \"title\": \"Update local_settings.py.example\", \"web3_created\": \"2017-09-22T01:42:04Z\", \"value_in_token\": \"1000000000000000000.00\", \"token_name\": \"ETH\", \"token_address\": \"0x0000000000000000000000000000000000000000\", \"bounty_type\": \"\", \"project_length\": \"\", \"experience_level\": \"\", \"github_url\": \"https:\\/\\/github.com\\/owocki\\/pytrader\\/pull\\/83232\", \"bounty_owner_address\": \"0xd3d280c2866eaa795fc72bd850c48e7cce166e23\", \"bounty_owner_email\": \"ksowocki@gmail.com\", \"bounty_owner_github_username\": \"owocki\", \"fulfiller_address\": \"0x0000000000000000000000000000000000000000\", \"fulfiller_email\": null, \"fulfiller_github_username\": null, \"is_open\": true, \"expires_date\": \"2017-09-23T01:42:04Z\", \"fulfiller_metadata\": { }, \"current_bounty\": true, \"value_in_eth\": 1.0e+18, \"value_in_usdt_now\": 280.65, \"status\": \"expired\", \"now\": \"2017-09-24T18:59:53.964344Z\" }, .... ] WEB3 API You may interact with the HTTPS API as follows truffle(development)> BountyIndex.at('0x0ed0c2a859e9e576cdff840c51d29b6f8a405bdd').bountydetails.call('https://github.com/owocki/pytrader/pull/83'); [ { [String: '100000000000000000'] s: 1, e: 17, c: [ 1000 ] }, '0x0000000000000000000000000000000000000000', '0xd3d280c2866eaa795fc72bd850c48e7cce166e23', '0x0000000000000000000000000000000000000000', true, true, 'https://github.com/owocki/pytrader/pull/83', { [String: '1506220425'] s: 1, e: 9, c: [ 1506220425 ] }, '{\"issueTitle\":\"\",\"issueKeywords\":\"\",\"tokenName\":\"ETH\",\"githubUsername\":\"owocki\",\"notificationEmail\":\"ksowocki@gmail.com\",\"experienceLevel\":\"\",\"projectLength\":\"\",\"bountyType\":\"\"}', { [String: '1537756425'] s: 1, e: 9, c: [ 1537756425 ] }, '' ] be sure to replace 0x0ed0c2a859e9e576cdff840c51d29b6f8a405bdd with the BountyIndex contract address. be sure to replace https://github.com/owocki/pytrader/pull/83 with the issue that you care about. Further information on the smart contract interface is available at https://github.com/gitcoinco/smart_contracts/blob/master/contracts/bounty/BountyIndex.sol _bountydetails function returns the following fields: Fields Field Key Datatype Description amount float Bounty amount in ETH or specified ERC20 token amount_denomination string Denomination of the bounty action_url string URL of the bounty title string Title of hte bounty description string Description of the bounty created_on datetime Creation timestamp source_project string Source Project the bounty came from tags strings tags to classify the bounthy","title":"Rest API"},{"location":"mk_rest_api/#https-api","text":"Gitcoin provides a simple HTTPS API to access data without having to run your own Ethereum node. The API is live at https://gitcoin.co/api/v0.1","title":"HTTPS API"},{"location":"mk_rest_api/#datatypes","text":"Beyond simple datatypes like string or integer the API returns datatypes like dates that are serialized in a very specific fashion. Datatype Description Example date_time Date and time represented in ISO 8601 2017-09-24T18:59:53.964344Z ethereum_address An ethereum token address with the leading 0x 0x636f3093258412b96c43bef3663f1b853253ec59 token_type The type of token offered as a reward. Ex: ETH or GIT ETH","title":"Datatypes"},{"location":"mk_rest_api/#bounties","text":"The bounties endpoint provides a listing of bounties and their current status. There is one endpoint that access bounties: https://gitcoin.co/api/v0.1/bounties/ - Returns a list of bounties","title":"bounties"},{"location":"mk_rest_api/#fields","text":"Field Key Datatype Description url string URL for this specific bounty Ex: api/v0.1/bounties/9/ created_on date_time Creation timestamp modified_on date_time Last modified timestamp title string Title of the bounty web3_created date_time Creation timestamp for the transaction that holds this bounty value_in_token integer Amount of tokens rewarded for bounty token_name token_type Type of token. Ex: ETH , GIT token_address ethereum_address Address where the tokens are located bounty_type string Type of bounty. Ex: Bug , Feature , Security project_length string Relative length of project Ex: Hours , Days , Weeks , Months experience_level string Recommended experience level github_url string URL on GitHub where you can find the bounty description github_org_name string github org name github_repo_name string github repo name github_issue_number string github issue number keywords string comma delimited list of keywords current_bounty boolean Whether this bounty is the most current revision one or not expires_date date_time Date before which the bounty must be compelted value_in_eth integer Value of the bounty in Ethereum value_in_usdt float Approximation of value in USD at bounty web3_created timestamp value_in_usdt_now float Approximation of current value in USD now date_time Current date_time on the server action_urls dict a list of urls where user can take action against the bounty paid array List of users who have been paid from the bounty Current Status Field Key Datatype Description is_open boolean True if the bounty has not been completed status string Current status enum: ( open , The bounty was created), ( started , The bounty was started) ( submitted , Someone submitted work for the bounty) ( done , Someone fulfilled and completed the bounty) ( expired , The bounty expired w/o completion) Bounty Creator & Bounty Fulfiller Field Key Datatype Description bounty_owner_address ethereum_address Address of the person who owns the bounty bounty_owner_email string Email of the bounty owner bounty_owner_github_username string Username of the bounty owner metadata dictionary Misc metadata about the bounty and the creator fulfiller_address ethereum_address Address of the person who fulfilled the bounty fulfiller_email string Email of the person fulfilling the bounty fulfiller_github_username string Username of the fulfiller fulfiller_metadata dictionary githubUsername and notificationEmail for the fulfiller","title":"Fields"},{"location":"mk_rest_api/#url-parameters","text":"Filters You can filter the data returned from the API by providing these keys as URL parameters experience_level , project_length , bounty_type , bounty_owner_address , is_open , github_url and pk . github_url can take a comma-separated list of GitHub urls. pk takes an ID and returns a single bounty. Order By By passing an order_by parameter you can order the data by the provided key. Ex: ?order_by=expires_date . To sort in the opposite direction you can add a - in from the the key ?order_by=-expires_date .","title":"URL Parameters"},{"location":"mk_rest_api/#example-request","text":"~ % curl \"https://gitcoin.co/api/v0.1/bounties/?&order_by=web3_created\" [ { \"url\": \"https:\\/\\/gitcoin.co\\/api\\/v0.1\\/bounties\\/87\\/\", \"created_on\": \"2017-09-22T01:42:07.060841Z\", \"modified_on\": \"2017-09-23T12:36:11.946334Z\", \"title\": \"Update local_settings.py.example\", \"web3_created\": \"2017-09-22T01:42:04Z\", \"value_in_token\": \"1000000000000000000.00\", \"token_name\": \"ETH\", \"token_address\": \"0x0000000000000000000000000000000000000000\", \"bounty_type\": \"\", \"project_length\": \"\", \"experience_level\": \"\", \"github_url\": \"https:\\/\\/github.com\\/owocki\\/pytrader\\/pull\\/83232\", \"bounty_owner_address\": \"0xd3d280c2866eaa795fc72bd850c48e7cce166e23\", \"bounty_owner_email\": \"ksowocki@gmail.com\", \"bounty_owner_github_username\": \"owocki\", \"fulfiller_address\": \"0x0000000000000000000000000000000000000000\", \"fulfiller_email\": null, \"fulfiller_github_username\": null, \"is_open\": true, \"expires_date\": \"2017-09-23T01:42:04Z\", \"fulfiller_metadata\": { }, \"current_bounty\": true, \"value_in_eth\": 1.0e+18, \"value_in_usdt_now\": 280.65, \"status\": \"expired\", \"now\": \"2017-09-24T18:59:53.964344Z\" }, .... ]","title":"Example Request"},{"location":"mk_rest_api/#web3-api","text":"You may interact with the HTTPS API as follows truffle(development)> BountyIndex.at('0x0ed0c2a859e9e576cdff840c51d29b6f8a405bdd').bountydetails.call('https://github.com/owocki/pytrader/pull/83'); [ { [String: '100000000000000000'] s: 1, e: 17, c: [ 1000 ] }, '0x0000000000000000000000000000000000000000', '0xd3d280c2866eaa795fc72bd850c48e7cce166e23', '0x0000000000000000000000000000000000000000', true, true, 'https://github.com/owocki/pytrader/pull/83', { [String: '1506220425'] s: 1, e: 9, c: [ 1506220425 ] }, '{\"issueTitle\":\"\",\"issueKeywords\":\"\",\"tokenName\":\"ETH\",\"githubUsername\":\"owocki\",\"notificationEmail\":\"ksowocki@gmail.com\",\"experienceLevel\":\"\",\"projectLength\":\"\",\"bountyType\":\"\"}', { [String: '1537756425'] s: 1, e: 9, c: [ 1537756425 ] }, '' ] be sure to replace 0x0ed0c2a859e9e576cdff840c51d29b6f8a405bdd with the BountyIndex contract address. be sure to replace https://github.com/owocki/pytrader/pull/83 with the issue that you care about. Further information on the smart contract interface is available at https://github.com/gitcoinco/smart_contracts/blob/master/contracts/bounty/BountyIndex.sol _bountydetails function returns the following fields:","title":"WEB3 API"},{"location":"mk_rest_api/#fields_1","text":"Field Key Datatype Description amount float Bounty amount in ETH or specified ERC20 token amount_denomination string Denomination of the bounty action_url string URL of the bounty title string Title of hte bounty description string Description of the bounty created_on datetime Creation timestamp source_project string Source Project the bounty came from tags strings tags to classify the bounthy","title":"Fields"},{"location":"mk_securitybounty/","text":"Gitcoin Security Bounty Program Gitcoin is an open-source marketplace with our code available for inspection and research. If you discover a severe bug affecting the privacy, data, or security of our users we ask that you disclose responsibly and privately. For security related vulnerabilities we reward researchers for private and professional disclosure. Non-security issues (style issues, gas optimizations) are not eligible for this bounty. Guidelines Participating in our security bounty program requires you to follow our guidelines. Responsible investigation and reporting includes, but not limited to the following: Don't download, modify, or destroy other users' data. Don't cause a denial-of-service on our platform through exploits, vulnerabilities, traffic, or causing issues with our technology providers. Don't repeatedly request updates on your reports. Gitcoin is a small team and constant requests for updates can render your report ineligible. Allow us up to 7 days to respond to your emails. Do only use your own account to test issues in production. You can also download our open source code and run your own instance to research and test for vulnerabilities. Social engineering attacks, DDOS, physical access, spearfishing, etc. are not eligible. Payouts will be made to the first individuals who submit a report. The Gitcoin team has the final say in all determinations of bounty payouts including severity, classification, amount, whether the report falls under our guidelines, etc. Vulnerabilities should be disclosed directly to the Gitcoin team by emailing engineering@gitcoin.co - reports should not be made publically or to any third party. These communications must remain confidential to be eligible. Threats, ransom demands, unprofessional language, etc. of any kind will automatically disqualify you from participating in the program. The only domain eligible for the bounty program is https://gitcoin.co - no subdomains, related services, etc. are within the scope of the program. Vulnerabilities found in support services (ex: Slack, Wordpress, etc.) are not eligible. Vulnerability Scope Any significant vulnerability may be eligible for an award provided it follows the guidelines set in this document. Some examples of eligible issues are: Cross-Site Request Forgery (CSRF) Cross-Site Scripting (XSS) Code Executions SQL Injection Server Side Request Forgery (SSRF) Privilege Escalations Authentication Bypasses Data Leaks Some examples of ineligible issues are: Rate Limiting Stack Traces Self-XSS Man in the Middle (MiTM) Attacks Denial of Service Attacks Cache Poisoning Clickjacking Missing DNS Records Brute Force Attacks Vulnerabilities in third party services or third party platforms Vulnerabilities in past versions of the software Vulnerabilities affecting outdated browsers or operating systems Eligible Reports must contain enough information and a proof of concept code or screenshots. After a report is made and confirmed, efforts will be made to fix the issue. Researchers agree to assist in the testing of the fixes. Vulnerability severity is judged by the OWASP model Payouts will be awarded in ETH and converted from USD at the time of payout - please include your Ethereum address and Gitcoin username when submitting a report: Critical: $600 High: $225 Medium: $125 Low: $30","title":"Security Bounty Program"},{"location":"mk_securitybounty/#gitcoin-security-bounty-program","text":"Gitcoin is an open-source marketplace with our code available for inspection and research. If you discover a severe bug affecting the privacy, data, or security of our users we ask that you disclose responsibly and privately. For security related vulnerabilities we reward researchers for private and professional disclosure. Non-security issues (style issues, gas optimizations) are not eligible for this bounty.","title":"Gitcoin Security Bounty Program"},{"location":"mk_securitybounty/#guidelines","text":"Participating in our security bounty program requires you to follow our guidelines. Responsible investigation and reporting includes, but not limited to the following: Don't download, modify, or destroy other users' data. Don't cause a denial-of-service on our platform through exploits, vulnerabilities, traffic, or causing issues with our technology providers. Don't repeatedly request updates on your reports. Gitcoin is a small team and constant requests for updates can render your report ineligible. Allow us up to 7 days to respond to your emails. Do only use your own account to test issues in production. You can also download our open source code and run your own instance to research and test for vulnerabilities. Social engineering attacks, DDOS, physical access, spearfishing, etc. are not eligible. Payouts will be made to the first individuals who submit a report. The Gitcoin team has the final say in all determinations of bounty payouts including severity, classification, amount, whether the report falls under our guidelines, etc. Vulnerabilities should be disclosed directly to the Gitcoin team by emailing engineering@gitcoin.co - reports should not be made publically or to any third party. These communications must remain confidential to be eligible. Threats, ransom demands, unprofessional language, etc. of any kind will automatically disqualify you from participating in the program. The only domain eligible for the bounty program is https://gitcoin.co - no subdomains, related services, etc. are within the scope of the program. Vulnerabilities found in support services (ex: Slack, Wordpress, etc.) are not eligible.","title":"Guidelines"},{"location":"mk_securitybounty/#vulnerability-scope","text":"Any significant vulnerability may be eligible for an award provided it follows the guidelines set in this document. Some examples of eligible issues are: Cross-Site Request Forgery (CSRF) Cross-Site Scripting (XSS) Code Executions SQL Injection Server Side Request Forgery (SSRF) Privilege Escalations Authentication Bypasses Data Leaks Some examples of ineligible issues are: Rate Limiting Stack Traces Self-XSS Man in the Middle (MiTM) Attacks Denial of Service Attacks Cache Poisoning Clickjacking Missing DNS Records Brute Force Attacks Vulnerabilities in third party services or third party platforms Vulnerabilities in past versions of the software Vulnerabilities affecting outdated browsers or operating systems Eligible Reports must contain enough information and a proof of concept code or screenshots. After a report is made and confirmed, efforts will be made to fix the issue. Researchers agree to assist in the testing of the fixes. Vulnerability severity is judged by the OWASP model Payouts will be awarded in ETH and converted from USD at the time of payout - please include your Ethereum address and Gitcoin username when submitting a report: Critical: $600 High: $225 Medium: $125 Low: $30","title":"Vulnerability Scope"},{"location":"mk_setup/","text":"Running Locally with Docker (Recommended) git clone https://github.com/gitcoinco/web.git cd web cp app/app/local.env app/app/.env Special instructions for Windows WSL contributors If you are using Windows 10 Professional or Enterprise Download Docker Desktop for Windows here . If you are NOT using Windows 10 Professional or Enterprise Docker Desktop for Windows is not available to your OS. Follow the steps below to install and configure Docker Toolbox: Follow the installation instructions on the manual for installing Docker Toolbox on Windows . WSL by default mounts your C: drive on /mnt/c , but Docker Toolkit instead expects it to be mounted on /c/ . To instruct WSL to mount it in the correct location, create a config file in /etc/wsl.conf using WSL and enter the following: [automount] root = / options = \"metadata\" Lastly, ensure that you are sharing the folders of your project directory to your VirtualBox VM, i.e. if your Gitcoin repository is located in C:/Projects/web , you will have to go to the VirtualBox UI, click on Settings > Shared Folders , and ensure that there is an entry with a name of c/Projects and a path of C:\\Projects . Once Docker is installed (either via Docker Desktop for Windows or Docker Toolkit), install the Docker packages on WSL as you normally would for Ubuntu: # Update the apt package list. $ sudo apt-get update -y # Install Docker's package dependencies. $ sudo apt-get install -y \\ apt-transport-https \\ ca-certificates \\ curl \\ software-properties-common # Download and add Docker's official public PGP key. $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - # Verify the fingerprint. $ sudo apt-key fingerprint 0EBFCD88 # Add the `stable` channel's Docker upstream repository. # # If you want to live on the edge, you can change \"stable\" below to \"test\" or # \"nightly\". I highly recommend sticking with stable! $ sudo add-apt-repository \\ \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) \\ stable\" # Update the apt package list (for the new apt repo). $ sudo apt-get update -y # Install the latest version of Docker CE. $ sudo apt-get install -y docker-ce # Allow your user to access the Docker CLI without needing root access. $ sudo usermod -aG docker $USER Startup server Check that you have Docker and Docker-compose properly installed docker --version Docker version 18.09.7, build 2d0083d docker-compose --version docker-compose version 1.24.1, build 4667896b The above should work. Running in Detached mode docker-compose up -d --build The above would create a background daemon when it finished installation. It takes pretty long time, an hour or more. The good news is that it runs on its own. If you have error while running this it is likely to come from docker and docker-compose. Running in the foreground docker-compose up --build Screens during building Viewing Logs Actively follow a container's log: docker-compose logs -f web # Or any other container name View all container logs: docker-compose logs Navigate to http://localhost:8000/ . For background build, Gitcoin server runs as a service and its always there. You can stop it using kill process , docker-compose to stop it or other means. Note: Running docker-compose logs --tail=50 -f <optional container_name> will follow all container output in the active terminal window, while specifying a container name will follow that specific container's output. --tail is optional. Check out the Docker Compose CLI Reference for more information. You will need to edit the app/.env file with your local environment variables. Look for config items that are marked # required . Integration Setup (recommended) If you plan on using the Github integration, please read the third party integration guide . Static Asset Handling (optional) If you're testing in a staging or production style environment behind a CDN, pass the DJANGO_STATIC_HOST environment variable to your django web instance specifying the CDN URL. For example: DJANGO_STATIC_HOST='https://gitcoin.co' Create Django Admin docker-compose exec web python3 app/manage.py createsuperuser Add a Custom ERC20 Token To your Local Gitcoin Create a django admin Go to http://localhost:8000/_administrationeconomy/token/ and click Add New Token . Open another tab and go to http://tokenfactory.surge.sh Mint a new token on the network of ur choice. Go back to your Gitcoin local tab, and enter the token. Click Save Congratulations, your local environment now supports your custom token! You may continue administering your token over at http://tokenfactory.surge.sh . Hint: Maybe you should mint some? \ud83e\udd14 Initial test data The development server is conditioned with a representative sampling of test data fixtures outlined below: * 20ish users doing a variety things * Bounties in various statuses - so you can get to work! * Grants - ask some friends to support your work on Gitcoin * A variety of Kudos for you to send to everybody hahrd at work on bounties * A default superuser - usage below 1. Go to http://localhost:8000/_administrationeconomy/ 2. Login with - username - root - password - gitcoinco 3. Poke around the database tables. 4. Click the \"Impersonate User\" link, pick any user and poke around the site. Note, using the sync_geth command described below can potentially break some of the fixtures outlined above. Optional: Import bounty data from web3 to your database This can be useful if you'd like data to test with: docker-compose exec web python3 app/manage.py sync_geth rinkeby -20 99999999999 FAQ Running Tests Q: How can I run the tests locally? You can ensure your project will pass all Travis tests by running: make tests # docker-compose exec -e DJANGO_SETTINGS_MODULE=app.settings web pytest -p no:ethereum; npm run eslint; The above make command will run eslint and pytest . You can also run the Cypress regression tests by opening the Cypress UI by running: make cypress Fresh rebuild Q: My environment is erroring out due to missing modules/packages or postgresql errors. How can I fix it? make fresh # docker-compose down -v; docker-compose up -d --build; Create superuser Q: How can I access the django administration login? make superuser # docker-compose exec web python3 app/manage.py createsuperuser open http://localhost:8000/_administration Docker for-mac troubleshooting Q: When building with docker on my mac, CPU usage is high and device is overheating what should I do? Problems regarding docker and high CPU usage seem to be common on mac. One community user found that going to the resources section on Docker desktop and lowering CPU cores and disk image size to minimum improves this issue. For more troubleshooting tips on this problem consult the docker for-mac repo issues [https://github.com/docker/for-mac/issues?q=cpu](https://github.com/docker/for-mac/issues?q=cpu) Fix local test issues Q: How can I attempt automatic remediation of eslint and isort test failures? make fix # npm run eslint:fix; docker-compose exec web isort -rc --atomic .; Makefile Help Q: How can I see a complete list of Makefile commands and descriptions? Run: make autotranslate Automatically translate all untranslated entries for all LOCALES in settings.py. build Build the Gitcoin Web image. collect-static Collect newly added static resources from the assets directory. compilemessages Execute compilemessages for translations on the web container. compress-images Compress and optimize images throughout the repository. Requires optipng, svgo, and jpeg-recompress. cypress Open cypress testing UI eslint Run eslint against the project directory. Requires node, npm, and project dependencies. fix-eslint Run eslint --fix against the project directory. Requires node, npm, and project dependencies. fix Attempt to run all fixes against the project directory. fix-isort Run isort against python files in the project directory. fix-stylelint Run stylelint --fix against the project directory. Requires node, npm, and project dependencies. fix-yapf Run yapf against any included or newly introduced Python code. fresh Completely destroy all compose assets and start compose with a fresh build. get_django_shell Open a standard Django shell. get_ipdb_shell Drop into the active Django shell for inspection via ipdb. get_shell_plus Open a standard Django shell. load_initial_data Load initial development fixtures. login Login to Docker Hub. logs Print and actively tail the docker compose logs. makemessages Execute makemessages for translations on the web container. migrate Migrate the database schema with the latest unapplied migrations. migrations Generate migration files for schema changes. pgactivity Run pg_activivty against the local postgresql instance. pgtop Run pg_top against the local postgresql instance. push Push the Docker image to the Docker Hub repository. pytest-pdb Run pytest with pdb support (Backend) pytest Run pytest (Backend) stylelint Run stylelint against the project directory. Requires node, npm, and project dependencies. tests Run the full test suite. update_fork Update the current fork master branch with upstream master. update_stable Update the stable branch with master. These are commands that you can use to play with Gitcoin web. However, they are for developer. If you want to play around some may need special docker setup. make build uses docker experimental functions. Enable docker experimental functions sudo nano /etc/docker/daemon.json Copy and paste { \"experimental\": true } On-chain activities Q: Which network should I be using for local testing? It is recommended to use the Rinkeby testnet for local development testing. You can receive some testnet eth by visiting the Rinkeby Faucet Alternatively, you can use the local ganache-cli test rpc network that ships with the docker compose stack by switching to Localhost 8545 in Metamask. Address already in use Q: I am receiving a \"address already in use\" error when attempting to run: docker-compose up This error can occur when you are already running a local instance of PostgreSQL or another service on any of the ports specified in the docker-compose.yml . You can identify which process is currently bound to the port with: lsof -i :<port_number> | grep LISTEN - for example: lsof -i :8000 | grep LISTEN and simply sudo kill <pid> , substituting the PID returned from lsof . Github Login Q: How can I enable the Github Login functionality on my local docker instance? If you plan on using the Github integration, please read the third party integration guide . ipdb Q: what's the best way to import ipdb; ipdb.set_trace() a HTTP request via docker? Add import ipdb;ipdb.set_trace() to the method you want to inspect, you then run: make get_ipdb_shell to drop into the active shell for inspection. Access Django Shell Q: How can I access the Django shell, similar to: python manage.py shell ? Simply run: make get_django_shell or docker-compose exec web python app/manage.py shell Access BASH Q: I want to inspect or manipulate the container via bash. How can I access the root shell of the container? Run: docker-compose exec web bash I have a question about Kudos. Is there a FAQ for that product? Yes click here .","title":"Setup Environment (recommended)"},{"location":"mk_setup/#running-locally-with-docker-recommended","text":"git clone https://github.com/gitcoinco/web.git cd web cp app/app/local.env app/app/.env","title":"Running Locally with Docker (Recommended)"},{"location":"mk_setup/#special-instructions-for-windows-wsl-contributors","text":"If you are using Windows 10 Professional or Enterprise Download Docker Desktop for Windows here . If you are NOT using Windows 10 Professional or Enterprise Docker Desktop for Windows is not available to your OS. Follow the steps below to install and configure Docker Toolbox: Follow the installation instructions on the manual for installing Docker Toolbox on Windows . WSL by default mounts your C: drive on /mnt/c , but Docker Toolkit instead expects it to be mounted on /c/ . To instruct WSL to mount it in the correct location, create a config file in /etc/wsl.conf using WSL and enter the following: [automount] root = / options = \"metadata\" Lastly, ensure that you are sharing the folders of your project directory to your VirtualBox VM, i.e. if your Gitcoin repository is located in C:/Projects/web , you will have to go to the VirtualBox UI, click on Settings > Shared Folders , and ensure that there is an entry with a name of c/Projects and a path of C:\\Projects . Once Docker is installed (either via Docker Desktop for Windows or Docker Toolkit), install the Docker packages on WSL as you normally would for Ubuntu: # Update the apt package list. $ sudo apt-get update -y # Install Docker's package dependencies. $ sudo apt-get install -y \\ apt-transport-https \\ ca-certificates \\ curl \\ software-properties-common # Download and add Docker's official public PGP key. $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - # Verify the fingerprint. $ sudo apt-key fingerprint 0EBFCD88 # Add the `stable` channel's Docker upstream repository. # # If you want to live on the edge, you can change \"stable\" below to \"test\" or # \"nightly\". I highly recommend sticking with stable! $ sudo add-apt-repository \\ \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) \\ stable\" # Update the apt package list (for the new apt repo). $ sudo apt-get update -y # Install the latest version of Docker CE. $ sudo apt-get install -y docker-ce # Allow your user to access the Docker CLI without needing root access. $ sudo usermod -aG docker $USER","title":"Special instructions for Windows WSL contributors"},{"location":"mk_setup/#startup-server","text":"Check that you have Docker and Docker-compose properly installed docker --version Docker version 18.09.7, build 2d0083d docker-compose --version docker-compose version 1.24.1, build 4667896b The above should work.","title":"Startup server"},{"location":"mk_setup/#running-in-detached-mode","text":"docker-compose up -d --build The above would create a background daemon when it finished installation. It takes pretty long time, an hour or more. The good news is that it runs on its own. If you have error while running this it is likely to come from docker and docker-compose.","title":"Running in Detached mode"},{"location":"mk_setup/#running-in-the-foreground","text":"docker-compose up --build","title":"Running in the foreground"},{"location":"mk_setup/#screens-during-building","text":"","title":"Screens during building"},{"location":"mk_setup/#viewing-logs","text":"Actively follow a container's log: docker-compose logs -f web # Or any other container name View all container logs: docker-compose logs Navigate to http://localhost:8000/ . For background build, Gitcoin server runs as a service and its always there. You can stop it using kill process , docker-compose to stop it or other means. Note: Running docker-compose logs --tail=50 -f <optional container_name> will follow all container output in the active terminal window, while specifying a container name will follow that specific container's output. --tail is optional. Check out the Docker Compose CLI Reference for more information. You will need to edit the app/.env file with your local environment variables. Look for config items that are marked # required .","title":"Viewing Logs"},{"location":"mk_setup/#integration-setup-recommended","text":"If you plan on using the Github integration, please read the third party integration guide .","title":"Integration Setup (recommended)"},{"location":"mk_setup/#static-asset-handling-optional","text":"If you're testing in a staging or production style environment behind a CDN, pass the DJANGO_STATIC_HOST environment variable to your django web instance specifying the CDN URL. For example: DJANGO_STATIC_HOST='https://gitcoin.co'","title":"Static Asset Handling (optional)"},{"location":"mk_setup/#create-django-admin","text":"docker-compose exec web python3 app/manage.py createsuperuser","title":"Create Django Admin"},{"location":"mk_setup/#add-a-custom-erc20-token-to-your-local-gitcoin","text":"Create a django admin Go to http://localhost:8000/_administrationeconomy/token/ and click Add New Token . Open another tab and go to http://tokenfactory.surge.sh Mint a new token on the network of ur choice. Go back to your Gitcoin local tab, and enter the token. Click Save Congratulations, your local environment now supports your custom token! You may continue administering your token over at http://tokenfactory.surge.sh . Hint: Maybe you should mint some? \ud83e\udd14","title":"Add a Custom ERC20 Token To your Local Gitcoin"},{"location":"mk_setup/#initial-test-data","text":"The development server is conditioned with a representative sampling of test data fixtures outlined below: * 20ish users doing a variety things * Bounties in various statuses - so you can get to work! * Grants - ask some friends to support your work on Gitcoin * A variety of Kudos for you to send to everybody hahrd at work on bounties * A default superuser - usage below 1. Go to http://localhost:8000/_administrationeconomy/ 2. Login with - username - root - password - gitcoinco 3. Poke around the database tables. 4. Click the \"Impersonate User\" link, pick any user and poke around the site. Note, using the sync_geth command described below can potentially break some of the fixtures outlined above.","title":"Initial test data"},{"location":"mk_setup/#optional-import-bounty-data-from-web3-to-your-database","text":"This can be useful if you'd like data to test with: docker-compose exec web python3 app/manage.py sync_geth rinkeby -20 99999999999","title":"Optional: Import bounty data from web3 to your database"},{"location":"mk_setup/#faq","text":"","title":"FAQ"},{"location":"mk_setup/#running-tests","text":"Q: How can I run the tests locally? You can ensure your project will pass all Travis tests by running: make tests # docker-compose exec -e DJANGO_SETTINGS_MODULE=app.settings web pytest -p no:ethereum; npm run eslint; The above make command will run eslint and pytest . You can also run the Cypress regression tests by opening the Cypress UI by running: make cypress","title":"Running Tests"},{"location":"mk_setup/#fresh-rebuild","text":"Q: My environment is erroring out due to missing modules/packages or postgresql errors. How can I fix it? make fresh # docker-compose down -v; docker-compose up -d --build;","title":"Fresh rebuild"},{"location":"mk_setup/#create-superuser","text":"Q: How can I access the django administration login? make superuser # docker-compose exec web python3 app/manage.py createsuperuser open http://localhost:8000/_administration","title":"Create superuser"},{"location":"mk_setup/#docker-for-mac-troubleshooting","text":"Q: When building with docker on my mac, CPU usage is high and device is overheating what should I do? Problems regarding docker and high CPU usage seem to be common on mac. One community user found that going to the resources section on Docker desktop and lowering CPU cores and disk image size to minimum improves this issue. For more troubleshooting tips on this problem consult the docker for-mac repo issues [https://github.com/docker/for-mac/issues?q=cpu](https://github.com/docker/for-mac/issues?q=cpu)","title":"Docker for-mac troubleshooting"},{"location":"mk_setup/#fix-local-test-issues","text":"Q: How can I attempt automatic remediation of eslint and isort test failures? make fix # npm run eslint:fix; docker-compose exec web isort -rc --atomic .;","title":"Fix local test issues"},{"location":"mk_setup/#makefile-help","text":"Q: How can I see a complete list of Makefile commands and descriptions? Run: make autotranslate Automatically translate all untranslated entries for all LOCALES in settings.py. build Build the Gitcoin Web image. collect-static Collect newly added static resources from the assets directory. compilemessages Execute compilemessages for translations on the web container. compress-images Compress and optimize images throughout the repository. Requires optipng, svgo, and jpeg-recompress. cypress Open cypress testing UI eslint Run eslint against the project directory. Requires node, npm, and project dependencies. fix-eslint Run eslint --fix against the project directory. Requires node, npm, and project dependencies. fix Attempt to run all fixes against the project directory. fix-isort Run isort against python files in the project directory. fix-stylelint Run stylelint --fix against the project directory. Requires node, npm, and project dependencies. fix-yapf Run yapf against any included or newly introduced Python code. fresh Completely destroy all compose assets and start compose with a fresh build. get_django_shell Open a standard Django shell. get_ipdb_shell Drop into the active Django shell for inspection via ipdb. get_shell_plus Open a standard Django shell. load_initial_data Load initial development fixtures. login Login to Docker Hub. logs Print and actively tail the docker compose logs. makemessages Execute makemessages for translations on the web container. migrate Migrate the database schema with the latest unapplied migrations. migrations Generate migration files for schema changes. pgactivity Run pg_activivty against the local postgresql instance. pgtop Run pg_top against the local postgresql instance. push Push the Docker image to the Docker Hub repository. pytest-pdb Run pytest with pdb support (Backend) pytest Run pytest (Backend) stylelint Run stylelint against the project directory. Requires node, npm, and project dependencies. tests Run the full test suite. update_fork Update the current fork master branch with upstream master. update_stable Update the stable branch with master. These are commands that you can use to play with Gitcoin web. However, they are for developer. If you want to play around some may need special docker setup. make build uses docker experimental functions.","title":"Makefile Help"},{"location":"mk_setup/#enable-docker-experimental-functions","text":"sudo nano /etc/docker/daemon.json Copy and paste { \"experimental\": true }","title":"Enable docker experimental functions"},{"location":"mk_setup/#on-chain-activities","text":"Q: Which network should I be using for local testing? It is recommended to use the Rinkeby testnet for local development testing. You can receive some testnet eth by visiting the Rinkeby Faucet Alternatively, you can use the local ganache-cli test rpc network that ships with the docker compose stack by switching to Localhost 8545 in Metamask.","title":"On-chain activities"},{"location":"mk_setup/#address-already-in-use","text":"Q: I am receiving a \"address already in use\" error when attempting to run: docker-compose up This error can occur when you are already running a local instance of PostgreSQL or another service on any of the ports specified in the docker-compose.yml . You can identify which process is currently bound to the port with: lsof -i :<port_number> | grep LISTEN - for example: lsof -i :8000 | grep LISTEN and simply sudo kill <pid> , substituting the PID returned from lsof .","title":"Address already in use"},{"location":"mk_setup/#github-login","text":"Q: How can I enable the Github Login functionality on my local docker instance? If you plan on using the Github integration, please read the third party integration guide .","title":"Github Login"},{"location":"mk_setup/#ipdb","text":"Q: what's the best way to import ipdb; ipdb.set_trace() a HTTP request via docker? Add import ipdb;ipdb.set_trace() to the method you want to inspect, you then run: make get_ipdb_shell to drop into the active shell for inspection.","title":"ipdb"},{"location":"mk_setup/#access-django-shell","text":"Q: How can I access the Django shell, similar to: python manage.py shell ? Simply run: make get_django_shell or docker-compose exec web python app/manage.py shell","title":"Access Django Shell"},{"location":"mk_setup/#access-bash","text":"Q: I want to inspect or manipulate the container via bash. How can I access the root shell of the container? Run: docker-compose exec web bash","title":"Access BASH"},{"location":"mk_setup/#i-have-a-question-about-kudos-is-there-a-faq-for-that-product","text":"Yes click here .","title":"I have a question about Kudos.  Is there a FAQ for that product?"},{"location":"mk_styleguide/","text":"Styleguide This is a WIP in order to standardize and unify the look and feel of the product All Gitcoin UI styled classes are prefixed with g- to distincly identify them. Note: All pages within gitcoin are expected to reuse these classes as applicable as opposed to reinventing the wheel. Typography g-font-muli (Muli - Default) g-font-futura (Futura - For Marketing Pages) The font variations used in Gitcoin can be found in typography.css Note: All pages within gitcoin are expected to reuse these classes as applicable as opposed to declaring the font within the templates css file. Forms Mutiselect (using select2) usage <div class=\"form__select2 g-multiselect\"> <select class=\"js-select2\" multiple> </select> </div> The Multiselect styling used in Gitcoin can be found in select.css Copy to clipboard usage <script src=\"{% static 'v2/js/clipboard.js' %}\"></script> <textarea id=\"matchid\">This text will be copied</textarea> <button data-copyclipboard=\"#matchid\">Copy Text</button> usage with class <input type=\"text\" class=\"matchclass\" value=\"This text will be copied\"> <button data-copyclipboard=\".matchclass\">Copy Text</button> Note: You can use it with textarea or input elements. Slider usage <label class=\"g-switch\"> <input id=\"package-period\" type=\"checkbox\"> <span class=\"slider\"></span> </label> The Slider styling used in Gitcoin can be found in slider.css Animations FadeIn Container has a fade in animation when it becomes into viewport. values data-fade-direction : left | mid | right (default: mid ) data-fade-duration : Number (default: 1500 ) usage <div class=\"g-fadein\" data-fade-duration=1000 data-fade-direction=\"mid\">","title":"StyleGuide"},{"location":"mk_styleguide/#styleguide","text":"This is a WIP in order to standardize and unify the look and feel of the product All Gitcoin UI styled classes are prefixed with g- to distincly identify them. Note: All pages within gitcoin are expected to reuse these classes as applicable as opposed to reinventing the wheel.","title":"Styleguide"},{"location":"mk_styleguide/#typography","text":"g-font-muli (Muli - Default) g-font-futura (Futura - For Marketing Pages) The font variations used in Gitcoin can be found in typography.css Note: All pages within gitcoin are expected to reuse these classes as applicable as opposed to declaring the font within the templates css file.","title":"Typography"},{"location":"mk_styleguide/#forms","text":"","title":"Forms"},{"location":"mk_styleguide/#mutiselect-using-select2","text":"usage <div class=\"form__select2 g-multiselect\"> <select class=\"js-select2\" multiple> </select> </div> The Multiselect styling used in Gitcoin can be found in select.css","title":"Mutiselect (using select2)"},{"location":"mk_styleguide/#copy-to-clipboard","text":"usage <script src=\"{% static 'v2/js/clipboard.js' %}\"></script> <textarea id=\"matchid\">This text will be copied</textarea> <button data-copyclipboard=\"#matchid\">Copy Text</button> usage with class <input type=\"text\" class=\"matchclass\" value=\"This text will be copied\"> <button data-copyclipboard=\".matchclass\">Copy Text</button> Note: You can use it with textarea or input elements.","title":"Copy to clipboard"},{"location":"mk_styleguide/#slider","text":"usage <label class=\"g-switch\"> <input id=\"package-period\" type=\"checkbox\"> <span class=\"slider\"></span> </label> The Slider styling used in Gitcoin can be found in slider.css","title":"Slider"},{"location":"mk_styleguide/#animations","text":"","title":"Animations"},{"location":"mk_styleguide/#fadein","text":"Container has a fade in animation when it becomes into viewport. values data-fade-direction : left | mid | right (default: mid ) data-fade-duration : Number (default: 1500 ) usage <div class=\"g-fadein\" data-fade-duration=1000 data-fade-direction=\"mid\">","title":"FadeIn"},{"location":"mk_third_party_integrations/","text":"Third party integrations Setup Github OAuth2 App Integration (Recommended) Navigate to: Github - New Application and enter similar values to: Enter Application Name: MyGitcoinApp Homepage URL: http://localhost Application description: My Gitcoin App Authorization callback URL: http://localhost:8000/ (required) The authorization callback URL should match your BASE_URL value in web/app/app/.env Update the web/app/app/.env file to include the values provided by Github: GITHUB_CLIENT_ID=xxxx GITHUB_CLIENT_SECRET=xxx GITHUB_APP_NAME=MyGitcoinApp Please docker-compose down; docker-compose up -d to have the environment variable changes reflect in your local Gitcoin environment. Setup Github User Integration (Recommended) Navigate to: Github - New Token At minimum, select user scope. Update the web/app/app/.env file to include the values provided by Github: GITHUB_API_TOKEN=xxx GITHUB_API_USER=xxx Make sure you disable gitcoinbot notifications on your local, unless you are specifically testing that feature By default, we disable outbound GitHub notifications to any repository that isn't under the GITHUB_API_USER repositories. For example, if settings.GITHUB_API_USER == gitcoinco only github.com/gitcoinco/<repos> bounties and associated tips will post Github comments. Setup SendGrid to Send Emails (Recommended) Create a new SendGrid Account at https://sendgrid.com Go to https://app.sendgrid.com/settings/api_keys and create a new Sendgrid API key: Update the web/app/app/.env file to include the values provided by SendGrid: SENDGRID_API_KEY=xxx CONTACT_EMAIL=xxx # Be VERY CAREFUL when changing this setting. You don't want to accidently # send a bunch of github notifications :) ENABLE_NOTIFICATIONS_ON_NETWORK=None Setup Fortmatic Integration Sign up/Login to Fortmatic dashboard at https://dashboard.fortmatic.com Update the web/app/app/.env file to include the values provided by Fortmatic: FORTMATIC_LIVE_KEY=xxx FORTMATIC_TEST_KEY=xxx Gitcoinbot Installation Instructions This integration requires the Github OAuth2 App Integration Navigate to: Gitcoinbot Github App Copy the application ID found on the page as the GITCOINBOT_APP_ID environment variable. Make sure you disable gitcoinbot notifications on your local, unless you are specifically testing that feature # Be VERY CAREFUL when changing this setting. You don't want to accidentally # send a bunch of github notifications :) ENABLE_NOTIFICATIONS_ON_NETWORK=None The following environment variables must be set for gitcoinbot to work correctly: GITHUB_API_USER=gitcoinbot # Github Profile name of the bot. Defaults to: gitcoinbot GITCOINBOT_APP_ID=APP_ID_FROM_ABOVE # Defaults to empty. GITCOIN_BOT_CERT_PATH=RELATIVE_PATH_TO_CERT_FILE # Defaults to empty. Example GITHUB_API_USER=gitcoinbot # Github Profile name of the bot. Defaults to: gitcoinbot GITCOINBOT_APP_ID=7735 # Gitcoin Bot App ID GITCOIN_BOT_CERT_PATH=app/gitcoin_bot_secret.pem # If pem file is located at web/app/app/gitcoin_bot_secret.pem Aside from these environment variables, the settings page of the gitcoin bot application must have the correct url for webhook events to post to. It should be set to https://gitcoin.co/payload based on urls.py line 131. After running the migrations and deploying the gitcoin.co website, gitcoinbot will begin to receive webhook events from any repository that it is installed into. This application will then parse through the comments and respond if it is called with @gitcoinbot + registered action call. Sentry Integration Error tracking is entirely optional and primarily for internal staging and production tracking. If you would like to track errors of your local environment, setup an account at: Sentry.io Once you have access to your project secrets, you can enable Sentry error tracking for both the backend and frontend by adding the following environment variables to web/app/app/.env : SENTRY_DSN=xxx","title":"Third Party Integration Setup"},{"location":"mk_third_party_integrations/#third-party-integrations","text":"","title":"Third party integrations"},{"location":"mk_third_party_integrations/#setup-github-oauth2-app-integration-recommended","text":"Navigate to: Github - New Application and enter similar values to: Enter Application Name: MyGitcoinApp Homepage URL: http://localhost Application description: My Gitcoin App Authorization callback URL: http://localhost:8000/ (required) The authorization callback URL should match your BASE_URL value in web/app/app/.env Update the web/app/app/.env file to include the values provided by Github: GITHUB_CLIENT_ID=xxxx GITHUB_CLIENT_SECRET=xxx GITHUB_APP_NAME=MyGitcoinApp Please docker-compose down; docker-compose up -d to have the environment variable changes reflect in your local Gitcoin environment.","title":"Setup Github OAuth2 App Integration (Recommended)"},{"location":"mk_third_party_integrations/#setup-github-user-integration-recommended","text":"Navigate to: Github - New Token At minimum, select user scope. Update the web/app/app/.env file to include the values provided by Github: GITHUB_API_TOKEN=xxx GITHUB_API_USER=xxx Make sure you disable gitcoinbot notifications on your local, unless you are specifically testing that feature By default, we disable outbound GitHub notifications to any repository that isn't under the GITHUB_API_USER repositories. For example, if settings.GITHUB_API_USER == gitcoinco only github.com/gitcoinco/<repos> bounties and associated tips will post Github comments.","title":"Setup Github User Integration (Recommended)"},{"location":"mk_third_party_integrations/#setup-sendgrid-to-send-emails-recommended","text":"Create a new SendGrid Account at https://sendgrid.com Go to https://app.sendgrid.com/settings/api_keys and create a new Sendgrid API key: Update the web/app/app/.env file to include the values provided by SendGrid: SENDGRID_API_KEY=xxx CONTACT_EMAIL=xxx # Be VERY CAREFUL when changing this setting. You don't want to accidently # send a bunch of github notifications :) ENABLE_NOTIFICATIONS_ON_NETWORK=None","title":"Setup SendGrid to Send Emails (Recommended)"},{"location":"mk_third_party_integrations/#setup-fortmatic-integration","text":"Sign up/Login to Fortmatic dashboard at https://dashboard.fortmatic.com Update the web/app/app/.env file to include the values provided by Fortmatic: FORTMATIC_LIVE_KEY=xxx FORTMATIC_TEST_KEY=xxx","title":"Setup Fortmatic Integration"},{"location":"mk_third_party_integrations/#gitcoinbot-installation-instructions","text":"","title":"Gitcoinbot Installation Instructions"},{"location":"mk_third_party_integrations/#this-integration-requires-the-github-oauth2-app-integration","text":"Navigate to: Gitcoinbot Github App Copy the application ID found on the page as the GITCOINBOT_APP_ID environment variable. Make sure you disable gitcoinbot notifications on your local, unless you are specifically testing that feature # Be VERY CAREFUL when changing this setting. You don't want to accidentally # send a bunch of github notifications :) ENABLE_NOTIFICATIONS_ON_NETWORK=None The following environment variables must be set for gitcoinbot to work correctly: GITHUB_API_USER=gitcoinbot # Github Profile name of the bot. Defaults to: gitcoinbot GITCOINBOT_APP_ID=APP_ID_FROM_ABOVE # Defaults to empty. GITCOIN_BOT_CERT_PATH=RELATIVE_PATH_TO_CERT_FILE # Defaults to empty.","title":"This integration requires the Github OAuth2 App Integration"},{"location":"mk_third_party_integrations/#example","text":"GITHUB_API_USER=gitcoinbot # Github Profile name of the bot. Defaults to: gitcoinbot GITCOINBOT_APP_ID=7735 # Gitcoin Bot App ID GITCOIN_BOT_CERT_PATH=app/gitcoin_bot_secret.pem # If pem file is located at web/app/app/gitcoin_bot_secret.pem Aside from these environment variables, the settings page of the gitcoin bot application must have the correct url for webhook events to post to. It should be set to https://gitcoin.co/payload based on urls.py line 131. After running the migrations and deploying the gitcoin.co website, gitcoinbot will begin to receive webhook events from any repository that it is installed into. This application will then parse through the comments and respond if it is called with @gitcoinbot + registered action call.","title":"Example"},{"location":"mk_third_party_integrations/#sentry-integration","text":"Error tracking is entirely optional and primarily for internal staging and production tracking. If you would like to track errors of your local environment, setup an account at: Sentry.io Once you have access to your project secrets, you can enable Sentry error tracking for both the backend and frontend by adding the following environment variables to web/app/app/.env : SENTRY_DSN=xxx","title":"Sentry Integration"},{"location":"mk_welcomebot/","text":"Gitcoin Slack Welcomebot Github The Gitcoin Slack Welcomebot is a Flask application meant to run on AWS Lambda using Zappa . This bot is intended to be ran as a Python 3.6 AWS Lambda function. Get started with the welcomebot by running make init . You will need to follow the Slack Bot setup instructions outlined in the Python Slack Event API client documentation. The majority of this application resides in welcomebot/app.py","title":"Readme"},{"location":"mk_welcomebot/#gitcoin-slack-welcomebot","text":"Github The Gitcoin Slack Welcomebot is a Flask application meant to run on AWS Lambda using Zappa . This bot is intended to be ran as a Python 3.6 AWS Lambda function. Get started with the welcomebot by running make init . You will need to follow the Slack Bot setup instructions outlined in the Python Slack Event API client documentation. The majority of this application resides in welcomebot/app.py","title":"Gitcoin Slack Welcomebot"},{"location":"mk_widget/","text":"Widgets Why These widgets will help you advertise your support for Gitcoin bounties. We support both image widgets (see below) and dynamically resizing javascript widgets (see directly below) Dynamic Javascript Widget Preview The JS image is responsive. Here are some screenshots of it: Example Click here to see an example JSFiddle widget Step 1: Include the JavaScript SDK on your page once, ideally right after the opening body tag. <div id=\"gc-root\"></div> <script>(function(d, s, id) { var js, gjs = d.getElementsByTagName(s)[0]; if (d.getElementById(id)) return; js = d.createElement(s); js.id = id; js.src = \"https://unpkg.com/gitcoin-sdk\"; gjs.parentNode.insertBefore(js, gjs); }(document, 'script', 'gitcoin-jssdk'));</script> Step 2: Place this code wherever you want the plugin to appear on your page. <div class=\"gitcoin-widget\" data-limit=\"2\" data-order-by=\"-expires_date\" data-organization=\"MetaMask\" data-repository=\"metamask-extension\" ></div> Autoloading Importing the SDK into your application will attempt to autoload the widget by searching for '.gitcoin-widget' selectors import 'gitcoin-sdk'; or require('gitcoin-sdk'); Programmatically You can also use the Widget programmatically. import { Widget } from 'gitcoin-sdk'; or const { Widget } = require('gitcoin-sdk'); Widget can be instantiated by passing a selector option, or an element reference. new Widget({ limit: 10, orderBy: '-expires_date', organization: 'MetaMask', repository: 'metamask-extension', selector: '.gitcoin-widget', }); Static Image Widget Example <a href=\"https://gitcoin.co/explorer?q=gitcoinco\"> <img src=\"https://gitcoin.co/funding/embed?repo=https://github.com/gitcoinco/web\"> </a> Results Repos that have this widget can expect to see 35% more interest in their repo's bounties Code Place the following code into your repo readme: <a href=\"https://gitcoin.co/explorer?q=YOUR_REPO_NAME\"> <img src=\"https://gitcoin.co/funding/embed?repo=https://github.com/YOUR_ORG_NAME/YOUR_REPO_NAME\"> </a> Make sure to replace the YOUR_ORG_NAME and YOUR_REPO_NAME text with your org and repo names! Example: <a href=\"https://gitcoin.co/explorer?q=gitcoinco\"> <img src=\"https://gitcoin.co/funding/embed?repo=https://github.com/gitcoinco/web\"> </a> Also, if you add &badge=1 to the image URL, a la <a href=\"https://gitcoin.co/explorer?q=gitcoinco\"> <img src=\"https://gitcoin.co/funding/embed?repo=https://github.com/gitcoinco/web&badge=1\"> </a> you will see a badge version of this widget. More Examples Badge Metamask Widget Ethereum web3py Widget Market Protocol Widget","title":"Widget Setup"},{"location":"mk_widget/#widgets","text":"","title":"Widgets"},{"location":"mk_widget/#why","text":"These widgets will help you advertise your support for Gitcoin bounties. We support both image widgets (see below) and dynamically resizing javascript widgets (see directly below)","title":"Why"},{"location":"mk_widget/#dynamic-javascript-widget","text":"","title":"Dynamic Javascript Widget"},{"location":"mk_widget/#preview","text":"The JS image is responsive. Here are some screenshots of it:","title":"Preview"},{"location":"mk_widget/#example","text":"Click here to see an example JSFiddle widget Step 1: Include the JavaScript SDK on your page once, ideally right after the opening body tag. <div id=\"gc-root\"></div> <script>(function(d, s, id) { var js, gjs = d.getElementsByTagName(s)[0]; if (d.getElementById(id)) return; js = d.createElement(s); js.id = id; js.src = \"https://unpkg.com/gitcoin-sdk\"; gjs.parentNode.insertBefore(js, gjs); }(document, 'script', 'gitcoin-jssdk'));</script> Step 2: Place this code wherever you want the plugin to appear on your page. <div class=\"gitcoin-widget\" data-limit=\"2\" data-order-by=\"-expires_date\" data-organization=\"MetaMask\" data-repository=\"metamask-extension\" ></div>","title":"Example"},{"location":"mk_widget/#autoloading","text":"Importing the SDK into your application will attempt to autoload the widget by searching for '.gitcoin-widget' selectors import 'gitcoin-sdk'; or require('gitcoin-sdk');","title":"Autoloading"},{"location":"mk_widget/#programmatically","text":"You can also use the Widget programmatically. import { Widget } from 'gitcoin-sdk'; or const { Widget } = require('gitcoin-sdk'); Widget can be instantiated by passing a selector option, or an element reference. new Widget({ limit: 10, orderBy: '-expires_date', organization: 'MetaMask', repository: 'metamask-extension', selector: '.gitcoin-widget', });","title":"Programmatically"},{"location":"mk_widget/#static-image-widget","text":"","title":"Static Image Widget"},{"location":"mk_widget/#example_1","text":"<a href=\"https://gitcoin.co/explorer?q=gitcoinco\"> <img src=\"https://gitcoin.co/funding/embed?repo=https://github.com/gitcoinco/web\"> </a>","title":"Example"},{"location":"mk_widget/#results","text":"Repos that have this widget can expect to see 35% more interest in their repo's bounties","title":"Results"},{"location":"mk_widget/#code","text":"Place the following code into your repo readme: <a href=\"https://gitcoin.co/explorer?q=YOUR_REPO_NAME\"> <img src=\"https://gitcoin.co/funding/embed?repo=https://github.com/YOUR_ORG_NAME/YOUR_REPO_NAME\"> </a> Make sure to replace the YOUR_ORG_NAME and YOUR_REPO_NAME text with your org and repo names! Example: <a href=\"https://gitcoin.co/explorer?q=gitcoinco\"> <img src=\"https://gitcoin.co/funding/embed?repo=https://github.com/gitcoinco/web\"> </a> Also, if you add &badge=1 to the image URL, a la <a href=\"https://gitcoin.co/explorer?q=gitcoinco\"> <img src=\"https://gitcoin.co/funding/embed?repo=https://github.com/gitcoinco/web&badge=1\"> </a> you will see a badge version of this widget.","title":"Code"},{"location":"mk_widget/#more-examples","text":"","title":"More Examples"},{"location":"mk_widget/#badge","text":"","title":"Badge"},{"location":"mk_widget/#metamask-widget","text":"","title":"Metamask Widget"},{"location":"mk_widget/#ethereum-web3py-widget","text":"","title":"Ethereum web3py Widget"},{"location":"mk_widget/#market-protocol-widget","text":"","title":"Market Protocol Widget"},{"location":"app/middleware/","text":"app.middleware drop_accept_langauge drop_accept_langauge(get_response) Define the middleware to remove accept-language headers from requests. This middleware is essentially a hack to allow us to continue to use the standard Django LocaleMiddleware without modification, but simply disable the autodetection aspect based on the Accept-Language header. bleach_requests bleach_requests(get_response) This middleware uses the bleach library to sanitize incoming requests to prevent XSS and injection attacks","title":"Middleware"},{"location":"app/pipeline/","text":"app.pipeline Define authentication pipeline functions and logic. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . save_profile save_profile(backend, user, response, request, *args, **kwargs) Associate a Profile with a User.","title":"Auth Pipeline"},{"location":"app/sitemaps/","text":"app.sitemaps StaticViewSitemap StaticViewSitemap(self, /, *args, **kwargs) changefreq str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. priority Convert a string or number to a floating point number, if possible. IssueSitemap IssueSitemap(self, /, *args, **kwargs) changefreq str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. priority Convert a string or number to a floating point number, if possible. KudosSitemap KudosSitemap(self, /, *args, **kwargs) changefreq str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. priority Convert a string or number to a floating point number, if possible. ProfileSitemap ProfileSitemap(self, /, *args, **kwargs) changefreq str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. limit int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 priority Convert a string or number to a floating point number, if possible. ContributorLandingPageSitemap ContributorLandingPageSitemap(self, /, *args, **kwargs) changefreq str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. priority Convert a string or number to a floating point number, if possible. ResultsSitemap ResultsSitemap(self, /, *args, **kwargs) changefreq str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. priority Convert a string or number to a floating point number, if possible. GrantsSitemap GrantsSitemap(self, /, *args, **kwargs) changefreq str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. priority Convert a string or number to a floating point number, if possible. QuestsSitemap QuestsSitemap(self, /, *args, **kwargs) changefreq str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. priority Convert a string or number to a floating point number, if possible. HackathonEventSiteMap HackathonEventSiteMap(self, /, *args, **kwargs) changefreq str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. priority Convert a string or number to a floating point number, if possible. HackathonProjectSiteMap HackathonProjectSiteMap(self, /, *args, **kwargs) changefreq str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. priority Convert a string or number to a floating point number, if possible. PostSitemap PostSitemap(self, /, *args, **kwargs) changefreq str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. limit int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 priority Convert a string or number to a floating point number, if possible. ActivitySitemap ActivitySitemap(self, /, *args, **kwargs) changefreq str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. limit int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 priority Convert a string or number to a floating point number, if possible. ArticleSitemap ArticleSitemap(self, /, *args, **kwargs) changefreq str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. limit int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 priority Convert a string or number to a floating point number, if possible.","title":"Sitemaps"},{"location":"app/static_storage/","text":"app.static_storage Define the custom static storage to surpress bad URL references. SilentFileStorage SilentFileStorage(self, *args, **kwargs) Define the static storage using S3 via boto3 with hashing. If Django cannot find a referenced url in an asset, it will silently pass. location str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. url SilentFileStorage.url(self, name, force=True) Handle catching bad URLs and return the name if route is unavailable. MediaFileStorage MediaFileStorage(self, *args, **kwargs) Define the media storage backend for user uploaded/stored files. location str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'.","title":"Static Storage"},{"location":"app/thumbnail_processors/","text":"app.thumbnail_processors Define the EthOS thumbnail processors. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . circular_processor circular_processor(image, circle=False, **kwargs) Force the image to a circle.","title":"Thumbnail Processors"},{"location":"app/utils/","text":"app.utils NotEqual NotEqual(self, lhs, rhs) Allow lookup and exclusion using not equal. lookup_name str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. as_sql NotEqual.as_sql(self, compiler, connection) Handle as SQL method for not equal lookup. get_query_cache_key get_query_cache_key(compiler) Generate a cache key from a SQLCompiler. This cache key is specific to the SQL query and its context (which database is used). The same query in the same context (= the same database) must generate the same cache key. Args: compiler (django.db.models.sql.compiler.SQLCompiler): A SQLCompiler that will generate the SQL query. Returns: int: The cache key. get_table_cache_key get_table_cache_key(db_alias, table) Generates a cache key from a SQL table. Args: db_alias (str): The alias of the used database. table (str): The name of the SQL table. Returns: int: The cache key. get_raw_cache_client get_raw_cache_client(backend='default') Get a raw Redis cache client connection. Args: backend (str): The backend to attempt connection against. Raises: Exception: The exception is raised/caught if any generic exception is encountered during the connection attempt. Returns: redis.client.StrictRedis: The raw Redis client connection. If an exception is encountered, return None. add_contributors add_contributors(repo_data) Add contributor data to repository data dictionary. Args: repo_data (dict): The repository data dictionary to be updated. Returns: dict: The updated repository data dictionary. setup_lang setup_lang(request, user) Handle setting the user's language preferences and store in the session. Args: request (Request): The Django request object. user (User): The Django user object. Raises: DoesNotExist: The exception is raised if no profile is found for the specified handle. handle_location_request handle_location_request(request) Handle determining location data from request IP. get_location_from_ip get_location_from_ip(ip_address) Get the location associated with the provided IP address. Args: ip_address (str): The IP address to lookup. Returns: dict: The GeoIP location data dictionary. get_country_from_ip get_country_from_ip(ip_address) Get the user's country information from the provided IP address. clean_str clean_str(string) Clean the provided string of all non-alpha numeric characters. get_profile get_profile(request) Get the current profile from the provided request. Returns: dashboard.models.Profile: The current user's Profile. CustomGithubOAuth2 CustomGithubOAuth2(self, strategy=None, *args, **kwargs) EXTRA_DATA Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. timeout timeout(max_timeout) Timeout decorator, parameter in seconds.","title":"Utilities"},{"location":"avatar/admin/","text":"avatar.admin Define the Avatar admin layout. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . AvatarThemeAdmin AvatarThemeAdmin(self, model, admin_site) Define the AvatarThemeAdmin administration layout. list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. png_asset AvatarThemeAdmin.png_asset(self, instance) Define the avatar PNG tag to be displayed in the admin. VeryGeneralAdmin VeryGeneralAdmin(self, model, admin_site) Define the VeryGeneralAdmin administration layout. list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. GeneralAdmin GeneralAdmin(self, model, admin_site) Define the GeneralAdmin administration layout. list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. svg_asset GeneralAdmin.svg_asset(self, instance) Define the avatar SVG tag to be displayed in the admin. png_asset GeneralAdmin.png_asset(self, instance) Define the avatar PNG tag to be displayed in the admin. BaseAvatarAdmin BaseAvatarAdmin(self, model, admin_site) Define the Avatar administration layout. fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. CustomAvatarAdmin CustomAvatarAdmin(self, model, admin_site) Define the Avatar administration layout. fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified.","title":"Admin"},{"location":"avatar/models/","text":"avatar.models Define the Avatar models. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . BaseAvatar BaseAvatar(self, *args, **kwargs) Store the options necessary to render a Gitcoin avatar. active A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. autogenerated A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. avatar_url Return the appropriate avatar URL. customavatar Accessor to the related object on the reverse side of a one-to-one relation. In the example:: class Restaurant(Model): place = OneToOneField(Place, related_name='restaurant') Place.restaurant is a ReverseOneToOneDescriptor instance. _method BaseAvatar._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method BaseAvatar._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method BaseAvatar._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method BaseAvatar._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) hash A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. ICON_SIZE Built-in immutable sequence. If no argument is given, the constructor returns an empty tuple. If iterable is specified the tuple is initialized from iterable's items. If the argument is a tuple, the return value is the same object. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. png Just like the FileDescriptor, but for ImageFields. The only difference is assigning the width/height to the width_field/height_field, if appropriate. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. socialavatar Accessor to the related object on the reverse side of a one-to-one relation. In the example:: class Restaurant(Model): place = OneToOneField(Place, related_name='restaurant') Place.restaurant is a ReverseOneToOneDescriptor instance. svg The descriptor for the file attribute on the model instance. Return a FieldFile when accessed so you can write code like:: >>> from myapp.models import MyModel >>> instance = MyModel.objects.get(pk=1) >>> instance.file.size Assign a file object on assignment so you can do:: >>> with open('/path/to/hello.world', 'r') as f: ... instance.file = File(f) get_avatar_url BaseAvatar.get_avatar_url(self) Get the Avatar URL. convert_field BaseAvatar.convert_field(self, source, input_fmt, output_fmt, height=215, width=215, preferred_method='', extra_flags='') Handle converting from the source field to the target based on format. determine_response BaseAvatar.determine_response(self, use_svg=True) Determine the content type and file to serve. Args: use_svg (bool): Whether or not to use SVG format. CustomAvatar CustomAvatar(self, *args, **kwargs) CustomAvatar(id, created_on, modified_on, active, profile, svg, png, hash, autogenerated, baseavatar_ptr, recommended_by_staff, style, config) baseavatar_ptr Accessor to the related object on the forward side of a one-to-one relation. In the example:: class Restaurant(Model): place = OneToOneField(Place, related_name='restaurant') Restaurant.place is a ForwardOneToOneDescriptor instance. baseavatar_ptr_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. config A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. recommended_by_staff A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. style A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. create_from_config CustomAvatar.create_from_config(self) Create an avatar SVG from the configuration. TODO: * Deprecate in favor of request param based view using templates. SocialAvatar SocialAvatar(self, *args, **kwargs) SocialAvatar(id, created_on, modified_on, active, profile, svg, png, hash, autogenerated, baseavatar_ptr) baseavatar_ptr Accessor to the related object on the forward side of a one-to-one relation. In the example:: class Restaurant(Model): place = OneToOneField(Place, related_name='restaurant') Restaurant.place is a ForwardOneToOneDescriptor instance. baseavatar_ptr_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. AvatarTextOverlayInput AvatarTextOverlayInput(self, *args, **kwargs) AvatarTextOverlayInput(id, created_on, modified_on, active, text, coment, num_uses_total, num_uses_remaining, current_uses) active A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. coment A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. current_uses A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method AvatarTextOverlayInput._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method AvatarTextOverlayInput._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method AvatarTextOverlayInput._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method AvatarTextOverlayInput._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. num_uses_remaining A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. num_uses_total A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. text A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. AvatarTheme AvatarTheme(self, *args, **kwargs) Store diff avatar theme types. active A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. artist_bio A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. description A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method AvatarTheme._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method AvatarTheme._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method AvatarTheme._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method AvatarTheme._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. img_url A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. override_name_ui A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. popularity A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. popularity_cheat_by A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. tags A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed.","title":"Models"},{"location":"avatar/templatetags/","text":"avatar.templatetags.avatar_tags Define the Avatar template tags. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ .","title":"Template Tags"},{"location":"avatar/utils/","text":"avatar.utils Define the Avatar utilities. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . get_svg_templates get_svg_templates() Get the SVG templates for all avatar categories. build_random_avatar build_random_avatar(override_skin_tone=None, override_hair_color=None, add_facial_hair=True) Build an random avatar payload using context properties handle_avatar_payload handle_avatar_payload(body) Handle the Avatar payload. get_temp_image_file get_temp_image_file(image) Fetch an image from a remote URL and hold in temporary IO. Args: url (str): The remote image URL. Returns: BytesIO: The temporary BytesIO containing the image. convert_img convert_img(obj, input_fmt='svg', output_fmt='png', height=215, width=215, preferred_method='', extra_flags='') Convert the provided buffer to another format. Args: obj (File): The File/ContentFile object. input_fmt (str): The input format. Defaults to: svg. output_fmt (str): The output format. Defaults to: png. Exceptions: Exception: Cowardly catch blanket exceptions here, log it, and return None. Returns: BytesIO: The BytesIO stream containing the converted File data. None: If there is an exception, the method returns None. convert_wand convert_wand(img_obj, input_fmt='png', output_fmt='svg') Convert an SVG to another format. Args: img_obj (File): The PNG or other image File/ContentFile. input_fmt (str): The input format. Defaults to: png. output_fmt (str): The output format. Defaults to: svg. Returns: BytesIO: The BytesIO stream containing the converted File data. None: If there is an exception, the method returns None.","title":"Utilities"},{"location":"avatar/views/","text":"avatar.views Define the Avatar views. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . avatar avatar(request) Serve an avatar. save_github_avatar save_github_avatar(request) Save the Github Avatar. csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. save_custom_avatar save_custom_avatar(request) Save the Custom Avatar. csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. activate_avatar activate_avatar(request) Activate the Avatar. select_preset_avatar select_preset_avatar(request) Select preset Avatar.","title":"Views"},{"location":"bounty_requests/admin/","text":"bounty_requests.admin Define admin related functionality for Bounty Requests. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . BountyRequestAdmin BountyRequestAdmin(self, model, admin_site) Setup the BountyRequest admin results display. list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified.","title":"Admin"},{"location":"bounty_requests/models/","text":"bounty_requests.models Define bounty requests related models. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . BountyQuerySet BountyQuerySet(self, model=None, query=None, using=None, hints=None) Define the Bounty Request QuerySet Manager. BountyRequest BountyRequest(self, *args, **kwargs) Define the Bounty Request model. amount A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. comment A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. comment_admin A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. eth_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method BountyRequest._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method BountyRequest._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method BountyRequest._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method BountyRequest._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) _method BountyRequest._method(self, *, field=<django.db.models.fields.CharField: status>) github_org_email A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. github_org_name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. github_url A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. requested_by Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. requested_by_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. status A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. STATUS_CHOICES Built-in immutable sequence. If no argument is given, the constructor returns an empty tuple. If iterable is specified the tuple is initialized from iterable's items. If the argument is a tuple, the return value is the same object. STATUS_CLOSED str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. STATUS_FUNDED str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. STATUS_OPEN str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. title A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. token_name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. tribe Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. tribe_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. BountyRequestMeta BountyRequestMeta(self, *args, **kwargs) A helper storage class for BountyRequest to keep track of dispatched emails. _method BountyRequestMeta._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method BountyRequestMeta._method(self, *, field=<django.db.models.fields.DateTimeField: last_feedback_sent>, is_next=True, **kwargs) _method BountyRequestMeta._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method BountyRequestMeta._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method BountyRequestMeta._method(self, *, field=<django.db.models.fields.DateTimeField: last_feedback_sent>, is_next=False, **kwargs) _method BountyRequestMeta._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. last_feedback_sent A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed.","title":"Models"},{"location":"bounty_requests/views/","text":"bounty_requests.views Define bounty request views. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ .","title":"Views"},{"location":"credits/views/","text":"credits.views","title":"Views"},{"location":"dashboard/admin/","text":"dashboard.admin Copyright (C) 2019 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . BountyEventAdmin BountyEventAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. BountyFulfillmentAdmin BountyFulfillmentAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. GeneralAdmin GeneralAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. TipPayoutAdmin TipPayoutAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. BlockedUserAdmin BlockedUserAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ProfileViewAdmin ProfileViewAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. PortfolioItemAdmin PortfolioItemAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. EarningAdmin EarningAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ActivityAdmin ActivityAdmin(self, model, admin_site) ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. TokenApprovalAdmin TokenApprovalAdmin(self, model, admin_site) ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. BountyInvitesAdmin BountyInvitesAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. from_inviter BountyInvitesAdmin.from_inviter(self, obj) Get the profile handle. to_invitee BountyInvitesAdmin.to_invitee(self, obj) Get the profile handle. InterestAdmin InterestAdmin(self, model, admin_site) ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. UserActionAdmin UserActionAdmin(self, model, admin_site) ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. FeedbackAdmin FeedbackAdmin(self, model, admin_site) ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ProfileAdmin ProfileAdmin(self, model, admin_site) actions Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. VerificationAdmin VerificationAdmin(self, model, admin_site) raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. SearchHistoryAdmin SearchHistoryAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. TipAdmin TipAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. BountyAdmin BountyAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. HackathonSponsorAdmin HackathonSponsorAdmin(self, model, admin_site) The admin object for the HackathonSponsor model. list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. SponsorAdmin SponsorAdmin(self, model, admin_site) The admin object for the Sponsor model. list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. img SponsorAdmin.img(self, instance) Returns a formatted HTML img node or 'n/a' if the HackathonEvent has no logo. Returns: str: A formatted HTML img node or 'n/a' if the HackathonEvent has no logo. HackathonEventAdmin HackathonEventAdmin(self, model, admin_site) The admin object for the HackathonEvent model. list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. list_filter Built-in immutable sequence. If no argument is given, the constructor returns an empty tuple. If iterable is specified the tuple is initialized from iterable's items. If the argument is a tuple, the return value is the same object. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. img HackathonEventAdmin.img(self, instance) Returns a formatted HTML img node or 'n/a' if the HackathonEvent has no logo. Returns: str: A formatted HTML img node or 'n/a' if the HackathonEvent has no logo. explorer_link HackathonEventAdmin.explorer_link(self, instance) Returns a formatted HTML node. Returns: str: A formatted HTML node. CouponAdmin CouponAdmin(self, model, admin_site) The admin object to maintain discount coupons for bounty list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. HackathonRegistrationAdmin HackathonRegistrationAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. HackathonProjectAdmin HackathonProjectAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. img HackathonProjectAdmin.img(self, instance) Returns a formatted HTML img node or 'n/a' if the HackathonProject has no logo. Returns: str: A formatted HTML img node or 'n/a' if the HackathonProject has no logo. usernames HackathonProjectAdmin.usernames(self, obj) Get the profile handle. sponsor HackathonProjectAdmin.sponsor(self, obj) Get the profile handle. TribeMemberAdmin TribeMemberAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. FundRequestAdmin FundRequestAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. QuestionInline QuestionInline(self, parent_model, admin_site) extra int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. show_change_link bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. Question QuestionInline.Question(self, *args, **kwargs) Question(id, created_on, modified_on, poll, question_type, text) OptionsInline OptionsInline(self, parent_model, admin_site) extra int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. show_change_link bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. Option OptionsInline.Option(self, *args, **kwargs) Option(id, created_on, modified_on, question, text) PollsAdmin PollsAdmin(self, model, admin_site) inlines Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. QuestionsAdmin QuestionsAdmin(self, model, admin_site) inlines Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. OptionsAdmin OptionsAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. AnswersAdmin AnswersAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. unique_together Built-in immutable sequence. If no argument is given, the constructor returns an empty tuple. If iterable is specified the tuple is initialized from iterable's items. If the argument is a tuple, the return value is the same object.","title":"Admin"},{"location":"dashboard/embed/","text":"dashboard.embed","title":"Embedded"},{"location":"dashboard/helpers/","text":"dashboard.helpers Handle dashboard helpers and related logic. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . get_bounty_view_kwargs get_bounty_view_kwargs(request) Get the relevant kwargs from the request. handle_bounty_views handle_bounty_views(request) Handle bounty view entry. Attributes: bounty (dashboard.Bounty): The bounty object for the specified request. bounty_kwargs (dict): The relevant key/values from the request to be used for the Bounty query. Returns: dashboard.Bounty: The Bounty object. amount amount(request) Determine the value of the provided denomination and amount in ETH and USD. Raises: Http404: The exception is raised if any error is encountered. Returns: JsonResponse: A JSON response containing ETH and USDT values. issue_details issue_details(request) Determine the Github issue keywords of the specified Github issue or PR URL. Todo: * Modify the view to only use the Github API (remove BeautifulSoup). * Simplify the view logic. Returns: JsonResponse: A JSON response containing the Github issue or PR keywords. normalize_url normalize_url(url) Normalize the URL. Args: url (str): The URL to be normalized. Returns: str: The normalized URL. sync_bounty_with_web3 sync_bounty_with_web3(bounty_contract, url) Sync the Bounty with Web3. Args: bounty_contract (Web3): The Web3 contract instance. url (str): The bounty URL. Returns: tuple: A tuple of bounty change data. tuple[0] (bool): Whether or not the Bounty changed. tuple[1] (dashboard.models.Bounty): The first old bounty object. tuple[2] (dashboard.models.Bounty): The new Bounty object. BountyStage BountyStage(self, /, *args, **kwargs) Python enum class that matches up with the Standard Bounties BountyStage enum. Attributes: Draft (int): Bounty is a draft. Active (int): Bounty is active. Dead (int): Bounty is dead. Active Python enum class that matches up with the Standard Bounties BountyStage enum. Attributes: Draft (int): Bounty is a draft. Active (int): Bounty is active. Dead (int): Bounty is dead. Dead Python enum class that matches up with the Standard Bounties BountyStage enum. Attributes: Draft (int): Bounty is a draft. Active (int): Bounty is active. Dead (int): Bounty is dead. Draft Python enum class that matches up with the Standard Bounties BountyStage enum. Attributes: Draft (int): Bounty is a draft. Active (int): Bounty is active. Dead (int): Bounty is dead. UnsupportedSchemaException UnsupportedSchemaException(self, /, *args, **kwargs) Define unsupported schema exception handling. UnsupportedRepoException UnsupportedRepoException(self, /, *args, **kwargs) Define unsupported repo exception handling. bounty_did_change bounty_did_change(bounty_id, new_bounty_details) Determine whether or not the Bounty has changed. Args: bounty_id (int): The ID of the Bounty. new_bounty_details (dict): The new Bounty raw data JSON. Returns: bool: Whether or not the Bounty has changed. QuerySet: The old bounties queryset. handle_bounty_fulfillments handle_bounty_fulfillments(fulfillments, new_bounty, old_bounty) Handle BountyFulfillment creation for new bounties. Args: fulfillments (dict): The fulfillments data dictionary. new_bounty (dashboard.models.Bounty): The new Bounty object. old_bounty (dashboard.models.Bounty): The old Bounty object. Returns: QuerySet: The BountyFulfillments queryset. create_new_bounty create_new_bounty(old_bounties, bounty_payload, bounty_details, bounty_id) Handle new Bounty creation in the event of bounty changes. Possible Bounty Stages: 0: Draft 1: Active 2: Dead Returns: dashboard.models.Bounty: The new Bounty object. process_bounty_details process_bounty_details(bounty_details) Process bounty details. Args: bounty_details (dict): The Bounty details. Raises: UnsupportedSchemaException: Exception raised if the schema is unknown or unsupported. Returns: tuple: A tuple of bounty change data. tuple[0] (bool): Whether or not the Bounty changed. tuple[1] (dashboard.models.Bounty): The first old bounty object. tuple[2] (dashboard.models.Bounty): The new Bounty object. get_bounty_data_for_activity get_bounty_data_for_activity(bounty) Get data from bounty to be saved in activity records. Args: bounty (dashboard.models.Bounty): The Bounty object. Returns: dict: The Bounty data represented as a dictionary. get_fulfillment_data_for_activity get_fulfillment_data_for_activity(fulfillment) Get data from fulfillment to be saved in activity records. Args: fulfillment (dashboard.models.BountyFulfillment): The BountyFulfillment. Returns: dict: The BountyFulfillment data represented as a dictionary. record_bounty_activity record_bounty_activity(event_name, old_bounty, new_bounty, _fulfillment=None, override_created=None) Records activity based on bounty changes Args: event_name (string): the event old_bounty (dashboard.models.Bounty): The old Bounty object. new_bounty (dashboard.models.Bounty): The new Bounty object. Raises: Exception: Log all exceptions that occur during fulfillment checks. Returns: dashboard.Activity: The Activity object if user_profile is present or None. record_user_action record_user_action(event_name, old_bounty, new_bounty) Record a user action. Args: event_name (str): The event to be recorded. old_bounty (Bounty): The old Bounty object. new_bounty (Bounty): The new Bounty object. Raises: Exception: Log all exceptions that occur during fulfillment checks. is_lowball_bounty is_lowball_bounty(bounty_value_usdt) Determine if a bounty value is less than a threshold Args: bounty_value_usdt (Decimal): The value of the bounty Returns: bool: True if bounty value is less than the threshold process_bounty_changes process_bounty_changes(old_bounty, new_bounty) Process Bounty changes. Args: old_bounty (dashboard.models.Bounty): The old Bounty object. new_bounty (dashboard.models.Bounty): The new Bounty object.","title":"Helpers"},{"location":"dashboard/models/","text":"dashboard.models Copyright (C) 2019 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Bounty_interested Bounty_interested(self, *args, **kwargs) Bounty_interested(id, bounty, interest) bounty Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. bounty_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. interest Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. interest_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. BountyInvites_bounty BountyInvites_bounty(self, *args, **kwargs) BountyInvites_bounty(id, bountyinvites, bounty) bounty Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. bounty_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. bountyinvites Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. bountyinvites_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. BountyInvites_invitee BountyInvites_invitee(self, *args, **kwargs) BountyInvites_invitee(id, bountyinvites, user) bountyinvites Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. bountyinvites_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. user Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. user_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. BountyInvites_inviter BountyInvites_inviter(self, *args, **kwargs) BountyInvites_inviter(id, bountyinvites, user) bountyinvites Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. bountyinvites_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. user Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. user_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. HackathonEvent_sponsor_profiles HackathonEvent_sponsor_profiles(self, *args, **kwargs) HackathonEvent_sponsor_profiles(id, hackathonevent, profile) hackathonevent Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. hackathonevent_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. HackathonProject_profiles HackathonProject_profiles(self, *args, **kwargs) HackathonProject_profiles(id, hackathonproject, profile) hackathonproject Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. hackathonproject_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Organization_groups Organization_groups(self, *args, **kwargs) Organization_groups(id, organization, group) group Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. group_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. organization Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. organization_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Organization_repos Organization_repos(self, *args, **kwargs) Organization_repos(id, organization, repo) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. organization Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. organization_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. repo Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. repo_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Profile_organizations_fk Profile_organizations_fk(self, *args, **kwargs) Profile_organizations_fk(id, from_profile, to_profile) from_profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. from_profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. to_profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. to_profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Profile_profile_organizations Profile_profile_organizations(self, *args, **kwargs) Profile_profile_organizations(id, profile, organization) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. organization Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. organization_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Profile_repos Profile_repos(self, *args, **kwargs) Profile_repos(id, profile, repo) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. repo Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. repo_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Tool_votes Tool_votes(self, *args, **kwargs) Tool_votes(id, tool, toolvote) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. tool Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. tool_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. toolvote Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. toolvote_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. BountyQuerySet BountyQuerySet(self, model=None, query=None, using=None, hints=None) Handle the manager queryset for Bounties. current BountyQuerySet.current(self) Filter results down to current bounties only. stats_eligible BountyQuerySet.stats_eligible(self) Exclude results that we don't want to track in statistics. exclude_by_status BountyQuerySet.exclude_by_status(self, excluded_statuses=None) Exclude results with a status matching the provided list. filter_by_status BountyQuerySet.filter_by_status(self, filtered_status=None) Filter results with a status matching the provided list. keyword BountyQuerySet.keyword(self, keyword) Filter results to all Bounty objects containing the keywords. Args: keyword (str): The keyword to search title, issue description, and issue keywords by. Returns: dashboard.models.BountyQuerySet: The QuerySet of bounties filtered by keyword. hidden BountyQuerySet.hidden(self) Filter results to only bounties that have been manually hidden by moderators. visible BountyQuerySet.visible(self) Filter results to only bounties not marked as hidden. needs_review BountyQuerySet.needs_review(self) Filter results by bounties that need reviewed. reviewed BountyQuerySet.reviewed(self) Filter results by bounties that have been reviewed. has_applicant BountyQuerySet.has_applicant(self) Filter results by bounties that have applicants. warned BountyQuerySet.warned(self) Filter results by bounties that have been warned for inactivity. escalated BountyQuerySet.escalated(self) Filter results by bounties that have been escalated for review. closed BountyQuerySet.closed(self) Filter results by bounties that have been closed on Github. not_started BountyQuerySet.not_started(self) Filter results by bounties that have not been picked up in 3+ days. has_funds BountyQuerySet.has_funds(self) Filter results by bounties that are actively funded or funds have been dispersed. Bounty Bounty(self, *args, **kwargs) Define the structure of a Bounty. Attributes: BOUNTY_TYPES (list of tuples): The valid bounty types. EXPERIENCE_LEVELS (list of tuples): The valid experience levels. PROJECT_LENGTHS (list of tuples): The possible project lengths. STATUS_CHOICES (list of tuples): The valid status stages. FUNDED_STATUSES (list of str): The list of status types considered to have retained value. OPEN_STATUSES (list of str): The list of status types considered open. CLOSED_STATUSES (list of str): The list of status types considered closed. TERMINAL_STATUSES (list of str): The list of status types considered terminal states. accepted A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. activities Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. additional_funding_summary Return a dict describing the additional funding from crowdfunding that this object has admin_mark_as_remarket_ready A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. admin_override_and_hide A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. admin_override_org_logo Just like the FileDescriptor, but for ImageFields. The only difference is assigning the width/height to the width_field/height_field, if appropriate. admin_override_org_name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. admin_override_suspend_auto_approval A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. attached_job_description A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. balance A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. BOUNTY_CATEGORIES Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. bounty_categories A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. bounty_owner_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. bounty_owner_email A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. bounty_owner_github_username A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. bounty_owner_name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. bounty_owner_profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. bounty_owner_profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. bounty_reserved_for_user Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. bounty_reserved_for_user_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. bounty_state A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. BOUNTY_STATES Built-in immutable sequence. If no argument is given, the constructor returns an empty tuple. If iterable is specified the tuple is initialized from iterable's items. If the argument is a tuple, the return value is the same object. bounty_type A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. BOUNTY_TYPES Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. bountyinvites Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. bulk_payout_tips Return the Bulk payout tips associated with this bounty. canceled_bounty_reason A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. canceled_on A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. chat_channel_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. CLOSED_STATUSES Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. contract_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. coupon_code Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. coupon_code_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. current_bounty A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. escalated Filter results by bounties that have been escalated for review. estimated_hours A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. event Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. EVENT_HANDLERS dict() -> new empty dictionary dict(mapping) -> new dictionary initialized from a mapping object's (key, value) pairs dict(iterable) -> new dictionary initialized as if via: d = {} for k, v in iterable: d[k] = v dict(**kwargs) -> new dictionary initialized with the name=value pairs in the keyword argument list. For example: dict(one=1, two=2) event_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. events Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. experience_level A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. EXPERIENCE_LEVELS Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. expires_date A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. featuring_date A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. fee_amount A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. fee_tx_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. feedbacks Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. fulfillment_accepted_on A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. fulfillment_started_on A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. fulfillment_submitted_on A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. fulfillments Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. FUNDED_STATUSES Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. funder_last_messaged_on A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. funding_organisation A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method Bounty._method(self, *, field=<django.db.models.fields.CharField: bounty_state>) _method Bounty._method(self, *, field=<django.db.models.fields.CharField: bounty_type>) _method Bounty._method(self, *, field=<django.db.models.fields.CharField: experience_level>) _method Bounty._method(self, *, field=<django.db.models.fields.CharField: idx_status>) _method Bounty._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Bounty._method(self, *, field=<django.db.models.fields.DateTimeField: expires_date>, is_next=True, **kwargs) _method Bounty._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Bounty._method(self, *, field=<django.db.models.fields.DateTimeField: web3_created>, is_next=True, **kwargs) _method Bounty._method(self, *, field=<django.db.models.fields.CharField: permission_type>) _method Bounty._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Bounty._method(self, *, field=<django.db.models.fields.DateTimeField: expires_date>, is_next=False, **kwargs) _method Bounty._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) _method Bounty._method(self, *, field=<django.db.models.fields.DateTimeField: web3_created>, is_next=False, **kwargs) _method Bounty._method(self, *, field=<django.db.models.fields.CharField: project_length>) _method Bounty._method(self, *, field=<django.db.models.fields.CharField: project_type>) _method Bounty._method(self, *, field=<django.db.models.fields.CharField: repo_type>) github_comments A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. github_issue_details A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. github_url A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. has_applicant Filter results by bounties that have applicants. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. idx_experience_level A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. idx_project_length A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. idx_status A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. interested Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. interested_comment A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. is_featured A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. is_legacy Determine if the Bounty is legacy based on sunset date. Todo: * Remove this method following legacy bounty sunsetting. Returns: bool: Whether or not the Bounty is using the legacy contract. is_open A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. is_project_type_fulfilled Determine whether or not the Project Type is currently fulfilled. Todo: * Add remaining Project Type fulfillment handling. Returns: bool: Whether or not the Bounty Project Type is fully staffed. issue_description A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. last_comment_date A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. last_remarketed A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. match_set Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. metadata A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. network A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. now Return the time now in the current timezone. num_fulfillments A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. OPEN_STATUSES Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. override_status A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. paid Return list of users paid for this bounty. past_expiration_date Return true IFF issue is past expiration date past_hard_expiration_date Return true IFF issue is past smart contract expiration date and therefore cannot ever be claimed again permission_type A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. PERMISSION_TYPES Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. privacy_preferences A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. project_bounty Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. project_length A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. PROJECT_LENGTHS Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. project_type A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. PROJECT_TYPES Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_data A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. remarketed_count A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. repo_type A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. REPO_TYPES Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. reserved_for_user_expiration A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. reserved_for_user_from A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. snooze_warnings_for_days A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. standard_bounties_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. status Determine the status of the Bounty. Raises: Exception: Catch whether or not any exception is encountered and return unknown for status. Returns: str: The status of the Bounty. STATUS_CHOICES Built-in immutable sequence. If no argument is given, the constructor returns an empty tuple. If iterable is specified the tuple is initialized from iterable's items. If the argument is a tuple, the return value is the same object. submissions_comment A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. TERMINAL_STATUSES Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. tips Return the tips associated with this bounty. title A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. title_or_desc Return the title of the issue. token_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. token_name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. token_value_in_usdt A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. token_value_time_peg A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. value_in_eth A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. value_in_token A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. value_in_usdt A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. value_in_usdt_now A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. value_true A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. warned Filter results by bounties that have been warned for inactivity. web3_created A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. web3_type A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. WORK_IN_PROGRESS_STATUSES Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. save Bounty.save(self, *args, **kwargs) Define custom handling for saving bounties. handle_event Bounty.handle_event(self, event) Handle a new BountyEvent, and potentially change state get_absolute_url Bounty.get_absolute_url(self) Get the absolute URL for the Bounty. Returns: str: The absolute URL for the Bounty. get_relative_url Bounty.get_relative_url(self, preceding_slash=True) Get the relative URL for the Bounty. Attributes: preceding_slash (bool): Whether or not to include a preceding slash. Returns: str: The relative URL for the Bounty. get_canonical_url Bounty.get_canonical_url(self) Get the canonical URL of the Bounty for SEO purposes. Returns: str: The canonical URL of the Bounty. snooze_url Bounty.snooze_url(self, num_days) Get the bounty snooze URL. Args: num_days (int): The number of days to snooze the Bounty. Returns: str: The snooze URL based on the provided number of days. approve_worker_url Bounty.approve_worker_url(self, worker) Get the bounty work approval URL. Args: worker (string): The handle to approve Returns: str: The work approve URL based on the worker name reject_worker_url Bounty.reject_worker_url(self, worker) Get the bounty work rejection URL. Args: worker (string): The handle to reject Returns: str: The work reject URL based on the worker name is_hunter Bounty.is_hunter(self, handle) Determine whether or not the profile is the bounty hunter. Args: handle (str): The profile handle to be compared. Returns: bool: Whether or not the user is the bounty hunter. is_fulfiller Bounty.is_fulfiller(self, handle) Determine whether or not the profile is the bounty is_fulfiller. Args: handle (str): The profile handle to be compared. Returns: bool: Whether or not the user is the bounty is_fulfiller. is_funder Bounty.is_funder(self, handle) Determine whether or not the profile is the bounty funder. Args: handle (str): The profile handle to be compared. Returns: bool: Whether or not the user is the bounty funder. has_started_work Bounty.has_started_work(self, handle, pending=False) Determine whether or not the profile has started work Args: handle (str): The profile handle to be compared. Returns: bool: Whether or not the user has started work. get_avatar_url Bounty.get_avatar_url(self, gitcoin_logo_flag=False) Return the local avatar URL. get_github_api_url Bounty.get_github_api_url(self) Get the Github API URL associated with the bounty. Returns: str: The Github API URL associated with the issue. fetch_issue_item Bounty.fetch_issue_item(self, item_type='body') Fetch the item type of an issue. Args: type (str): The github API response body item to be fetched. Returns: str: The item content. fetch_issue_comments Bounty.fetch_issue_comments(self, save=True) Fetch issue comments for the associated Github issue. Args: save (bool): Whether or not to save the Bounty after fetching. Returns: dict: The comments data dictionary provided by Github. action_urls Bounty.action_urls(self) Provide URLs for bounty related actions. Returns: dict: A dictionary of action URLS for this bounty. is_notification_eligible Bounty.is_notification_eligible(self, var_to_check=True) Determine whether or not a notification is eligible for transmission outside of production. Returns: bool: Whether or not the Bounty is eligible for outbound notifications. BountyEvent BountyEvent(self, *args, **kwargs) An Event taken by a user, which may change the state of a Bounty bounty Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. bounty_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. created_by Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. created_by_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. event_type A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. EVENT_TYPES Built-in immutable sequence. If no argument is given, the constructor returns an empty tuple. If iterable is specified the tuple is initialized from iterable's items. If the argument is a tuple, the return value is the same object. _method BountyEvent._method(self, *, field=<django.db.models.fields.CharField: event_type>) _method BountyEvent._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method BountyEvent._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method BountyEvent._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method BountyEvent._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. metadata A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. BountyFulfillmentQuerySet BountyFulfillmentQuerySet(self, model=None, query=None, using=None, hints=None) Handle the manager queryset for BountyFulfillments. accepted BountyFulfillmentQuerySet.accepted(self) Filter results to accepted bounty fulfillments. submitted BountyFulfillmentQuerySet.submitted(self) Exclude results that have not been submitted. BountyFulfillment BountyFulfillment(self, *args, **kwargs) The structure of a fulfillment on a Bounty. accepted A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. accepted_on A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. bounty Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. bounty_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. fulfiller_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. fulfiller_email A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. fulfiller_github_url A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. fulfiller_github_username A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. fulfiller_hours_worked A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. fulfiller_metadata A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. fulfiller_name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. fulfillment_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. funder_last_notified_on A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method BountyFulfillment._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method BountyFulfillment._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method BountyFulfillment._method(self, *, field=<django.db.models.fields.CharField: payout_status>) _method BountyFulfillment._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method BountyFulfillment._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. payout_amount A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. PAYOUT_STATUS Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. payout_status A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. payout_tx_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. to_json Define the JSON representation of BountyFulfillment. Returns: dict: A JSON representation of BountyFulfillment. token_name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. save BountyFulfillment.save(self, *args, **kwargs) Define custom handling for saving bounty fulfillments. BountySyncRequest BountySyncRequest(self, *args, **kwargs) Define the structure for bounty syncing. _method BountySyncRequest._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method BountySyncRequest._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method BountySyncRequest._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method BountySyncRequest._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) github_url A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. processed A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Subscription Subscription(self, *args, **kwargs) Subscription(id, created_on, modified_on, email, raw_data, ip) email A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method Subscription._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Subscription._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Subscription._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Subscription._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. ip A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. raw_data A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. SendCryptoAssetQuerySet SendCryptoAssetQuerySet(self, model=None, query=None, using=None, hints=None) Handle the manager queryset for SendCryptoAsset. send_success SendCryptoAssetQuerySet.send_success(self) Filter results down to successful sends only. send_pending SendCryptoAssetQuerySet.send_pending(self) Filter results down to pending sends only. send_happy_path SendCryptoAssetQuerySet.send_happy_path(self) Filter results down to pending/success sends only. send_fail SendCryptoAssetQuerySet.send_fail(self) Filter results down to failed sends only. receive_success SendCryptoAssetQuerySet.receive_success(self) Filter results down to successful receives only. receive_pending SendCryptoAssetQuerySet.receive_pending(self) Filter results down to pending receives only. receive_happy_path SendCryptoAssetQuerySet.receive_happy_path(self) Filter results down to pending receives only. receive_fail SendCryptoAssetQuerySet.receive_fail(self) Filter results down to failed receives only. SendCryptoAsset SendCryptoAsset(self, *args, **kwargs) Abstract Base Class to handle the model for both Tips and Kudos. amount A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. comments_public A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. emails A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. from_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. from_email A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. from_name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. from_username A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method SendCryptoAsset._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method SendCryptoAsset._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method SendCryptoAsset._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method SendCryptoAsset._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) _method SendCryptoAsset._method(self, *, field=<django.db.models.fields.CharField: receive_tx_status>) _method SendCryptoAsset._method(self, *, field=<django.db.models.fields.CharField: tx_status>) github_url A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. ip A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. is_for_bounty_fulfiller A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. metadata A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. network A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. primary_email A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. receive_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. receive_tx_status A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. receive_tx_time A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. receive_txid A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. received_on A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. tokenAddress A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. tokenName A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. tx_status A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. TX_STATUS_CHOICES Built-in immutable sequence. If no argument is given, the constructor returns an empty tuple. If iterable is specified the tuple is initialized from iterable's items. If the argument is a tuple, the return value is the same object. tx_time A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. txid A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. url A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. username A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. web3_type A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Meta SendCryptoAsset.Meta(self, /, *args, **kwargs) is_notification_eligible SendCryptoAsset.is_notification_eligible(self, var_to_check=True) Determine whether or not a notification is eligible for transmission outside of production. Returns: bool: Whether or not the Tip is eligible for outbound notifications. update_tx_status SendCryptoAsset.update_tx_status(self) Updates the tx status according to what infura says about the tx update_receive_tx_status SendCryptoAsset.update_receive_tx_status(self) Updates the receive tx status according to what infura says about the receive tx Tip Tip(self, *args, **kwargs) Inherit from SendCryptoAsset base class, and extra fields that are needed for Tips. activities Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. comments_priv A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. expires_date A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. fundrequest Accessor to the related object on the reverse side of a one-to-one relation. In the example:: class Restaurant(Model): place = OneToOneField(Place, related_name='restaurant') Place.restaurant is a ReverseOneToOneDescriptor instance. _method Tip._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Tip._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Tip._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Tip._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) _method Tip._method(self, *, field=<django.db.models.fields.CharField: receive_tx_status>) _method Tip._method(self, *, field=<django.db.models.fields.CharField: tx_status>) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. payouts Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. recipient_profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. recipient_profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. sender_profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. sender_profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. TipPayout TipPayout(self, *args, **kwargs) Model representing redemption of a Kudos _method TipPayout._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method TipPayout._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method TipPayout._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method TipPayout._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. tip Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. tip_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. txid A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. FundRequest FundRequest(self, *args, **kwargs) FundRequest(id, modified_on, profile, requester, token_name, amount, comments, tip, network, address, created_on) address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. amount A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. comments A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method FundRequest._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method FundRequest._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method FundRequest._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method FundRequest._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. network A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. requester Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. requester_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. tip Accessor to the related object on the forward side of a one-to-one relation. In the example:: class Restaurant(Model): place = OneToOneField(Place, related_name='restaurant') Restaurant.place is a ForwardOneToOneDescriptor instance. tip_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. token_name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. InterestQuerySet InterestQuerySet(self, model=None, query=None, using=None, hints=None) Handle the manager queryset for Interests. needs_review InterestQuerySet.needs_review(self) Filter results to Interest objects requiring review by moderators. warned InterestQuerySet.warned(self) Filter results to Interest objects that are currently in warning. Interest Interest(self, *args, **kwargs) Define relationship for profiles expressing interest on a bounty. acceptance_date A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. bounty_set Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. created A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method Interest._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Interest._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Interest._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Interest._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) _method Interest._method(self, *, field=<django.db.models.fields.CharField: status>) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. issue_message A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. pending A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. status A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. STATUS_OKAY str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. STATUS_PENDING str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. STATUS_REVIEW str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. STATUS_SNOOZED str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. STATUS_WARNED str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. WORK_STATUSES Built-in immutable sequence. If no argument is given, the constructor returns an empty tuple. If iterable is specified the tuple is initialized from iterable's items. If the argument is a tuple, the return value is the same object. mark_for_review Interest.mark_for_review(self) Flag the Interest for review by the moderation team. ActivityQuerySet ActivityQuerySet(self, model=None, query=None, using=None, hints=None) Handle the manager queryset for Activities. needs_review ActivityQuerySet.needs_review(self) Filter results to Activity objects to be reviewed by moderators. reviewed ActivityQuerySet.reviewed(self) Filter results to Activity objects to be reviewed by moderators. warned ActivityQuerySet.warned(self) Filter results to Activity objects to be reviewed by moderators. escalated_for_removal ActivityQuerySet.escalated_for_removal(self) Filter results to Activity objects to be reviewed by moderators. related_to ActivityQuerySet.related_to(self, profile) Filter results to Activity objects which are related to a particular profile. Activities related to a Profile can be defined as: - Posts created by that user - Posts that the user likes (even a comment) - Posts tipped by that user (even a comment) - Posts the user commented on Activity Activity(self, *args, **kwargs) Represent Start work/Stop work event. Attributes: ACTIVITY_TYPES (list of tuples): The valid activity types. activity_type A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. ACTIVITY_TYPES Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. bounty Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. bounty_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. cached_view_props A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. comments Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. created A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. favorite_set Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. flags Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. _method Activity._method(self, *, field=<django.db.models.fields.CharField: activity_type>) _method Activity._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Activity._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Activity._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Activity._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) grant Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. grant_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. hackathonevent Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. hackathonevent_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. hidden A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. humanized_activity_type Turn snake_case into Snake Case. Returns: str: The humanized nameactivity_type id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. kudos Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. kudos_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. kudos_transfer Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. kudos_transfer_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. likes Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. metadata A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. needs_review A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. other_profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. other_profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. project Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. project_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. subscription Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. subscription_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. tip Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. tip_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. view_count A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. point_value Activity.point_value(self) Returns: int the Point value of this activity to_dict Activity.to_dict(self, fields=None, exclude=None) Define the standard to dict representation of the object. Args: fields (list): The list of fields to include. If not provided, include all fields. If not provided, all fields are included. Defaults to: None. exclude (list): The list of fields to exclude. If not provided, no fields are excluded. Default to: None. Returns: dict: The dictionary representation of the object. LabsResearch LabsResearch(self, *args, **kwargs) Define the structure of Labs Research object. description A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method LabsResearch._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method LabsResearch._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method LabsResearch._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method LabsResearch._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. image Just like the FileDescriptor, but for ImageFields. The only difference is assigning the width/height to the width_field/height_field, if appropriate. link A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. title A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. upcoming A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. UserVerificationModel UserVerificationModel(self, *args, **kwargs) Define the checkboxes for user verification. bug_free_code A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. completed_x_bounties A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method UserVerificationModel._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method UserVerificationModel._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method UserVerificationModel._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method UserVerificationModel._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) great_communication A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. speedy_and_responsive A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. user Accessor to the related object on the forward side of a one-to-one relation. In the example:: class Restaurant(Model): place = OneToOneField(Place, related_name='restaurant') Restaurant.place is a ForwardOneToOneDescriptor instance. user_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. verified A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. BountyInvites BountyInvites(self, *args, **kwargs) Define the structure of bounty invites. bounty Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. get_bounty_invite_url Returns a unique url for each bounty and one who is inviting Returns: A unique string for each bounty _method BountyInvites._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method BountyInvites._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method BountyInvites._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method BountyInvites._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) _method BountyInvites._method(self, *, field=<django.db.models.fields.CharField: status>) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. INVITE_STATUS Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. invitee Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. inviter Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. status A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. ProfileQuerySet ProfileQuerySet(self, model=None, query=None, using=None, hints=None) Define the Profile QuerySet to be used as the objects manager. slim ProfileQuerySet.slim(self) Filter slims down whats returned from the DB to not include large fields. visible ProfileQuerySet.visible(self) Filter results to only visible profiles. hidden ProfileQuerySet.hidden(self) Filter results to only hidden profiles. Repo Repo(self, *args, **kwargs) Repo(id, created_on, modified_on, name) _method Repo._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Repo._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Repo._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Repo._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. organization_set Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. profile_set Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. Organization Organization(self, *args, **kwargs) Organization(id, created_on, modified_on, name) _method Organization._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Organization._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Organization._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Organization._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) groups Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile_set Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. repos Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. BlockedURLFilter BlockedURLFilter(self, *args, **kwargs) BlockedURLFilter(id, created_on, modified_on, expression, comment) comment A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. expression A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method BlockedURLFilter._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method BlockedURLFilter._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method BlockedURLFilter._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method BlockedURLFilter._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. HackathonRegistration HackathonRegistration(self, *args, **kwargs) Defines the Hackthon profiles registrations _method HackathonRegistration._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method HackathonRegistration._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method HackathonRegistration._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method HackathonRegistration._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) hackathon Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. hackathon_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. referer A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. registrant Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. registrant_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Profile Profile(self, *args, **kwargs) Define the structure of the user profile. TODO: * Remove all duplicate identity related information already stored on User. access_token The Github access token associated with this Profile. Returns: str: The associated Github access token. actions Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. actions_count A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. activities Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. activity_level A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. admin_override_avatar Just like the FileDescriptor, but for ImageFields. The only difference is assigning the width/height to the width_field/height_field, if appropriate. admin_override_name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. alumni Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. as_dict A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. as_representation A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. automatic_backup A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. avatar_baseavatar_related Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. average_rating A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. avg_hourly_rate A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. bounties_funded Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. bounty_requests Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. bountyrequest_set Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. bountyrequestmeta_set Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. bulk_transfer_redemptions Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. bulk_transfers Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. chat_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. comments Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. completed_bounties Returns bounties completed by user Returns: number: number of bounties completed custom_tagline A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. data A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. dominant_persona A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. donations Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. dont_autofollow_earnings A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. earnings Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. earnings_count A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. email A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. email_subscriptions Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. ens_registration Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. etc_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. events Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. faucet_requests Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. fee_percentage A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. feedbacks_got Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. feedbacks_sent Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. flags Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. follower Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. follower_count A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. following_count A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. form_submission_records A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. fulfilled Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. _method Profile._method(self, *, field=<django.db.models.fields.CharField: dominant_persona>) _method Profile._method(self, *, field=<django.db.models.fields.CharField: job_search_status>) _method Profile._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Profile._method(self, *, field=<django.db.models.fields.DateTimeField: last_calc_date>, is_next=True, **kwargs) _method Profile._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Profile._method(self, *, field=<django.db.models.fields.CharField: pref_lang_code>) _method Profile._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Profile._method(self, *, field=<django.db.models.fields.DateTimeField: last_calc_date>, is_next=False, **kwargs) _method Profile._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) get_quarterly_stats Generate last 90 days stats for this user. Returns: dict : containing the following information 'user_total_earned_eth': Total earnings of user in ETH. 'user_total_earned_usd': Total earnings of user in USD. 'user_total_funded_usd': Total value of bounties funded by the user on bounties in done status in USD 'user_total_funded_hours': Total hours input by the developers on the fulfillment of bounties created by the user in USD 'user_fulfilled_bounties_count': Total bounties fulfilled by user 'user_fufilled_bounties': bool, if the user fulfilled bounties 'user_funded_bounties_count': Total bounties funded by the user 'user_funded_bounties': bool, if the user funded bounties in the last quarter 'user_funded_bounty_developers': Unique set of users that fulfilled bounties funded by the user 'user_avg_hours_per_funded_bounty': Average hours input by developer on fulfillment per bounty 'user_avg_hourly_rate_per_funded_bounty': Average hourly rate in dollars per bounty funded by user 'user_avg_eth_earned_per_bounty': Average earning in ETH earned by user per bounty 'user_avg_usd_earned_per_bounty': Average earning in USD earned by user per bounty 'user_num_completed_bounties': Total no. of bounties completed. 'user_num_funded_fulfilled_bounties': Total bounites that were funded by the user and fulfilled 'user_bounty_completion_percentage': Percentage of bounties successfully completed by the user 'user_funded_fulfilled_percentage': Percentage of bounties funded by the user that were fulfilled 'user_active_in_last_quarter': bool, if the user was active in last quarter 'user_no_of_languages': No of languages user used while working on bounties. 'user_languages': Languages that were used in bounties that were worked on. 'relevant_bounties': a list of Bounty(s) that would match the skillset input by the user into the Match tab of their settings _method Profile._method(self, *, field=<django.db.models.fields.CharField: selected_persona>) gitcoin_chat_access_token A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. github_access_token A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. github_events Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. grant_admin Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. grant_contributor Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. grant_phantom_funding Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. grant_teams Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. grantflags Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. hackathon_registration Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. hackathonevent_set Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. handle A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. hide_profile A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. hide_wallet_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. interested Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. is_alpha_tester Determine whether or not the user is an alpha tester. Returns: bool: Whether or not the user is an alpha tester. is_moderator Determine whether or not the user is a moderator. Returns: bool: Whether or not the user is a moderator. is_org A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. is_staff Determine whether or not the user is a staff member. Returns: bool: Whether or not the user is a member of the staff. job_location A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. job_salary A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. JOB_SEARCH_STATUS Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. job_search_status A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. job_type A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. keywords A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. kudos_wallets Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. last_calc_date A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. last_sync_date A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. last_visit A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. leaderboard_ranks Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. likes Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. linkedin_url A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. longest_streak A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. match_rankings Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. matchPledges Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. max_num_issues_start_work A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. max_tip_amount_usdt_per_tx A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. max_tip_amount_usdt_per_week A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. num_repeated_relationships A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. offeractions Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. offers_created Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. org Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. org_earnings Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. organizations A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. organizations_fk Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. other_activities Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. persona_is_funder A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. persona_is_hunter A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. PERSONAS Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. portfolio_items Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. pref_lang_code A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. preferred_kudos_wallet Accessor to the related object on the forward side of a one-to-one relation. In the example:: class Restaurant(Model): place = OneToOneField(Place, related_name='restaurant') Restaurant.place is a ForwardOneToOneDescriptor instance. preferred_kudos_wallet_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. preferred_payout_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile_organizations Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. profile_set Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. profile_wallpaper A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. project_profiles Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. quest_attempts Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. quest_feedback Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. questpointawards Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. quests_created Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. rank_coder A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. rank_funder A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. rank_org A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. received_kudos Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. received_tips Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. referred Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. referrer Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. referrer_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. reliability A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. remote A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. repos Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. requests_receiver Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. requests_sender Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. reserved_bounties Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. resume The descriptor for the file attribute on the model instance. Return a FieldFile when accessed so you can write code like:: >>> from myapp.models import MyModel >>> instance = MyModel.objects.get(pk=1) >>> instance.file.size Assign a file object on assignment so you can do:: >>> with open('/path/to/hello.world', 'r') as f: ... instance.file = File(f) search_results_visible Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. selected_persona A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. sent_earnings Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. sent_kudos Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. sent_tips Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. show_job_status A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. slack_channel A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. slack_repos A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. slack_token A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. spent_count A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. sponsor_set Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. squelches Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. stats Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. success_rate A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. suppress_leaderboard A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. tip_payouts Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. token_approvals Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. token_requests Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. transfers_enabled Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. tribe_description A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. tribe_priority A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. tribes_cover_image Just like the FileDescriptor, but for ImageFields. The only difference is assigning the width/height to the width_field/height_field, if appropriate. trust_profile A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. user Accessor to the related object on the forward side of a one-to-one relation. In the example:: class Restaurant(Model): place = OneToOneField(Place, related_name='restaurant') Restaurant.place is a ForwardOneToOneDescriptor instance. user_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. viewed_by Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. viewed_profiles Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. votes Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. get_average_star_rating Profile.get_average_star_rating(self, scale=1) Returns the average star ratings (overall and individual topic) for a particular user calc_activity_level Profile.calc_activity_level(self) Determines the activity level of a user Returns: str: High, Low, Medium, or New calc_longest_streak Profile.calc_longest_streak(self) Determines the longest streak, in workdays, of this user Returns: int: a number of weekdays calc_num_repeated_relationships Profile.calc_num_repeated_relationships(self) the number of repeat relationships that this user has created Returns: int: a number of repeat relationships calc_avg_hourly_rate Profile.calc_avg_hourly_rate(self) Returns: float: the average hourly rate for this user in dollars calc_success_rate Profile.calc_success_rate(self) Returns: int; the success percentage for this users bounties as a positive integer. calc_reliability_ranking Profile.calc_reliability_ranking(self) Returns: the reliabiliyt ranking that the user has. is_github_token_valid Profile.is_github_token_valid(self) Check whether or not a Github OAuth token is valid. Args: access_token (str): The Github OAuth token. Returns: bool: Whether or not the provided OAuth token is valid. get_access_token Profile.get_access_token(self, save=True) Get the Github access token from User. Args: save (bool): Whether or not to save the User access token to the profile. Raises: Exception: The exception is raised in the event of any error and returns an empty string. Returns: str: The Github access token. get_slack_repos Profile.get_slack_repos(self, join=False) Get the profile's slack tracked repositories. Args: join (bool): Whether or not to return a joined string representation. Defaults to: False. Returns: list of str: If joined is False, a list of slack repositories. str: If joined is True, a combined string of slack repositories. update_slack_integration Profile.update_slack_integration(self, token, channel, repos) Update the profile's slack integration settings. Args: token (str): The profile's slack token. channel (str): The profile's slack channel. repos (list of str): The profile's github repositories to track. get_eth_sum Profile.get_eth_sum(self, sum_type='collected', network='mainnet', bounties=None) Get the sum of collected or funded ETH based on the provided type. Args: sum_type (str): The sum to lookup. Defaults to: collected. network (str): The network to query results for. Defaults to: mainnet. bounties (dashboard.models.BountyQuerySet): Override the BountyQuerySet this function processes. Defaults to: None. Returns: float: The total sum of all ETH of the provided type. get_all_tokens_sum Profile.get_all_tokens_sum(self, sum_type='collected', network='mainnet', bounties=None) Get the sum of collected or funded tokens based on the provided type. Args: sum_type (str): The sum to lookup. Defaults to: collected. network (str): The network to query results for. Defaults to: mainnet. bounties (dashboard.models.BountyQuerySet): Override the BountyQuerySet this function processes. Defaults to: None. Returns: query: Grouped query by token_name and sum all token value get_who_works_with Profile.get_who_works_with(self, work_type='collected', network='mainnet', bounties=None) Get an array of profiles that this user works with. Args: work_type (str): The work type to lookup. Defaults to: collected. network (str): The network to query results for. Defaults to: mainnet. bounties (dashboard.models.BountyQuerySet): Override the BountyQuerySet this function processes. Defaults to: None. Returns: dict: list of the profiles that were worked with (key) and the number of times they occurred get_funded_bounties Profile.get_funded_bounties(self, network='mainnet') Get the bounties that this user has funded Args: network (string): the network to look at. Defaults to: mainnet. Returns: queryset: list of bounties get_various_activities Profile.get_various_activities(self) Get bounty, tip and grant related activities for this profile. Args: network (str): The network to query results for. Defaults to: mainnet. Returns: (dashboard.models.ActivityQuerySet): The query results. to_dict Profile.to_dict(self) Get the dictionary representation with additional data. Attributes: params (dict): The context dictionary to be returned. network (str): The bounty network to operate on. query_kwargs (dict): The kwargs to be passed to all queries throughout the method. bounties (dashboard.models.BountyQuerySet): All bounties referencing this profile. fulfilled_bounties (dashboard.models.BountyQuerySet): All fulfilled bounties for this profile. funded_bounties (dashboard.models.BountyQuerySet): All funded bounties for this profile. orgs_bounties (dashboard.models.BountyQuerySet or None): All bounties belonging to this organization, if applicable. sum_eth_funded (float): The total amount of ETH funded. sum_eth_collected (float): The total amount of ETH collected. Returns: dict: The profile card context. post_login post_login(sender, request, user, **kwargs) Handle actions to take on user login. post_logout post_logout(sender, request, user, **kwargs) Handle actions to take on user logout. ProfileSerializer ProfileSerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Handle serializing the Profile object. Meta ProfileSerializer.Meta(self, /, *args, **kwargs) Define the profile serializer metadata. to_representation ProfileSerializer.to_representation(self, instance) Provide the serialized representation of the Profile. Args: instance (Profile): The Profile object to be serialized. Returns: dict: The serialized Profile. normalize_tip_usernames normalize_tip_usernames(sender, instance, **kwargs) Handle pre-save signals from Tips to normalize Github usernames. UserAction UserAction(self, *args, **kwargs) Records Actions that a user has taken . action A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. ACTION_TYPES Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. _method UserAction._method(self, *, field=<django.db.models.fields.CharField: action>) _method UserAction._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method UserAction._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method UserAction._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method UserAction._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. ip_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. location_data A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. metadata A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. user Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. user_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. utm A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. point_value UserAction.point_value(self) Returns: int the Point value of this user action CoinRedemption CoinRedemption(self, *args, **kwargs) Define the coin redemption schema. amount A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. coinredemptionrequest Accessor to the related object on the reverse side of a one-to-one relation. In the example:: class Restaurant(Model): place = OneToOneField(Place, related_name='restaurant') Place.restaurant is a ReverseOneToOneDescriptor instance. contract_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. expires_date A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method CoinRedemption._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method CoinRedemption._method(self, *, field=<django.db.models.fields.DateTimeField: expires_date>, is_next=True, **kwargs) _method CoinRedemption._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method CoinRedemption._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method CoinRedemption._method(self, *, field=<django.db.models.fields.DateTimeField: expires_date>, is_next=False, **kwargs) _method CoinRedemption._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. network A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. shortcode A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. token_name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. url A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. to_checksum_address to_checksum_address(sender, instance, **kwargs) Handle pre-save signals from CoinRemptions to normalize the contract address. CoinRedemptionRequest CoinRedemptionRequest(self, *args, **kwargs) Define the coin redemption request schema. coin_redemption Accessor to the related object on the forward side of a one-to-one relation. In the example:: class Restaurant(Model): place = OneToOneField(Place, related_name='restaurant') Restaurant.place is a ForwardOneToOneDescriptor instance. coin_redemption_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method CoinRedemptionRequest._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method CoinRedemptionRequest._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method CoinRedemptionRequest._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method CoinRedemptionRequest._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. ip A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. sent_on A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. txaddress A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. txid A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Tool Tool(self, *args, **kwargs) Define the Tool schema. active A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. CAT_ADVANCED str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. CAT_ALPHA str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. CAT_BASIC str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. CAT_BUILD str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. CAT_COMING_SOON str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. CAT_COMMUNITY str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. CAT_FOR_FUN str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. CAT_RETIRED str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. category A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. description A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. GAS_TOOLS str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. _method Tool._method(self, *, field=<django.db.models.fields.CharField: category>) _method Tool._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Tool._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Tool._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Tool._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. img A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. link A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. link_copy A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. new A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. stat_graph A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. TOOL_CATEGORIES Built-in immutable sequence. If no argument is given, the constructor returns an empty tuple. If iterable is specified the tuple is initialized from iterable's items. If the argument is a tuple, the return value is the same object. url_name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. votes Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. ToolVote ToolVote(self, *args, **kwargs) Define the vote placed on a tool. _method ToolVote._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method ToolVote._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method ToolVote._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method ToolVote._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. tool_set Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. value A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. TokenApproval TokenApproval(self, *args, **kwargs) A token approval. approved_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. approved_name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. coinbase A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method TokenApproval._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method TokenApproval._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method TokenApproval._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method TokenApproval._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. network A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. token_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. token_name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. tx A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. SearchHistory SearchHistory(self, *args, **kwargs) Define the structure of a Search History object. data A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method SearchHistory._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method SearchHistory._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method SearchHistory._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method SearchHistory._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. ip_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. search_type A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. user Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. user_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. BlockedUser BlockedUser(self, *args, **kwargs) Define the structure of the BlockedUser. active A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. comments A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method BlockedUser._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method BlockedUser._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method BlockedUser._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method BlockedUser._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) handle A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. user Accessor to the related object on the forward side of a one-to-one relation. In the example:: class Restaurant(Model): place = OneToOneField(Place, related_name='restaurant') Restaurant.place is a ForwardOneToOneDescriptor instance. user_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Sponsor Sponsor(self, *args, **kwargs) Defines the Hackthon Sponsor _method Sponsor._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Sponsor._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Sponsor._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Sponsor._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) hackathonevent_set Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. hackathonsponsor_set Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. logo Just like the FileDescriptor, but for ImageFields. The only difference is assigning the width/height to the width_field/height_field, if appropriate. logo_svg The descriptor for the file attribute on the model instance. Return a FieldFile when accessed so you can write code like:: >>> from myapp.models import MyModel >>> instance = MyModel.objects.get(pk=1) >>> instance.file.size Assign a file object on assignment so you can do:: >>> with open('/path/to/hello.world', 'r') as f: ... instance.file = File(f) name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. tribe Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. tribe_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. HackathonEventQuerySet HackathonEventQuerySet(self, model=None, query=None, using=None, hints=None) Handle the manager queryset for HackathonEvents. current HackathonEventQuerySet.current(self) Filter results down to current events only. upcoming HackathonEventQuerySet.upcoming(self) Filter results down to upcoming events only. finished HackathonEventQuerySet.finished(self) Filter results down to upcoming events only. HackathonEvent HackathonEvent(self, *args, **kwargs) Defines the HackathonEvent model. activities Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. background_color A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. banner Just like the FileDescriptor, but for ImageFields. The only difference is assigning the width/height to the width_field/height_field, if appropriate. bounties Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. chat_channel_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. default_channels A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. description A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. end_date A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method HackathonEvent._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method HackathonEvent._method(self, *, field=<django.db.models.fields.DateTimeField: end_date>, is_next=True, **kwargs) _method HackathonEvent._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method HackathonEvent._method(self, *, field=<django.db.models.fields.DateTimeField: start_date>, is_next=True, **kwargs) _method HackathonEvent._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method HackathonEvent._method(self, *, field=<django.db.models.fields.DateTimeField: end_date>, is_next=False, **kwargs) _method HackathonEvent._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) _method HackathonEvent._method(self, *, field=<django.db.models.fields.DateTimeField: start_date>, is_next=False, **kwargs) hackathonregistration_set Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. hackathonsponsor_set Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. identifier A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. logo Just like the FileDescriptor, but for ImageFields. The only difference is assigning the width/height to the width_field/height_field, if appropriate. logo_svg The descriptor for the file attribute on the model instance. Return a FieldFile when accessed so you can write code like:: >>> from myapp.models import MyModel >>> instance = MyModel.objects.get(pk=1) >>> instance.file.size Assign a file object on assignment so you can do:: >>> with open('/path/to/hello.world', 'r') as f: ... instance.file = File(f) name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. poll_set Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. project_event Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. quest_link A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. show_results A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. slug A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. sponsor_profiles Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. sponsors Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. start_date A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. text_color A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. unblocks_quest Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. visible A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. get_absolute_url HackathonEvent.get_absolute_url(self) Get the absolute URL for the HackathonEvent. Returns: str: The absolute URL for the HackathonEvent. get_onboard_url HackathonEvent.get_onboard_url(self) Get the absolute URL for the HackathonEvent. Returns: str: The absolute URL for the HackathonEvent. save HackathonEvent.save(self, *args, **kwargs) Define custom handling for saving HackathonEvent. HackathonSponsor HackathonSponsor(self, *args, **kwargs) HackathonSponsor(id, created_on, modified_on, hackathon, sponsor, sponsor_type, chat_channel_id) chat_channel_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method HackathonSponsor._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method HackathonSponsor._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method HackathonSponsor._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method HackathonSponsor._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) _method HackathonSponsor._method(self, *, field=<django.db.models.fields.CharField: sponsor_type>) hackathon Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. hackathon_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. sponsor Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. sponsor_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. sponsor_type A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. SPONSOR_TYPES Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. HackathonProject HackathonProject(self, *args, **kwargs) HackathonProject(id, created_on, modified_on, name, hackathon, logo, work_url, summary, bounty, badge, status, message, looking_members, chat_channel_id) badge A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. bounty Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. bounty_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. chat_channel_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method HackathonProject._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method HackathonProject._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method HackathonProject._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method HackathonProject._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) _method HackathonProject._method(self, *, field=<django.db.models.fields.CharField: status>) hackathon Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. hackathon_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. hackathon_projects Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. logo Just like the FileDescriptor, but for ImageFields. The only difference is assigning the width/height to the width_field/height_field, if appropriate. looking_members A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. message A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profiles Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. PROJECT_STATUS Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. status A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. summary A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. work_url A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. FeedbackEntry FeedbackEntry(self, *args, **kwargs) FeedbackEntry(id, created_on, modified_on, bounty, sender_profile, receiver_profile, rating, satisfaction_rating, communication_rating, speed_rating, code_quality_rating, recommendation_rating, comment, feedbackType, private) bounty Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. bounty_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. code_quality_rating A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. comment A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. communication_rating A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. feedbackType A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method FeedbackEntry._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method FeedbackEntry._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method FeedbackEntry._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method FeedbackEntry._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. private A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. rating A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. receiver_profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. receiver_profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. recommendation_rating A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. satisfaction_rating A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. sender_profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. sender_profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. speed_rating A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. visible_to FeedbackEntry.visible_to(self, user) Whether this user can see the feedback ornot Coupon Coupon(self, *args, **kwargs) Coupon(id, created_on, modified_on, code, fee_percentage, expiry_date) code A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. coupon Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. expiry_date A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. fee_percentage A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method Coupon._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Coupon._method(self, *, field=<django.db.models.fields.DateField: expiry_date>, is_next=True, **kwargs) _method Coupon._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Coupon._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Coupon._method(self, *, field=<django.db.models.fields.DateField: expiry_date>, is_next=False, **kwargs) _method Coupon._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. ProfileView ProfileView(self, *args, **kwargs) Records profileviews . _method ProfileView._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method ProfileView._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method ProfileView._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method ProfileView._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. target Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. target_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. viewer Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. viewer_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Earning Earning(self, *args, **kwargs) Records Earning - the generic object for all earnings on the platform . from_profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. from_profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method Earning._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Earning._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Earning._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Earning._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. network A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. org_profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. org_profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. source Provide a generic many-to-one relation through the content_type and object_id fields. This class also doubles as an accessor to the related object (similar to ForwardManyToOneDescriptor) by adding itself as a model attribute. source_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. source_type Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. source_type_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. to_profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. to_profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. token_name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. token_value A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. txid A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. url A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. value_usd A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. PortfolioItem PortfolioItem(self, *args, **kwargs) Define the structure of PortfolioItem object. _method PortfolioItem._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method PortfolioItem._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method PortfolioItem._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method PortfolioItem._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. link A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. tags A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. title A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. ProfileStatHistory ProfileStatHistory(self, *args, **kwargs) ProfileStatHistory - generalizable model for tracking history of a profiles info _method ProfileStatHistory._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method ProfileStatHistory._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method ProfileStatHistory._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method ProfileStatHistory._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. key A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. payload A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. TribeMember TribeMember(self, *args, **kwargs) TribeMember(id, created_on, modified_on, profile, org, leader, title, status, why) _method TribeMember._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method TribeMember._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method TribeMember._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method TribeMember._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) _method TribeMember._method(self, *, field=<django.db.models.fields.CharField: status>) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. leader A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. MEMBER_STATUS Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. org Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. org_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. status A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. title A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. why A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Poll Poll(self, *args, **kwargs) Poll(id, created_on, modified_on, title, active, hackathon) active A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method Poll._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Poll._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Poll._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Poll._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) hackathon Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. hackathon_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. question_set Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. title A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Question Question(self, *args, **kwargs) Question(id, created_on, modified_on, poll, question_type, text) answer_set Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. _method Question._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Question._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Question._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Question._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) _method Question._method(self, *, field=<django.db.models.fields.CharField: question_type>) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. option_set Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. poll Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. poll_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. question_type A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. text A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. TYPE_QUESTIONS Built-in immutable sequence. If no argument is given, the constructor returns an empty tuple. If iterable is specified the tuple is initialized from iterable's items. If the argument is a tuple, the return value is the same object. Option Option(self, *args, **kwargs) Option(id, created_on, modified_on, question, text) answer_set Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. _method Option._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Option._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Option._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Option._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. question Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. question_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. text A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Answer Answer(self, *args, **kwargs) Answer(id, created_on, modified_on, user, question, open_response, choice) choice Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. choice_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method Answer._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Answer._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Answer._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Answer._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. open_response A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. question Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. question_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. user Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. user_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed.","title":"Models"},{"location":"dashboard/notifications/","text":"dashboard.notifications Handle dashboard related notifications. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . notify_of_lowball_bounty notify_of_lowball_bounty(bounty) Send an email to founders@gitcoin.co with the lowball bounty info Args: bounty (dashboard.models.Bounty): The lowball bounty object github_org_to_twitter_tags github_org_to_twitter_tags(github_org) Build a string of github organization twitter tags. Args: github_org (str): The Github organization. Returns: str: The concatenated string of twitter tags. maybe_market_to_twitter maybe_market_to_twitter(bounty, event_name) Tweet the specified Bounty event. Args: bounty (dashboard.models.Bounty): The Bounty to be marketed. event_name (str): The name of the event. Returns: bool: Whether or not the twitter notification was sent successfully. maybe_market_to_slack maybe_market_to_slack(bounty, event_name) Send a Slack message for the specified Bounty. Args: bounty (dashboard.models.Bounty): The Bounty to be marketed. event_name (str): The name of the event. Returns: bool: Whether or not the Slack notification was sent successfully. build_message_for_integration build_message_for_integration(bounty, event_name) Build message to be posted to integrated service (e.g. slack). Args: bounty (dashboard.models.Bounty): The Bounty to be marketed. event_name (str): The name of the event. Returns: str: Message to post to slack. maybe_market_to_user_slack_helper maybe_market_to_user_slack_helper(bounty, event_name) Send a Slack message to the user's slack channel for the specified Bounty. Args: bounty (dashboard.models.Bounty): The Bounty to be marketed. event_name (str): The name of the event. Returns: bool: Whether or not the Slack notification was sent successfully. maybe_market_tip_to_email maybe_market_tip_to_email(tip, emails) Send an email for the specified Tip. Args: tip (dashboard.models.Tip): The Tip to be marketed. emails (list of str): The list of emails to notify. Returns: bool: Whether or not the email notification was sent successfully. maybe_market_tip_to_slack maybe_market_tip_to_slack(tip, event_name) Send a Slack message for the specified Tip. Args: tip (dashboard.models.Tip): The Tip to be marketed. event_name (str): The name of the event. Returns: bool: Whether or not the Slack notification was sent successfully. maybe_market_kudos_to_email maybe_market_kudos_to_email(kudos_transfer) Send an email for the specified Kudos. The general flow of this function: Decide if we are sending it Generate subject Render email Send email Do translation Args: kudos_transfer (kudos.models.KudosTransfer): The Kudos Email object to be marketed. Returns: bool: Whether or not the email notification was sent successfully. build_github_notification build_github_notification(bounty, event_name, profile_pairs=None) Build a Github comment for the specified Bounty. Args: bounty (dashboard.models.Bounty): The Bounty to be marketed. event_name (str): The name of the event. profile_pairs (list of tuples): The list of username and profile page URL tuple pairs. Returns: bool: Whether or not the Github comment was posted successfully. maybe_market_to_github maybe_market_to_github(bounty, event_name, profile_pairs=None) Post a Github comment for the specified Bounty. Args: bounty (dashboard.models.Bounty): The Bounty to be marketed. event_name (str): The name of the event. profile_pairs (list of tuples): The list of username and profile page URL tuple pairs. Returns: bool: Whether or not the Github comment was posted successfully. amount_usdt_open_work amount_usdt_open_work() Get the amount in USDT of all current open and submitted work. Returns: float: The sum of all USDT values rounded to the nearest 2 decimals. open_bounties open_bounties() Get all current open and submitted work. Returns: QuerySet: The mainnet Bounty objects which are of open and submitted work statuses. maybe_market_tip_to_github maybe_market_tip_to_github(tip) Post a Github comment for the specified Tip. Args: tip (dashboard.models.Tip): The Tip to be marketed. Returns: bool: Whether or not the Github comment was posted successfully. maybe_market_kudos_to_github maybe_market_kudos_to_github(kt) Post a Github comment for the specified Kudos. Args: kt (kudos.models.KudosTransfer): The KudosTransfer to be marketed. Returns: bool: Whether or not the Github comment was posted successfully. append_snooze_copy append_snooze_copy(bounty) Build the snooze copy for the associated Bounty. Args: bounty (dashboard.Bounty): The Bounty to create snooze copy for. Returns: str: The snooze copy for the provided bounty.","title":"Notifications"},{"location":"dashboard/router/","text":"dashboard.router Define dashboard specific DRF API routes. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . BountyFulfillmentSerializer BountyFulfillmentSerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Handle serializing the BountyFulfillment object. Meta BountyFulfillmentSerializer.Meta(self, /, *args, **kwargs) Define the bounty fulfillment serializer metadata. HackathonEventSerializer HackathonEventSerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Handle serializing the hackathon object. Meta HackathonEventSerializer.Meta(self, /, *args, **kwargs) Define the hackathon serializer metadata. KudosSerializer KudosSerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Handle serializing the Kudos object. Meta KudosSerializer.Meta(self, /, *args, **kwargs) Define the kudos serializer metadata. KudosTokenSerializer KudosTokenSerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Handle serializing the Kudos object. Meta KudosTokenSerializer.Meta(self, /, *args, **kwargs) Define the kudos serializer metadata. ActivitySerializer ActivitySerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Handle serializing the Activity object. Meta ActivitySerializer.Meta(self, /, *args, **kwargs) Define the activity serializer metadata. InterestSerializer InterestSerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Handle serializing the Interest object. Meta InterestSerializer.Meta(self, /, *args, **kwargs) Define the Interest serializer metadata. BountySerializer BountySerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Handle serializing the Bounty object. Meta BountySerializer.Meta(self, /, *args, **kwargs) Define the bounty serializer metadata. create BountySerializer.create(self, validated_data) Handle creation of m2m relationships and other custom operations. update BountySerializer.update(self, validated_data) Handle updating of m2m relationships and other custom operations. HackathonProjectSerializer HackathonProjectSerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Meta HackathonProjectSerializer.Meta(self, /, *args, **kwargs) BountySerializerSlim BountySerializerSlim(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Meta BountySerializerSlim.Meta(self, /, *args, **kwargs) Define the bounty serializer metadata. BountySerializerCheckIn BountySerializerCheckIn(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Meta BountySerializerCheckIn.Meta(self, /, *args, **kwargs) BountiesViewSet BountiesViewSet(self, **kwargs) Handle Bounties view behavior. filter_backends Built-in immutable sequence. If no argument is given, the constructor returns an empty tuple. If iterable is specified the tuple is initialized from iterable's items. If the argument is a tuple, the return value is the same object. queryset Handle the manager queryset for Bounties. BountySerializer BountiesViewSet.BountySerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Handle serializing the Bounty object. get_queryset BountiesViewSet.get_queryset(self) Get the queryset for Bounty. Returns: QuerySet: The Bounty queryset. BountiesViewSetSlim BountiesViewSetSlim(self, **kwargs) queryset Handle the manager queryset for Bounties. BountySerializerSlim BountiesViewSetSlim.BountySerializerSlim(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) BountiesViewSetCheckIn BountiesViewSetCheckIn(self, **kwargs) queryset Handle the manager queryset for Bounties. BountySerializerCheckIn BountiesViewSetCheckIn.BountySerializerCheckIn(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) BountyViewSet BountyViewSet(self, **kwargs) API response for an individual bounty by url filter_backends Built-in immutable sequence. If no argument is given, the constructor returns an empty tuple. If iterable is specified the tuple is initialized from iterable's items. If the argument is a tuple, the return value is the same object. queryset Handle the manager queryset for Bounties. BountySerializer BountyViewSet.BountySerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Handle serializing the Bounty object. get_queryset BountyViewSet.get_queryset(self) Constructs queryset for an individual bounty Returns: QuerySet: The Bounty queryset. TribesTeamSerializer TribesTeamSerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Meta TribesTeamSerializer.Meta(self, /, *args, **kwargs) BountyRequestSerializer BountyRequestSerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Meta BountyRequestSerializer.Meta(self, /, *args, **kwargs) TribesSerializer TribesSerializer(self, *args, **kwargs) Handle serializing the Profile object. Meta TribesSerializer.Meta(self, /, *args, **kwargs)","title":"API Router"},{"location":"dashboard/signals/","text":"dashboard.signals Handle dashboard related signals. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . m2m_changed_interested m2m_changed_interested(sender, instance, action, reverse, model, **kwargs) Handle changes to Bounty interests. changed_fulfillments changed_fulfillments(sender, instance, action, reverse, model, **kwargs) Handle changes to Bounty fulfillments.","title":"Signals"},{"location":"dashboard/templatetags/","text":"dashboard.templatetags.add_url_schema Define the add_url_schema template tag to allow cleaning up url in templates. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . add_url_schema add_url_schema(url) Clean the provided URL to include the scheme (http) if no scheme is present. Args: url (str): The URL to be cleaned. Usage: {{ url|clean_url }} Returns: str: The URL with the scheme attached.","title":"Template Tags"},{"location":"dashboard/tokens/","text":"dashboard.tokens Copyright (C) 2019 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ .","title":"Tokens"},{"location":"dashboard/utils/","text":"dashboard.utils Define Dashboard related utilities and miscellaneous logic. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . humanize_event_name humanize_event_name(name) Humanize an event name. Args: name (str): The event name Returns: str: The humanized representation. create_user_action create_user_action(user, action_type, request=None, metadata=None) Create a UserAction for the specified action type. Args: user (User): The User object. action_type (str): The type of action to record. request (Request): The request object. Defaults to: None. metadata (dict): Any accompanying metadata to be added. Defaults to: {}. Returns: bool: Whether or not the UserAction was created successfully. get_ipfs get_ipfs(host=None, port=5001) Establish a connection to IPFS. Args: host (str): The IPFS host to connect to. Defaults to environment variable: IPFS_HOST. The host name should be of the form 'ipfs.infura.io' and not include 'https://'. port (int): The IPFS port to connect to. Defaults to environment variable: env IPFS_API_PORT. Raises: CommunicationError: The exception is raised when there is a communication error with IPFS. Returns: ipfshttpclient.client.Client: The IPFS connection client. get_web3 get_web3(network, sockets=False) Get a Web3 session for the provided network. Attributes: network (str): The network to establish a session with. Raises: UnsupportedNetworkException: The exception is raised if the method is passed an invalid network. Returns: web3.main.Web3: A web3 instance for the provided network. get_profile_from_referral_code get_profile_from_referral_code(code) Returns a profile from the unique code Returns: A unique string for each profile get_bounty_invite_url get_bounty_invite_url(inviter, bounty_id) Returns a unique url for each bounty and one who is inviting Returns: A unique string for each bounty get_bounty_from_invite_url get_bounty_from_invite_url(invite_url) Returns a unique url for each bounty and one who is inviting Returns: A unique string for each bounty web3_process_bounty web3_process_bounty(bounty_data) Process web3 bounty data by creating new or updated Bounty objects. build_profile_pairs build_profile_pairs(bounty) Build the profile pairs list of tuples for ingestion by notifications. Args: bounty (dashboard.models.Bounty): The Bounty to build profile pairs for. Returns: list of tuples: The list of profile pair tuples. get_ordinal_repr get_ordinal_repr(num) Handle cardinal to ordinal representation of numeric values. Args: num (int): The integer to be converted from cardinal to ordinal numerals. Returns: str: The ordinal representation of the provided integer. record_user_action_on_interest record_user_action_on_interest(interest, event_name, last_heard_from_user_days) Record User actions and activity for the associated Interest. get_context get_context(ref_object=None, github_username='', user=None, confirm_time_minutes_target=4, confirm_time_slow=120, confirm_time_avg=15, confirm_time_fast=1, active='', title='', update=None) Get the context dictionary for use in view. clean_bounty_url clean_bounty_url(url) Clean the Bounty URL of unsavory characters. The primary utility of this method is to drop issuecomment blocks from Github issue URLs copy/pasted via comments. Args: url (str): The Bounty VC URL. TODO: * Deprecate this in favor of Django forms. Returns: str: The cleaned Bounty URL. profile_helper profile_helper(handle, suppress_profile_hidden_exception=False, current_user=None, disable_cache=False, full_profile=False) Define the profile helper. Args: handle (str): The profile handle. Raises: DoesNotExist: The exception is raised if a Profile isn't found matching the handle. Remediation is attempted by syncing the profile data. MultipleObjectsReturned: The exception is raised if multiple Profiles are found. The latest Profile will be returned. Returns: dashboard.models.Profile: The Profile associated with the provided handle.","title":"Utilities"},{"location":"dashboard/views/","text":"dashboard.gas_views Copyright (C) 2019 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . dashboard.tip_views Define the tip related views. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . send_tip send_tip(request) Handle the first stage of sending a tip. receive_tip_v3 receive_tip_v3(request, key, txid, network) Handle the receiving of a tip (the POST). Returns: TemplateResponse: the UI with the tip confirmed. csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. send_tip_4 send_tip_4(request) Handle the fourth stage of sending a tip (the POST). Returns: JsonResponse: response with success state. csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. tipee_address tipee_address(request, handle) Return the address, if any, that someone would like to be tipped directly at. Returns: list: The list of tipee address strings. send_tip_3 send_tip_3(request) Handle the third stage of sending a tip (the POST). Returns: JsonResponse: response with success state. csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. send_tip_2 send_tip_2(request) Handle the second stage of sending a tip. TODO: * Convert this view-based logic to a django form. Returns: JsonResponse: If submitting tip, return response with success state. TemplateResponse: Render the submission form. dashboard.views Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . record_bounty_activity record_bounty_activity(bounty, user, event_name, interest=None) Creates Activity object. Args: bounty (dashboard.models.Bounty): Bounty user (string): User name event_name (string): Event name interest (dashboard.models.Interest): Interest Raises: None Returns: None gh_login gh_login(request) Attempt to redirect the user to Github for authentication. csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. gh_org_login gh_org_login(request) Attempt to redirect the user to Github for authentication. csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. new_interest new_interest(request, bounty_id) Claim Work for a Bounty. :request method: POST Args: bounty_id (int): ID of the Bounty. Returns: dict: The success key with a boolean value and accompanying error. csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. rating_modal rating_modal(request, bounty_id, username) Rating modal. Args: pk (int): The primary key of the bounty to be rated. Raises: Http404: The exception is raised if no associated Bounty is found. Returns: TemplateResponse: The rate bounty view. rating_capture rating_capture(request) Rating capture. Args: pk (int): The primary key of the bounty to be rated. Raises: Http404: The exception is raised if no associated Bounty is found. Returns: TemplateResponse: The rate bounty capture modal. unrated_bounties unrated_bounties(request) Rating capture. Args: pk (int): The primary key of the bounty to be rated. Raises: Http404: The exception is raised if no associated Bounty is found. Returns: TemplateResponse: The rate bounty capture modal. remove_interest remove_interest(request, bounty_id) Unclaim work from the Bounty. Can only be called by someone who has started work :request method: POST post_id (int): ID of the Bounty. Returns: dict: The success key with a boolean value and accompanying error. csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. extend_expiration extend_expiration(request, bounty_id) Extend expiration of the Bounty. Can only be called by funder or staff of the bounty. :request method: POST post_id (int): ID of the Bounty. Returns: dict: The success key with a boolean value and accompanying error. csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. cancel_reason cancel_reason(request) Add Cancellation Reason for Bounty during Cancellation request method: POST Params: pk (int): ID of the Bounty. canceled_bounty_reason (string): STRING with cancel reason csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. uninterested uninterested(request, bounty_id, profile_id) Remove party from given bounty Can only be called by the bounty funder :request method: GET Args: bounty_id (int): ID of the Bounty profile_id (int): ID of the interested profile Params: slashed (str): if the user will be slashed or not Returns: dict: The success key with a boolean value and accompanying error. csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. onboard onboard(request, flow=None) Handle displaying the first time user experience flow. users_directory users_directory(request) Handle displaying users directory page. users_fetch users_fetch(request) Handle displaying users. get_user_bounties get_user_bounties(request) Get user open bounties. Args: request (int): get user by id or use authenticated. Variables: Returns: json: array of bounties. dashboard dashboard(request) Handle displaying the dashboard. ethhack ethhack(request) Handle displaying ethhack landing page. beyond_blocks_2019 beyond_blocks_2019(request) Handle displaying ethhack landing page. accept_bounty accept_bounty(request) Process the bounty. Args: pk (int): The primary key of the bounty to be accepted. Raises: Http404: The exception is raised if no associated Bounty is found. Returns: TemplateResponse: The accept bounty view. invoice invoice(request) invoice view. Args: pk (int): The primary key of the bounty to be accepted. Raises: Http404: The exception is raised if no associated Bounty is found. Returns: TemplateResponse: The invoice view. social_contribution_modal social_contribution_modal(request) Social Contributuion to the bounty. Args: pk (int): The primary key of the bounty to be accepted. Raises: Http404: The exception is raised if no associated Bounty is found. Returns: TemplateResponse: The accept bounty view. bulk_invite bulk_invite(request) Invite users with matching skills to a bounty. Args: bounty_id (int): The primary key of the bounty to be accepted. skills (string): Comma separated list of matching keywords. Raises: Http403: The exception is raised if the user is not authenticated or the args are missing. Http401: The exception is raised if the user is not a staff member. Returns: Http200: Json response with {'status': 200, 'msg': 'email_sent'}. csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. social_contribution_email social_contribution_email(request) Social Contribution Email Returns: JsonResponse: Success in sending email. csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. payout_bounty payout_bounty(request) Payout the bounty. Args: pk (int): The primary key of the bounty to be accepted. Raises: Http404: The exception is raised if no associated Bounty is found. Returns: TemplateResponse: The accept bounty view. bulk_payout_bounty bulk_payout_bounty(request) Payout the bounty. Args: pk (int): The primary key of the bounty to be accepted. Raises: Http404: The exception is raised if no associated Bounty is found. Returns: TemplateResponse: The accept bounty view. fulfill_bounty fulfill_bounty(request) Fulfill a bounty. Parameters: pk (int): The primary key of the Bounty. standard_bounties_id (int): The standard bounties ID of the Bounty. network (str): The network of the Bounty. githubUsername (str): The Github Username of the referenced user. Raises: Http404: The exception is raised if no associated Bounty is found. Returns: TemplateResponse: The fulfill bounty view. increase_bounty increase_bounty(request) Increase a bounty as the funder. Args: pk (int): The primary key of the bounty to be increased. Raises: Http404: The exception is raised if no associated Bounty is found. Returns: TemplateResponse: The increase bounty view. cancel_bounty cancel_bounty(request) Kill an expired bounty. Args: pk (int): The primary key of the bounty to be cancelled. Raises: Http404: The exception is raised if no associated Bounty is found. Returns: TemplateResponse: The cancel bounty view. bounty_invite_url bounty_invite_url(request, invitecode) Decode the bounty details and redirect to correct bounty Args: invitecode (str): Unique invite code with bounty details and handle Returns: django.template.response.TemplateResponse: The Bounty details template response. bounty_details bounty_details(request, ghuser='', ghrepo='', ghissue=0, stdbounties_id=None) Display the bounty details. Args: ghuser (str): The Github user. Defaults to an empty string. ghrepo (str): The Github repository. Defaults to an empty string. ghissue (int): The Github issue number. Defaults to: 0. Raises: Exception: The exception is raised for any exceptions in the main query block. Returns: django.template.response.TemplateResponse: The Bounty details template response. quickstart quickstart(request) Display Quickstart Guide. load_banners load_banners(request) Load profile banners profile_details profile_details(request, handle) Display profile keywords. Args: handle (str): The profile handle. user_card user_card(request, handle) Display profile keywords. Args: handle (str): The profile handle. profile_keywords profile_keywords(request, handle) Display profile details. Args: handle (str): The profile handle. profile_quests profile_quests(request, handle) Display profile quest points details. Args: handle (str): The profile handle. profile_grants profile_grants(request, handle) Display profile grant contribution details. Args: handle (str): The profile handle. profile_activity profile_activity(request, handle) Display profile activity details. Args: handle (str): The profile handle. profile_spent profile_spent(request, handle) Display profile spent details. Args: handle (str): The profile handle. profile_ratings profile_ratings(request, handle, attr) Display profile ratings details. Args: handle (str): The profile handle. profile_earnings profile_earnings(request, handle, direction='to') Display profile earnings details. Args: handle (str): The profile handle. profile_viewers profile_viewers(request, handle) Display profile viewers details. Args: handle (str): The profile handle. profile_job_opportunity profile_job_opportunity(request, handle) Save profile job opportunity. Args: handle (str): The profile handle. profile_settings profile_settings(request) Toggle profile automatic backup flag. Args: handle (str): The profile handle. profile_backup profile_backup(request) Read the profile backup data. Args: handle (str): The profile handle. profile_filter_activities profile_filter_activities(activities, activity_name, activity_tabs) A helper function to filter a ActivityQuerySet. Args: activities (ActivityQuerySet): The ActivityQuerySet. activity_name (str): The activity_type to filter. Returns: ActivityQuerySet: The filtered results. profile profile(request, handle, tab=None) Display profile details. Args: handle (str): The profile handle. Variables: context (dict): The template context to be used for template rendering. profile (dashboard.models.Profile): The Profile object to be used. status (int): The status code of the response. Returns: TemplateResponse: The profile templated view. get_quickstart_video get_quickstart_video(request) Show quickstart video. csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. extend_issue_deadline extend_issue_deadline(request) Show quickstart video. csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. sync_web3 sync_web3(request) Sync up web3 with the database. This function has a few different uses. It is typically called from the front end using the javascript sync_web3 function. The issueURL is passed in first, followed optionally by a bountydetails argument. Returns: JsonResponse: The JSON response following the web3 sync. csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. new_bounty new_bounty(request) Create a new bounty. hackathon hackathon(request, hackathon='', panel='prizes') Handle rendering of HackathonEvents. Reuses the dashboard template. get_hackathons get_hackathons(request) Handle rendering all Hackathons. board board(request) Handle the board view. funder_dashboard_bounty_info funder_dashboard_bounty_info(request, bounty_id) Per-bounty JSON data for the user dashboard funder_dashboard funder_dashboard(request, bounty_type) JSON data for the funder dashboard contributor_dashboard contributor_dashboard(request, bounty_type) JSON data for the contributor dashboard change_user_profile_banner change_user_profile_banner(request) Handle Profile Banner Uploads create_bounty_v1 create_bounty_v1(request) ETC-TODO - evaluate validity of duplicate / redundant data in models - wire in email (invite + successful creation) csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. cancel_bounty_v1 cancel_bounty_v1(request) ETC-TODO - wire in email (invite + successful cancellation) csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. fulfill_bounty_v1 fulfill_bounty_v1(request) ETC-TODO - wire in email (invite + successful fulfillment) - evalute BountyFulfillment unused fields csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. payout_bounty_v1 payout_bounty_v1(request, fulfillment_id) ETC-TODO - wire in email (invite + successful payout) { amount: , bounty_owner_address : , token_name : } csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. close_bounty_v1 close_bounty_v1(request, bounty_id) ETC-TODO - wire in email csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed.","title":"Views"},{"location":"dataviz/admin/","text":"dataviz.admin Define the data visualization related administration layout. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . GeneralAdmin GeneralAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified.","title":"Admin"},{"location":"dataviz/models/","text":"dataviz.models Define data visualization related models. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . DataPayload DataPayload(self, *args, **kwargs) Define the structure of an ExternalBounty. comments A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method DataPayload._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method DataPayload._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method DataPayload._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method DataPayload._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. key A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. payload A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. report A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed.","title":"Models"},{"location":"dataviz/views/","text":"dataviz.d3_views Define data visualization related D3 views. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . data_viz_helper_get_data_responses data_viz_helper_get_data_responses(request, visual_type) Handle visualization of the request response data based on type. Args: visual_type (str): The visualization type. TODO: * Reduce complexity of this method to pass McCabe complexity check. Returns: dict: The JSON representation of the requested visual type data. viz_spiral viz_spiral(request, key='email_open') Render a spiral graph visualization. Args: key (str): The key type to visualize. Returns: TemplateResponse: The populated spiral data visualization template. viz_chord viz_chord(request, key='bounties_paid') Render a chord graph visualization. Args: key (str): The key type to visualize. Returns: TemplateResponse: The populated chord data visualization template. viz_steamgraph viz_steamgraph(request, key='open') Render a steamgraph graph visualization. Args: key (str): The key type to visualize. Returns: TemplateResponse: The populated steamgraph data visualization template. viz_heatmap viz_heatmap(request, key='email_open', template='heatmap') Render a heatmap graph visualization. Args: key (str): The key type to visualize. Returns: JsonResponse: If data param provided, return a JSON representation of data to be graphed. TemplateResponse: If data param not provided, return the populated data visualization template. viz_index viz_index(request) Render the visualization index. Returns: TemplateResponse: The visualization index template response. viz_circles viz_circles(request, visual_type) Render a circle graph visualization. Args: visual_type (str): The visualization type. Returns: JsonResponse: If data param provided, return a JSON representation of data to be graphed. TemplateResponse: If data param not provided, return the populated data visualization template. data_viz_helper_merge_json_trees data_viz_helper_merge_json_trees(output) Handle merging the visualization data trees. Args: output (dict): The output data to be merged. Returns: dict: The merged data dictionary. data_viz_helper_get_json_output data_viz_helper_get_json_output(key, value, depth=0) Handle data visualization and build the JSON output. Args: key (str): The key to be formatted and parsed. value (float): The data value. depth (int): The depth of keys to parse. Defaults to: 0. Returns: dict: The JSON representation of the provided data. viz_sunburst viz_sunburst(request, visual_type, template='sunburst') Render a sunburst graph visualization. Args: visual_type (str): The visualization type. template (str): The template type to be used. Defaults to: sunburst. TODO: * Reduce the number of local variables in this method from 18 to 15. Returns: JsonResponse: If data param provided, return a JSON representation of data to be graphed. TemplateResponse: If data param not provided, return the populated data visualization template. viz_graph viz_graph(request, _type, template='graph') Render a graph visualization of the Gitcoin Network. TODO: * Reduce the number of local variables from 16 to 15. Returns: JsonResponse: If data param provided, return a JSON representation of data to be graphed. TemplateResponse: If data param not provided, return the populated data visualization template. viz_draggable viz_draggable(request, key='email_open') Render a draggable graph visualization. Args: key (str): The key type to visualize. Returns: TemplateResponse: The populated draggable data visualization template. mesh_network_viz mesh_network_viz(request) Render a Mesh Network visualization Args: key (str): The key type to visualize. Returns: TemplateResponse: The populated mesh data visualization template. viz_scatterplot_helper viz_scatterplot_helper(request, key='hourly_rate', template='dataviz/scatterplot.html', hide_usernames=False) Render a scatterplot visualization. Args: key (str): The key type to visualize. Returns: TemplateResponse: The populated scatterplot data visualization template. dataviz.views Define data visualization related administration views. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ .","title":"Views"},{"location":"economy/admin/","text":"economy.admin Define Economy related django administration sections. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . TokenAdmin TokenAdmin(self, model, admin_site) Define the GeneralAdmin administration layout. list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ConvRateAdmin ConvRateAdmin(self, model, admin_site) Handle displaying conversion rates in the django admin. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified.","title":"Admin"},{"location":"economy/commands/","text":"economy.management.commands.get_prices Define the management command to pull new price data for tokens. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . etherdelta etherdelta() Handle pulling market data from Etherdelta. polo polo() Handle pulling market data from Poloneix. cryptocompare cryptocompare() Handle pulling market data from CryptoCompare. Updates ConversionRates only if data not available. uniswap uniswap() Hangle pulling market data from Uniswap using its subgraph node on mainnet. Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) Define the management command to update currency conversion rates. help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. handle Command.handle(self, *args, **options) Get the latest currency rates. economy.management.commands.refresh_bounties Define the management command to refresh bounty data. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) Define the management command to refresh bounties. help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. add_arguments Command.add_arguments(self, parser) Add argument handling to the refresh command. handle Command.handle(self, *args, **options) Refresh all bounties. Attributes: all_bounties (QuerySet of Bounty): The queryset of all Bounties. fetch_remote (bool): Whether or not to fetch remote bounties. Defaults to: False unless user passes the remote option.","title":"Commands"},{"location":"economy/models/","text":"economy.models Define economy related models. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . get_time get_time() Get the local time. get_0_time get_0_time() Get the local time. SuperModel SuperModel(self, *args, **kwargs) Define the base abstract model. created_on A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method SuperModel._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method SuperModel._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method SuperModel._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method SuperModel._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) modified_on A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Meta SuperModel.Meta(self, /, *args, **kwargs) Define the model metadata. save SuperModel.save(self, update=True, *args, **kwargs) Override the SuperModel save to optionally handle modified_on logic. to_standard_dict SuperModel.to_standard_dict(self, fields=None, exclude=None, properties=None) Define the standard to dict representation of the object. Args: fields (list): The list of fields to include. If not provided, include all fields. If not provided, all fields are included. Defaults to: None. exclude (list): The list of fields to exclude. If not provided, no fields are excluded. Default to: None. Returns: dict: The dictionary representation of the object. ConversionRate ConversionRate(self, *args, **kwargs) Define the conversion rate model. from_amount A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. from_currency A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method ConversionRate._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method ConversionRate._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method ConversionRate._method(self, *, field=<django.db.models.fields.DateTimeField: timestamp>, is_next=True, **kwargs) _method ConversionRate._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method ConversionRate._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) _method ConversionRate._method(self, *, field=<django.db.models.fields.DateTimeField: timestamp>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. source A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. timestamp A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. to_amount A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. to_currency A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. reverse_conversion_rate reverse_conversion_rate(sender, instance, **kwargs) Handle the reverse conversion rate signal during post-save. Token Token(self, *args, **kwargs) Define the Token model. address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. approved A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. decimals A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method Token._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Token._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Token._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Token._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. metadata A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. network A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. priority A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. symbol A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed.","title":"Models"},{"location":"economy/utils/","text":"economy.utils Define utilities and generic logic for the economy application. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . TransactionException TransactionException(self, /, *args, **kwargs) Handle general transaction exceptions. ConversionRateNotFoundError ConversionRateNotFoundError(self, /, *args, **kwargs) Thrown if ConversionRate not found. convert_token_to_usdt convert_token_to_usdt(from_token, timestamp=None) Convert the token to USDT. Args: from_token (str): The token identifier. Returns: float: The current rate of the provided token to USDT. etherscan_link etherscan_link(txid) Build the Etherscan URL. Args: txid (str): The transaction ID. Returns: str: The Etherscan TX URL.","title":"Utilities"},{"location":"enssubdomain/admin/","text":"enssubdomain.admin Define ENS Subdomain related django administration sections. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . ENSSubdomainAdmin ENSSubdomainAdmin(self, model, admin_site) Handle displaying conversion rates in the django admin. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in immutable sequence. If no argument is given, the constructor returns an empty tuple. If iterable is specified the tuple is initialized from iterable's items. If the argument is a tuple, the return value is the same object.","title":"Admin"},{"location":"enssubdomain/commands/","text":"enssubdomain.management.commands.reprocess_txs Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. enssubdomain.management.commands.warn_when_wallet_out_of_eth Copyright (C) 2019 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'.","title":"Commands"},{"location":"enssubdomain/models/","text":"enssubdomain.models Define economy related models. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . get_time get_time() Get the local time. ENSSubdomainRegistration ENSSubdomainRegistration(self, *args, **kwargs) Define the schema for storing ENS sub-domain registration info. comments A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. end_nonce A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. gas_cost_eth A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method ENSSubdomainRegistration._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method ENSSubdomainRegistration._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method ENSSubdomainRegistration._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method ENSSubdomainRegistration._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. pending A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. signed_msg A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. start_nonce A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. subdomain_wallet_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. txn_hash_1 A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. txn_hash_2 A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. txn_hash_3 A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. reprocess ENSSubdomainRegistration.reprocess(self, gas_multiplier=1.101, override_nonce=None) Reprocess the registration request.","title":"Models"},{"location":"enssubdomain/utils/","text":"enssubdomain.utils Define the ENS subdomain utilities and miscellaneous logic. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . convert_txn convert_txn(b_txn) Convert a b'' represented string to 0x. Args: b_txn (str): The txn to be converted. Example: \"b'7bce7e4bcd2fea4d26f3d254bb8cf52b9ee8dd7353b19bfbc86803c27d9bbf39'\" Usage: convert_txn(\"b'7bce7e4bcd2fea4d26f3d254bb8cf52b9ee8dd7353b19bfbc86803c27d9bbf39'\") \"0x7bce7e4bcd2fea4d26f3d254bb8cf52b9ee8dd7353b19bfbc86803c27d9bbf39\" Returns: str: The '0x0 representation of the txn.","title":"Utilities"},{"location":"enssubdomain/views/","text":"enssubdomain.views Define the ENS subdomain views. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . get_gas_price get_gas_price(gas_multiplier=1.101) Get the recommended minimum gas price. ens_subdomain ens_subdomain(request) Register ENS Subdomain. csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed.","title":"Views"},{"location":"faucet/admin/","text":"faucet.admin Define admin related functionality for faucet. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . GeneralAdmin GeneralAdmin(self, model, admin_site) Define the Faucet specific admin handling. list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. FaucetRequestAdmin FaucetRequestAdmin(self, model, admin_site) Setup the FaucetRequest admin results display. list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. get_queryset FaucetRequestAdmin.get_queryset(self, request) Override the get_queryset method to include FK lookups. get_profile_email FaucetRequestAdmin.get_profile_email(self, obj) Get the profile email address. get_profile_handle FaucetRequestAdmin.get_profile_handle(self, obj) Get the profile handle. link FaucetRequestAdmin.link(self, instance) Handle faucet request specific links. Args: instance (FaucetRequest): The faucet request to build a link for. Returns: str: The HTML element for the faucet request link.","title":"Admin"},{"location":"faucet/models/","text":"faucet.models Define faucet related models. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . FaucetRequestManager FaucetRequestManager(self) Define the Faucet Request query manager. user FaucetRequestManager.user(self, profile) Fetch the FaucetRequests matching the provided profile. Args: profile (str): The Github username. Returns: QuerySet: The filtered FaucetRequest results. FaucetRequest FaucetRequest(self, *args, **kwargs) Define the Faucet Request model. address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. amount A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. comment A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. comment_admin A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. email A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. fulfill_date A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. fulfilled A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method FaucetRequest._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method FaucetRequest._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method FaucetRequest._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method FaucetRequest._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) github_meta A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. github_username A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. rejected A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed.","title":"Models"},{"location":"faucet/views/","text":"faucet.views Define faucet views. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . save_faucet save_faucet(request) Handle saving faucet requests. csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed.","title":"Views"},{"location":"gas/admin/","text":"gas.admin GeneralAdmin GeneralAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified.","title":"Admin"},{"location":"gas/models/","text":"gas.models Define the Gas models. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . GasProfile GasProfile(self, *args, **kwargs) Define the Gas Profile data model. gas_price A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method GasProfile._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method GasProfile._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method GasProfile._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method GasProfile._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. mean_time_to_confirm_blocks A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. mean_time_to_confirm_minutes A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. GasGuzzler GasGuzzler(self, *args, **kwargs) Define the Gas Guzzler data model. address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. gas_used A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method GasGuzzler._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method GasGuzzler._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method GasGuzzler._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method GasGuzzler._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) ID A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. pct_total A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. GasAdvisory GasAdvisory(self, *args, **kwargs) Define the Gas Advisory data model. active A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. active_until A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. body A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method GasAdvisory._method(self, *, field=<django.db.models.fields.DateTimeField: active_until>, is_next=True, **kwargs) _method GasAdvisory._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method GasAdvisory._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method GasAdvisory._method(self, *, field=<django.db.models.fields.DateTimeField: active_until>, is_next=False, **kwargs) _method GasAdvisory._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method GasAdvisory._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed.","title":"Models"},{"location":"gas/utils/","text":"gas.utils","title":"Utilities"},{"location":"git/utils/","text":"git.utils Handle miscellaneous logic and utilities. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . github_connect github_connect(token=None) Authenticate the GH wrapper with Github. Args: token (str): The Github token to authenticate with. Defaults to: None. build_auth_dict build_auth_dict(oauth_token) Collect authentication details. Args: oauth_token (str): The Github OAuth token. Returns: dict: An authentication dictionary. check_github check_github(profile) Check whether or not the provided username is present in the payload as active user. Args: profile (str): The profile username to be validated. Returns: dict: A dictionary containing status and user data. is_github_token_valid is_github_token_valid(oauth_token=None, last_validated=None) Check whether or not a Github OAuth token is valid. Args: access_token (str): The Github OAuth token. Returns: bool: Whether or not the provided OAuth token is valid. revoke_token revoke_token(oauth_token) Revoke the specified token. reset_token reset_token(oauth_token) Reset the provided token. Args: access_token (str): The Github OAuth token. Returns: str: The new Github OAuth token. get_auth_url get_auth_url(redirect_uri='/') Build the Github authorization URL. Args: redirect_uri (str): The redirect URI to be used during authentication. Attributes: github_callback (str): The local path to the Github callback view. redirect_params (dict): The redirect paramaters to URL encode. params (dict): The URL parameters to encode. auth_url (str): The URL encoded Github authentication parameters. Returns: str: The Github authentication URL. get_github_user_token get_github_user_token(code, **kwargs) Get the Github authorization token. get_github_user_data get_github_user_data(oauth_token) Get the user's github profile information. Args: oauth_token (str): The Github OAuth2 token to use for authentication. Returns: requests.Response: The Github user response. get_github_primary_email get_github_primary_email(oauth_token) Get the primary email address associated with the github profile. Args: oauth_token (str): The Github OAuth2 token to use for authentication. Returns: str: The user's primary github email address. get_github_event_emails get_github_event_emails(oauth_token, username) Get all email addresses associated with the github profile. Args: oauth_token (str): The Github OAuth2 token to use for authentication. Returns: list of str: All of the user's associated email from github. get_github_emails get_github_emails(oauth_token) Get all email addresses associated with the github profile. Args: oauth_token (str): The Github OAuth2 token to use for authentication. Returns: list of str: All of the user's associated email from git. search search(query) Search for a user on github. Args: query (str): The query text to match. Returns: request.Response: The github search response. search_user search_user(query, token=None) Search for a user on github. Args: query (str): The query text to match. token (str): The user's Github token to be used to perform the search. Returns: dict: The first matching github user dictionary. search_users search_users(query, token=None) Search for a user on github. Args: query (str): The query text to match. token (str): The user's Github token to be used to perform the search. Returns: github.PaginatedList: The pygithub paginator object of all results if many True. get_issue_comments get_issue_comments(owner, repo, issue=None, comment_id=None) Get the comments from issues on a respository. PLEASE NOTE CURRENT LIMITATION OF 100 COMMENTS. Args: owner (str): Owner of the repo repo (str): Name of the repo issue (int): Issue number (optional) Returns: requests.Response: The GitHub comments response. get_issues get_issues(owner, repo, page=1, state='open') Get the open issues on a respository. get_issue_timeline_events get_issue_timeline_events(owner, repo, issue, page=1) Get the timeline events for a given issue. PLEASE NOTE CURRENT LIMITATION OF 100 EVENTS. PLEASE NOTE GITHUB API FOR THIS IS SUBJECT TO CHANGE. (See https://developer.github.com/changes/2016-05-23-timeline-preview-api/ for more info.) Args: owner (str): Owner of the repo repo (str): Name of the repo issue (int): Issue number Returns: requests.Response: The GitHub timeline response. get_organization get_organization(org, sub_path='', auth=None) Get the github organization details. get_repo get_repo(repo_full_name, sub_path='', auth=None, is_user=False) Get the github repo details. get_notifications get_notifications() Get the github notifications. get_gh_notifications get_gh_notifications(login=None) Get the Github notifications for Gitcoin Bot. post_issue_comment post_issue_comment(owner, repo, issue_num, comment) Post a comment on an issue. patch_issue_comment patch_issue_comment(comment_id, owner, repo, comment) Update a comment on an issue via patch. delete_issue_comment delete_issue_comment(comment_id, owner, repo) Remove a comment on an issue via delete. post_issue_comment_reaction post_issue_comment_reaction(owner, repo, comment_id, content) React to an issue comment. get_url_dict get_url_dict(issue_url) Get the URL dictionary with specific data we care about. Args: issue_url (str): The Github issue URL. Raises: IndexError: The exception is raised if accessing a necessary index fails. Returns: dict: A mapping of details for the specified issue URL. repo_url repo_url(issue_url) Build the repository URL. Args: issue_url (str): The Github issue URL. Returns: str: The repository URL. org_name org_name(issue_url) Get the organization name from an issue URL. Args: issue_url (str): The Github issue URL. Returns: str: The Github organization name. repo_name repo_name(issue_url) Get the repo name from an issue URL. Args: issue_url (str): The Github issue URL. Returns: str: The Github repo name. issue_number issue_number(issue_url) Get the issue_number from an issue URL. Args: issue_url (str): The Github issue URL. Returns: str: The Github issue_number get_current_ratelimit get_current_ratelimit(token=None) Get the current Github API ratelimit for the provided token.","title":"Utilities"},{"location":"gitcoinbot/actions/","text":"gitcoinbot.actions Define the Gitcoin Bot action methods for interacting with the Github API as a Github App. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Bound Bound(self, *args) Validate every bound before call the annotated function. amount_greater_than_zero amount_greater_than_zero(*args, **kwargs) Validate if the specified amount is not negative and greater than zero. no_active_bounty no_active_bounty(owner, repo, issue_id) Instructions to create a bounty. parse_comment_currency parse_comment_currency(comment_text, fallback_currency='ETH') Get the first token defined in comment_text. start_work_text start_work_text(owner, repo, issue_id) Instructions to start work on current bounty. submit_work_text submit_work_text(owner, repo, issue_id) Return the instruction to submit the work associated to the bounty. submit_work_or_new_bounty_text submit_work_or_new_bounty_text(owner, repo, issue_id) Submit work if the bounty exists else show instructions to create one. get_text_from_query_responses get_text_from_query_responses(comment_text, sender) Based on comment_text an assigned response is returned.","title":"Actions"},{"location":"gitcoinbot/admin/","text":"gitcoinbot.admin Define Gitcoin Bot specific models. GitcoinBotResponsesAdmin GitcoinBotResponsesAdmin(self, model, admin_site) Define the Gitcoin Bot response admin model for displaying bot request data. fields Built-in immutable sequence. If no argument is given, the constructor returns an empty tuple. If iterable is specified the tuple is initialized from iterable's items. If the argument is a tuple, the return value is the same object. list_display Built-in immutable sequence. If no argument is given, the constructor returns an empty tuple. If iterable is specified the tuple is initialized from iterable's items. If the argument is a tuple, the return value is the same object.","title":"Admin"},{"location":"gitcoinbot/models/","text":"gitcoinbot.models Define Gitcoin Bot specific models. GitcoinBotResponses GitcoinBotResponses(self, *args, **kwargs) Define the Gitcoin Bot response model for recording bot request data. _method GitcoinBotResponses._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method GitcoinBotResponses._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method GitcoinBotResponses._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method GitcoinBotResponses._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. request A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. response A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed.","title":"Models"},{"location":"gitcoinbot/views/","text":"gitcoinbot.views Define the Gitcoin Bot views. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . payload payload(request) Handle the Github bot payload. Parse request.body bytes from github into json, retrieve relevant info and respond with appropriate message from gitcoinbot actions. Returns: HttpResponse: The confirmation of Github payload acceptance. csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed.","title":"Views"},{"location":"grants/abi/","text":"grants.abi Define the Grant ABI. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ .","title":"ABI"},{"location":"grants/admin/","text":"grants.admin Define the Grant admin layout. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . GeneralAdmin GeneralAdmin(self, model, admin_site) Define the GeneralAdmin administration layout. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. FlagAdmin FlagAdmin(self, model, admin_site) Define the FlagAdmin administration layout. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. MatchPledgeAdmin MatchPledgeAdmin(self, model, admin_site) Define the MatchPledge administration layout. list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. CLRMatchAdmin CLRMatchAdmin(self, model, admin_site) Define the CLRMatch administration layout. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. GrantAdmin GrantAdmin(self, model, admin_site) Define the Grant administration layout. fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. logo_svg_asset GrantAdmin.logo_svg_asset(self, instance) Define the logo SVG tag to be displayed in the admin. logo_asset GrantAdmin.logo_asset(self, instance) Define the logo image tag to be displayed in the admin. subscriptions_links GrantAdmin.subscriptions_links(self, instance) Define the logo image tag to be displayed in the admin. contributions_links GrantAdmin.contributions_links(self, instance) Define the logo image tag to be displayed in the admin. SubscriptionAdmin SubscriptionAdmin(self, model, admin_site) Define the Subscription administration layout. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. contributions_links SubscriptionAdmin.contributions_links(self, instance) Define the logo image tag to be displayed in the admin. ContributionAdmin ContributionAdmin(self, model, admin_site) Define the Contribution administration layout. list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. PhantomFundingAdmin PhantomFundingAdmin(self, model, admin_site) Define the GeneralAdmin administration layout. list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified.","title":"Admin"},{"location":"grants/commands/","text":"grants.management.commands.subminer Define the Grant subminer management command. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'.","title":"Commands"},{"location":"grants/forms/","text":"grants.forms Define the Grant forms. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . GrantForm GrantForm(self, data=None, files=None, auto_id='id_%s', prefix=None, initial=None, error_class=<class 'django.forms.utils.ErrorList'>, label_suffix=None, empty_permitted=False, instance=None, use_required_attribute=None, renderer=None) Define the Grant form logic. base_fields Dictionary that remembers insertion order declared_fields Dictionary that remembers insertion order Meta GrantForm.Meta(self, /, *args, **kwargs) Define the metadata for the Grant model form.","title":"Forms"},{"location":"grants/models/","text":"grants.models Define the Grant models. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Grant_categories Grant_categories(self, *args, **kwargs) Grant_categories(id, grant, grantcategory) grant Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. grant_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. grantcategory Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. grantcategory_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Grant_team_members Grant_team_members(self, *args, **kwargs) Grant_team_members(id, grant, profile) grant Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. grant_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. GrantQuerySet GrantQuerySet(self, model=None, query=None, using=None, hints=None) Define the Grant default queryset and manager. active GrantQuerySet.active(self) Filter results down to active grants only. inactive GrantQuerySet.inactive(self) Filter results down to inactive grants only. keyword GrantQuerySet.keyword(self, keyword) Filter results to all Grant objects containing the keywords. Args: keyword (str): The keyword to search title, description, and reference URL by. Returns: dashboard.models.GrantQuerySet: The QuerySet of grants filtered by keyword. GrantCategory GrantCategory(self, *args, **kwargs) GrantCategory(id, created_on, modified_on, category) category A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method GrantCategory._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method GrantCategory._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method GrantCategory._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method GrantCategory._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) grant_set Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Grant Grant(self, *args, **kwargs) Define the structure of a Grant. abi Return grants abi. active A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. activeSubscriptions A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. activities Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. admin_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. admin_profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. admin_profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. amount_received A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. amount_received_in_round A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. amount_received_with_phantom_funds A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. backup_clr_prediction_curve A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. cancel_tx_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. categories Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. clr_matches Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. clr_matching A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. clr_prediction_curve A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. contract Return grants contract. contract_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. contract_owner_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. contract_version A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. contribution_count A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. contributor_count A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. defer_clr_to Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. defer_clr_to_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. defered_clr_from Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. deploy_tx_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. description A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. description_rich A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. flags Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. _method Grant._method(self, *, field=<django.db.models.fields.CharField: grant_type>) _method Grant._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Grant._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Grant._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Grant._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) grant_set Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. grant_type A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. GRANT_TYPES Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. hidden A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. image_css A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. last_clr_calc_date A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. link_to_new_grant Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. link_to_new_grant_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. logo Just like the FileDescriptor, but for ImageFields. The only difference is assigning the width/height to the width_field/height_field, if appropriate. logo_svg The descriptor for the file attribute on the model instance. Return a FieldFile when accessed so you can write code like:: >>> from myapp.models import MyModel >>> instance = MyModel.objects.get(pk=1) >>> instance.file.size Assign a file object on assignment so you can do:: >>> with open('/path/to/hello.world', 'r') as f: ... instance.file = File(f) metadata A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. monthly_amount_subscribed A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. negative_round_contributor_count A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. network A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. next_clr_calc_date A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. phantom_funding Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. positive_round_contributor_count A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. reference_url A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. required_gas_price A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. slug A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. subscriptions Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. team_members Accessor to the related objects manager on the forward and reverse sides of a many-to-many relation. In the example:: class Pizza(Model): toppings = ManyToManyField(Topping, related_name='pizzas') Pizza.toppings and Topping.pizzas are ManyToManyDescriptor instances. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. title A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. token_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. token_symbol A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. twitter_handle_1 A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. twitter_handle_1_follower_count A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. twitter_handle_2 A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. twitter_handle_2_follower_count A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. url Return grants url. weighted_shuffle A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. updateActiveSubscriptions Grant.updateActiveSubscriptions(self) updates the active subscriptions list SubscriptionQuerySet SubscriptionQuerySet(self, model=None, query=None, using=None, hints=None) Define the Subscription default queryset and manager. Subscription Subscription(self, *args, **kwargs) Define the structure of a subscription agreement. active A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. activities Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. amount_per_period A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. amount_per_period_usdt A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. cancel_tx_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. comments A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. contributor_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. contributor_profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. contributor_profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. contributor_signature A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. donations Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. end_approve_tx_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. error A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. frequency A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. frequency_unit A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. gas_price A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method Subscription._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Subscription._method(self, *, field=<django.db.models.fields.DateTimeField: last_contribution_date>, is_next=True, **kwargs) _method Subscription._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Subscription._method(self, *, field=<django.db.models.fields.DateTimeField: next_contribution_date>, is_next=True, **kwargs) _method Subscription._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Subscription._method(self, *, field=<django.db.models.fields.DateTimeField: last_contribution_date>, is_next=False, **kwargs) _method Subscription._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) _method Subscription._method(self, *, field=<django.db.models.fields.DateTimeField: next_contribution_date>, is_next=False, **kwargs) grant Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. grant_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. is_postive_vote A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. last_contribution_date A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. network A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. new_approve_tx_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. next_contribution_date A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. num_tx_approved A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. num_tx_processed A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. real_period_seconds A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. split_tx_confirmed A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. split_tx_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. status Return grants status, current or past due. subminer_comments A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. subscription_contribution Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. subscription_hash A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. token_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. token_symbol A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. get_debug_info Subscription.get_debug_info(self) Return grants contract. get_is_ready_to_be_processed_from_db Subscription.get_is_ready_to_be_processed_from_db(self) Return true if subscription is ready to be processed according to the DB. get_is_subscription_ready_from_web3 Subscription.get_is_subscription_ready_from_web3(self) Return true if subscription is ready to be processed according to web3. get_check_success_web3 Subscription.get_check_success_web3(self) Check the return value of the previous function. Returns true if the previous function. do_cancel_subscription_via_web3 Subscription.do_cancel_subscription_via_web3(self, minutes_to_confirm_within=1) .Cancels the subscripion on the blockchain do_execute_subscription_via_web3 Subscription.do_execute_subscription_via_web3(self, minutes_to_confirm_within=1) .Executes the subscription on the blockchain helper_tx_dict Subscription.helper_tx_dict(self, minutes_to_confirm_within=1) returns a dict like this: {'to': '0xd3cda913deb6f67967b99d67acdfa1712c293601', 'from': web3.eth.coinbase, 'value': 12345} get_is_active_from_web3 Subscription.get_is_active_from_web3(self) Return true if subscription is active according to web3. get_subscription_signer_from_web3 Subscription.get_subscription_signer_from_web3(self) Return subscription signer. get_subscription_hash_arguments Subscription.get_subscription_hash_arguments(self) Get the grant subscription hash from web3. Attributes: from (str): Subscription.contributor_address to (str): Grant.admin_address tokenAddress (str): Subscription.token_address tokenAmount (float): Subscription.amount_per_period periodSeconds (int): real_period_seconds in the Subscription model gasPrice (float): Subscription.gas_price nonce (int): The nonce is stored in the Contribution model. its created / managed by sync_geth signature (str): Subscription.contributor_signature Returns: str: The Subscription hash. get_hash_from_web3 Subscription.get_hash_from_web3(self) Returns the grants subscription hash (has to get it from web3). successful_contribution Subscription.successful_contribution(self, tx_id) Create a contribution object. DonationQuerySet DonationQuerySet(self, model=None, query=None, using=None, hints=None) Define the Contribution default queryset and manager. Flag Flag(self, *args, **kwargs) Flag(id, created_on, modified_on, grant, profile, comments, processed, comments_admin, tweet) comments A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. comments_admin A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method Flag._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Flag._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Flag._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Flag._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) grant Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. grant_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. processed A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. tweet A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Donation Donation(self, *args, **kwargs) Define the structure of an optional donation. These donations are additional funds sent to Gitcoin as part of contributing or subscribing to a grant. contribution Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. contribution_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. donation_percentage A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. from_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method Donation._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Donation._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Donation._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Donation._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. network A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. subscription Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. subscription_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. to_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. token_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. token_amount A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. token_amount_usdt A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. token_symbol A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. tx_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. ContributionQuerySet ContributionQuerySet(self, model=None, query=None, using=None, hints=None) Define the Contribution default queryset and manager. Contribution Contribution(self, *args, **kwargs) Define the structure of a subscription agreement. clr_match_payouts Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. donation Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. _method Contribution._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Contribution._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Contribution._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Contribution._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. is_first_in_sequence returns true only IFF a contribution is the first in a sequence of subscriptions. match A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. normalized_data A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. originated_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. split_tx_confirmed A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. split_tx_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. subscription Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. subscription_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. success A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. test_clr_match_payouts Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. tx_cleared A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. tx_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. tx_override A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. validator_comment A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. validator_passed A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. identity_identifier Contribution.identity_identifier(self, mechanism) Returns the anti sybil identity identiifer for this grant, according to mechanism. update_tx_status Contribution.update_tx_status(self) Updates tx status. next_month next_month() Get the next month time. CLRMatch CLRMatch(self, *args, **kwargs) Define the structure of a CLR Match amount. amount A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. comments A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method CLRMatch._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method CLRMatch._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method CLRMatch._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method CLRMatch._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) grant Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. grant_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. payout_contribution Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. payout_contribution_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. payout_tx A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. payout_tx_date A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. ready_for_payout A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. ready_for_test_payout A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. round_number A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. test_payout_contribution Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. test_payout_contribution_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. test_payout_tx A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. test_payout_tx_date A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. MatchPledge MatchPledge(self, *args, **kwargs) Define the structure of a MatchingPledge. active A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. amount A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. comments A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. data A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. end_date A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method MatchPledge._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method MatchPledge._method(self, *, field=<django.db.models.fields.DateTimeField: end_date>, is_next=True, **kwargs) _method MatchPledge._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method MatchPledge._method(self, *, field=<django.db.models.fields.CharField: pledge_type>) _method MatchPledge._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method MatchPledge._method(self, *, field=<django.db.models.fields.DateTimeField: end_date>, is_next=False, **kwargs) _method MatchPledge._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. pledge_type A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. PLEDGE_TYPES Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. PhantomFunding PhantomFunding(self, *args, **kwargs) Define the structure of a PhantomFunding object. For Grants, we have a fund we\u2019re contributing on their behalf. just having a quick button they can push saves all the hassle of (1) asking them their wallet, (2) sending them the DAI (3) contributing it. _method PhantomFunding._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method PhantomFunding._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method PhantomFunding._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method PhantomFunding._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) grant Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. grant_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. round_number A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed.","title":"Models"},{"location":"grants/router/","text":"grants.router SubscriptionViewSet SubscriptionViewSet(self, **kwargs) Handle the Subscription API view behavior. filter_backends Built-in immutable sequence. If no argument is given, the constructor returns an empty tuple. If iterable is specified the tuple is initialized from iterable's items. If the argument is a tuple, the return value is the same object. queryset Represent a lazy database lookup for a set of objects. get_queryset SubscriptionViewSet.get_queryset(self) Get the queryset for Subscription. TODO: * Add filter functionality. Returns: QuerySet: The Subscription queryset. SubscriptionSerializer SubscriptionViewSet.SubscriptionSerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Handle serializing the Subscription object. GrantViewSet GrantViewSet(self, **kwargs) Handle the Grant API view behavior. filter_backends Built-in immutable sequence. If no argument is given, the constructor returns an empty tuple. If iterable is specified the tuple is initialized from iterable's items. If the argument is a tuple, the return value is the same object. queryset Define the Grant default queryset and manager. GrantSerializer GrantViewSet.GrantSerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Handle serializing the Grant object. get_queryset GrantViewSet.get_queryset(self) Get the queryset for Grant. TODO: * Add additional filters. Returns: QuerySet: The Grant queryset.","title":"Router"},{"location":"grants/serializers/","text":"grants.serializers GrantSerializer GrantSerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Handle serializing the Grant object. Meta GrantSerializer.Meta(self, /, *args, **kwargs) Define the grant serializer metadata. SubscriptionSerializer SubscriptionSerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Handle serializing the Subscription object. Meta SubscriptionSerializer.Meta(self, /, *args, **kwargs) Define the subscription serializer metadata. ContributionSerializer ContributionSerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Handle serializing the Contribution object. Meta ContributionSerializer.Meta(self, /, *args, **kwargs) Define the contribution serializer metadata.","title":"Serializers"},{"location":"grants/templatetags/","text":"grants.templatetags.grants_extra Define the add_url_schema template tag to allow cleaning up url in templates. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . addstr addstr(value, arg) Concats argument to string. Args: value (str): Original string arg (str): String to be concated Usage: {{ value|addstr(arg) }} Returns: str: The concatenated string. modulo modulo(num, val) Get the modulo of the provided number and value. Args: num (int): Something describing the number. val (int): Something describing the value. Usage: {{ num|modulo(val) }} Returns: int: The modulo of number and value.","title":"Template Tags"},{"location":"grants/utils/","text":"grants.utils Define the Grant utilities. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . is_grant_team_member is_grant_team_member(grant, profile) Checks to see if profile is a grant team member Args: grant (grants.models.Grant): The grant in question. profile (dashboard.models.Profile): The current user's profile.","title":"Utilities"},{"location":"grants/views/","text":"grants.views Define the Grant views. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . get_keywords get_keywords() Get all Keywords. grants grants(request) Handle grants explorer. grant_details grant_details(request, grant_id, grant_slug) Display the Grant details page. csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. grant_new grant_new(request) Handle new grant. grant_new_v0 grant_new_v0(request) Create a v0 version of a grant contract. grant_fund grant_fund(request, grant_id, grant_slug) Handle grant funding. subscription_cancel subscription_cancel(request, grant_id, grant_slug, subscription_id) Handle the cancellation of a grant subscription. profile profile(request) Show grants profile of logged in user. quickstart quickstart(request) Display quickstart guide. leaderboard leaderboard(request) Display leaderboard. record_subscription_activity_helper record_subscription_activity_helper(activity_type, subscription, profile) Registers a new activity concerning a grant subscription Args: activity_type (str): The type of activity, as defined in dashboard.models.Activity. subscription (grants.models.Subscription): The subscription in question. profile (dashboard.models.Profile): The current user's profile. record_grant_activity_helper record_grant_activity_helper(activity_type, grant, profile, amount=None, token=None) Registers a new activity concerning a grant Args: activity_type (str): The type of activity, as defined in dashboard.models.Activity. grant (grants.models.Grant): The grant in question. profile (dashboard.models.Profile): The current user's profile. predict_clr_v1 predict_clr_v1(request, grant_id) { amount: , is_postive_vote: +, - } csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed.","title":"Views"},{"location":"healthcheck/healthchecks/","text":"healthcheck.healthchecks Define custom healthchecks. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . DefaultIPFSBackend DefaultIPFSBackend(self) Define the IPFS healthcheck backend. critical_service bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. check_status DefaultIPFSBackend.check_status(self) Define the functionality of the health check. identifier DefaultIPFSBackend.identifier(self) Define the displayed name of the healthcheck. InfuraIPFSBackend InfuraIPFSBackend(self) Define the IPFS healthcheck backend. critical_service bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. check_status InfuraIPFSBackend.check_status(self) Define the functionality of the health check. identifier InfuraIPFSBackend.identifier(self) Define the displayed name of the healthcheck. GithubRateLimiting GithubRateLimiting(self) Define the Github ratelimiting healthcheck backend. critical_service bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. check_status GithubRateLimiting.check_status(self) Define the functionality of the health check. identifier GithubRateLimiting.identifier(self) Define the displayed name of the healthcheck.","title":"Healthchecks"},{"location":"kudos/admin/","text":"kudos.admin Define Admin views. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . GeneralAdmin GeneralAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. TokenRequestAdmin TokenRequestAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. TransferEnabledForAdmin TransferEnabledForAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. BulkTransferCouponAdmin BulkTransferCouponAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. BulkTransferRedemptionAdmin BulkTransferRedemptionAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. TokenAdmin TokenAdmin(self, model, admin_site) ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. TransferAdmin TransferAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified.","title":"Admin"},{"location":"kudos/forms/","text":"kudos.forms Define Forms. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . KudosSearchForm KudosSearchForm(self, data=None, files=None, auto_id='id_%s', prefix=None, initial=None, error_class=<class 'django.forms.utils.ErrorList'>, label_suffix=None, empty_permitted=False, field_order=None, use_required_attribute=None, renderer=None) Form template for kudos search. Attributes: kudos_search (form): Use for kudos search GET request. base_fields Dictionary that remembers insertion order declared_fields Dictionary that remembers insertion order","title":"Forms"},{"location":"kudos/helpers/","text":"kudos.helpers Define helper functions. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . get_token get_token(token_id, network, address) Helper to find the kudos.Token primary key, given the contract address and token_id fields. This function was created so that we can find the kudos token pk, only know the contract and token_id from the blockchain. This is useful when linking to gitcoin from outside sites such as Open Sea. Args: token_id (int): The token_id field in the database (from blockchain) network (str): The ethereum network address (str): Contract address for this token (from blockchain) Returns: obj or None: Return Django object if found, else None. reconcile_kudos_preferred_wallet reconcile_kudos_preferred_wallet(profile) DEPRECATED. Helper function to set the kudos_preferred_wallet if it doesn't already exist Args: profile (TYPE): Description Returns: str: Profile wallet address.","title":"Helpers"},{"location":"kudos/models/","text":"kudos.models Define models. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . TokenQuerySet TokenQuerySet(self, model=None, query=None, using=None, hints=None) Handle the manager queryset for Tokens. visible TokenQuerySet.visible(self) Filter results down to visible tokens only. keyword TokenQuerySet.keyword(self, keyword) Filter results to all Token objects containing the keywords. Args: keyword (str): The keyword to search title, issue description, and issue keywords by. Returns: kudos.models.TokenQuerySet: The QuerySet of tokens filtered by keyword. Token Token(self, *args, **kwargs) Model representing a Kudos ERC721 token on the blockchain. The model attempts to match the actual blockchain data as much as possible, without being duplicative. Attributes: artist (str): The artist that created the kudos image. background_color (str): 6 digit hex code background color. See Open Sea docs for details. cloned_from_id (int): Orignal Kudos that this one was cloned from. contract (FK): Foreing key to the Contract model. description (str): Description of the kudos. external_url (str): External URL pointer to image asset. See Open Sea docs for details. image (str): Image file name. name (str): Kudos name. num_clones_allowed (int): How many clones are allowed to be made. num_clones_available (int): How many clones the Kudos has left. num_clones_in_wild (int): How many clones there are in the wild. owner_address (str): ETH address of the owner. Pulled from the ownerOf contract function. platform (str): Where the Kudos originated from. price_finney (int): Price to clone the Kudos in finney. rarity (str): Rarity metric, defined in kudos.utils.py tags (str): Comma delimited tags. TODO: change to array token_id (int): the token_id on the blockchain. txid (str): The ethereum transaction id that generated this kudos. activities Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. artist A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. as_img Convert the provided buffer to another format. Args: obj (File): The File/ContentFile object. Exceptions: Exception: Cowardly catch blanket exceptions here, log it, and return None. Returns: BytesIO: The BytesIO stream containing the converted File data. None: If there is an exception, the method returns None. background_color A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. bulk_transfers Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. capitalized_name Capitalize name Returns: str: Capitalized name. cloned_from_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. contract Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. contract_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. description A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. external_url A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method Token._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Token._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Token._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Token._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) hidden A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. hidden_token_details_page A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. humanized_name Turn snake_case into Snake Case. Returns: str: The humanized name. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. image A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. kudos_token_cloned_from Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. kudos_transfer Accessor to the related object on the reverse side of a one-to-one relation. In the example:: class Restaurant(Model): place = OneToOneField(Place, related_name='restaurant') Place.restaurant is a ReverseOneToOneDescriptor instance. name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. num_clones_allowed A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. num_clones_available Calculate the number of clones available for a kudos. Returns: int: Number of clones available. num_clones_available_counting_indirect_send A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. num_clones_in_wild A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. offers Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. override_display_name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. owner_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. owners_handles . differs from owners_profiles in that not everyone who has received a kudos has a profile Returns: array: array of handles owners_profiles . Returns: array: QuerySet of Profiles platform A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. popularity A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. popularity_month A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. popularity_quarter A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. popularity_week A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. preview_img_mode A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. price_finney A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. price_in_eth Convert price from finney to eth. Returns: float or int: price in eth. price_in_gwei Convert price from finney to gwei. Returns: float or int: price in gwei. price_in_wei Convert price from finney to wei. Returns: float or int: price in wei. quests_reward Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. rarity A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. send_enabled_for_non_gitcoin_admins A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. shortened_address Shorten ethereum address to only the first and last 4 digits. Returns: str: shortened address. suppress_sync A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. tags A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. token_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. transfers_enabled Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. txid A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. get_relative_url Token.get_relative_url(self) Get the relative URL for the Bounty. Attributes: preceding_slash (bool): Whether or not to include a preceding slash. Returns: str: The relative URL for the Bounty. send_enabled_for Token.send_enabled_for(self, user) Arguments: - user: a django user object Returns: bool: Wehther a send should be enabled for this user KudosTransfer KudosTransfer(self, *args, **kwargs) Model that represents a request to clone a Kudos. Typically this gets created when using the \"kudos send\" functionality. The model is inherited from the SendCryptoAsset model, which is also used by Tips. Attributes: from_address (str): Eth address of the person that is sending the kudos. kudos_token (kudos.Token): Foreign key to the kudos_token that was cloned. This is filled in after the kudos has been cloned. kudos_token_cloned_from (kudos.Token): Foreign key to the kudos_token that will be cloned and sent. recipient_profile (dashboard.Profile): Foreign key to the profile of the person that is being sent the kudos. sender_profile (dashboard.Profile): Foreign key to the profile of the person that is sending the kudos. activities Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. bulk_transfer_redemptions Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. _method KudosTransfer._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method KudosTransfer._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method KudosTransfer._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method KudosTransfer._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) _method KudosTransfer._method(self, *, field=<django.db.models.fields.CharField: receive_tx_status>) _method KudosTransfer._method(self, *, field=<django.db.models.fields.CharField: tx_status>) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. kudos_token Accessor to the related object on the forward side of a one-to-one relation. In the example:: class Restaurant(Model): place = OneToOneField(Place, related_name='restaurant') Restaurant.place is a ForwardOneToOneDescriptor instance. kudos_token_cloned_from Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. kudos_token_cloned_from_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. kudos_token_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. receive_url URL used for indirect send. Deprecated in favor of receive_url_for_recipient Returns: str: URL for recipient. receive_url_for_recipient URL used for indirect send. Deprecated in favor of receive_url_for_recipient Returns: str: URL for recipient. recipient_profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. recipient_profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. sender_profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. sender_profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. trust_url A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Contract Contract(self, *args, **kwargs) Contract(id, created_on, modified_on, address, is_latest, network) address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method Contract._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Contract._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Contract._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Contract._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. is_latest A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. kudos_contract Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. network A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Wallet Wallet(self, *args, **kwargs) DEPRECATED. Kudos Address where the tokens are stored. Currently not used. Instead we are using preferred_payout_address for now. Attributes: address (TYPE): Description profile (TYPE): Description address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method Wallet._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Wallet._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Wallet._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Wallet._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. preferred_kudos_wallet Accessor to the related object on the reverse side of a one-to-one relation. In the example:: class Restaurant(Model): place = OneToOneField(Place, related_name='restaurant') Place.restaurant is a ReverseOneToOneDescriptor instance. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. BulkTransferCoupon BulkTransferCoupon(self, *args, **kwargs) Model representing a bulk send of Kudos bulk_transfer_redemptions Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. comments_to_put_in_kudos_transfer A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. current_uses A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method BulkTransferCoupon._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method BulkTransferCoupon._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method BulkTransferCoupon._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method BulkTransferCoupon._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. make_paid_for_first_minutes A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. metadata A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. num_uses_remaining A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. num_uses_total A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. secret A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. sender_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. sender_pk A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. sender_profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. sender_profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. tag A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. token Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. token_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. BulkTransferRedemption BulkTransferRedemption(self, *args, **kwargs) Model representing a bulk send of Kudos coupon Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. coupon_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method BulkTransferRedemption._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method BulkTransferRedemption._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method BulkTransferRedemption._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method BulkTransferRedemption._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. ip_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. kudostransfer Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. kudostransfer_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. redeemed_by Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. redeemed_by_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. TokenRequest TokenRequest(self, *args, **kwargs) Define the TokenRequest model. approved A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. artist A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. artwork_url A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. bounty_url A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. description A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method TokenRequest._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method TokenRequest._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method TokenRequest._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method TokenRequest._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. metadata A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. network A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. numClonesAllowed A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. platform A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. priceFinney A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. processed A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. rejection_reason A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. tags A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. to_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. mint TokenRequest.mint(self, gas_price_gwei=None) Approve / mint this token. TransferEnabledFor TransferEnabledFor(self, *args, **kwargs) Model that represents the ability to send a Kudos, i f token.send_enabled_for_non_gitcoin_admins is true. _method TransferEnabledFor._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method TransferEnabledFor._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method TransferEnabledFor._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method TransferEnabledFor._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. token Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. token_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed.","title":"Models"},{"location":"kudos/router/","text":"kudos.router Define dashboard specific DRF API routes. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . TokenSerializer TokenSerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Meta TokenSerializer.Meta(self, /, *args, **kwargs) WalletSerializer WalletSerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) Meta WalletSerializer.Meta(self, /, *args, **kwargs) WalletViewSet WalletViewSet(self, **kwargs) filter_backends Built-in immutable sequence. If no argument is given, the constructor returns an empty tuple. If iterable is specified the tuple is initialized from iterable's items. If the argument is a tuple, the return value is the same object. queryset Represent a lazy database lookup for a set of objects. WalletSerializer WalletViewSet.WalletSerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs) TokenViewSet TokenViewSet(self, **kwargs) filter_backends Built-in immutable sequence. If no argument is given, the constructor returns an empty tuple. If iterable is specified the tuple is initialized from iterable's items. If the argument is a tuple, the return value is the same object. queryset Handle the manager queryset for Tokens. TokenSerializer TokenViewSet.TokenSerializer(self, instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs)","title":"Routers"},{"location":"kudos/utils/","text":"kudos.utils Define utility functions. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . humanize_name humanize_name(name) Turn snake_case into Snake Case. Returns: str: The humanized name. computerize_name computerize_name(name) Turn Humanized Name into humanized_name. Returns: str: computerized_name get_rarity_score get_rarity_score(num_clones_allowed) Calculate rarity metrics based on the num_clones_allowed. Args: num_clones_allowed (int): Number of kudos clones allowed. Returns: str: Rarity description. Raises: ValueError: Raises an error if the number of clones allowed in less than one. KudosError KudosError(self, /, *args, **kwargs) Base class for exceptions in this module. KudosTransferNotFound KudosTransferNotFound(self, kudos_id, message) Exception is raised when web3 and the database are out of sync. Attributes: kudos_id -- the kudos id that has mismatched data message -- explanation of the error KudosMismatch KudosMismatch(self, kudos_id, kudos_web3, kudos_db, message) Exception is raised when web3 and the database are out of sync. Attributes: kudos_id: The kudos id that has mismatched data. kudos_web3: Kudos attributes on web3. kudos_db: Kudos attritubes in the database. message: Explanation of the error. KudosContract KudosContract(self, network='localhost', sockets=False) A class represending the Kudos.sol contract. Note: There are two types of interactions that can be done on the Solidity contract, - call() - transact() A call() is just a getter, and does not require gas, or an account to transact with. A transact() or transaction requires gas and typically changes state on the contract. A transaction requires an account, because it needs somewhere to pull the gas from. When working in Javascript and web3js, Metamask is used to handle this interaction. When working in Python and web3py, there is no interaction with MetaMask so this needs to be handled behind the scenes, by providing the account and private_key to web3py to create the raw transaction. Attributes: address (str): Eth address of the kudos contract network (str): The blockchain network (localhost, rinkeby, ropsten, mainnet) get_kudos_map KudosContract.get_kudos_map(kudos, metadata) Pass in a kudos array that is returned from web3, convert to dictionary. Use this to operate on the database. Args: kudos (list): A kudos object returned from the Kudos.sol contract. Soldidity returns the Kudos strcut as an array. metadata (dict): The metadata return from the tokenURI. Returns: dict: Kudos dictionary with key/values to be used to interact with the database. may_require_key KudosContract.may_require_key(f) Decorator to check if the operation needs a private key. log_args KudosContract.log_args(f) Decorator to log out the contract args. retry KudosContract.retry(f) Decorator to retry a function if it failed. remove_kudos_orphans_db KudosContract.remove_kudos_orphans_db(self) DEPRECATED. This funciton must be updated to use. Sync up existing kudos from the blockchain to the database. Then remove all \"orphaned Kudos\" from the database. sync_db_without_txid KudosContract.sync_db_without_txid(self, kudos_id) DEPRECATED. The regular sync_db method should be preferred over this. This method is only to be used if you are syncing kudos directly from the blockchain and don't know the txid. The problem with not having a txid that is there is no good way to related it back to the kudos_transfer object. Which means we don't know who the original sender is. Args: kudos_id (int): Kudos id. sync_db KudosContract.sync_db(self, kudos_id, txid) Sync up the Kudos contract on the blockchain with the database. Args: kudos_id (int): Kudos Id txid (str): The transaction hash. mint KudosContract.mint(self, *args, account=None, private_key=None, skip_sync=False, gas_price_gwei=None, dont_wait_for_kudos_id_return_tx_hash_instead=False) Contract transaction method. Mint a new Gen0 Kudos on the blockchain. Not to be confused with clone. A clone() operation is only valid for an already existing Gen0 Kudos. From Kudos.sol: Args: *args: From Kudos.sol: mint( address _to, uint256 _priceFinney, uint256 _numClonesAllowed, string _tokenURI, ) account (str, optional): Public account address. Not needed for localhost testing. private_key (str, optional): Private key for account. Not needed for localhost testing. skip_sync (bool, optional): If True, don't sync the database after the mint. Returns: int: If a sync did occur, returns the kudos_id sync_latest KudosContract.sync_latest(self, the_buffer=0) Contract transaction method. Sync the latest kudos from the chain clone KudosContract.clone(self, *args, account=None, private_key=None, skip_sync=False) Contract transaction method. Args: *args: From Kudos.sol clone( address _to, uint256 _tokenId, uint256 numClonesRequested ) account (str, optional): Public account address. Not needed for localhost testing. private_key (str, optional): Private key for account. Not needed for localhost testing. skip_sync (bool, optional): If True, don't sync the database after the mint. Returns: int: The kudos_id. burn KudosContract.burn(self, *args, account=None, private_key=None, skip_sync=False) Contract transaction method. Args: *args: From Kudos.sol burn( address _owner, uint256 _tokenId, ) account (str, optional): Public account address. Not needed for localhost testing. private_key (str, optional): Private key for account. Not needed for localhost testing. skip_sync (bool, optional): If True, don't sync the database after the mint. Returns: int: The kudos_id. getKudosById KudosContract.getKudosById(self, *args, to_dict=False) Contract call method. Args: *args: From Kudos.sol: getKudosById(uint256 tokenId) to_dict (bool, optional): Return a dictionary mapping instead of an array. Returns: list or dict: From Kudos.sol returns (uint256 priceFinney, uint256 numClonesAllowed, uint256 numClonesInWild, uint256 clonedFromId) getLatestId KudosContract.getLatestId(self) Contract call method. From Kudos.sol: getLatestId() view public returns (uint256 tokenId) Returns: int: The latest token id. gen0_exists_db KudosContract.gen0_exists_db(self, kudos_name) Helper method. Args: kudos_name (TYPE): Description Returns: bool: Whether or not the token name exists. create_token_uri_url KudosContract.create_token_uri_url(self, **kwargs) Create a tokenURI object, upload it to IPFS, and return the URL. Keyword Args: name (str): Name of the kudos. image (str): Image location of the kudos. Should be a link to an image on the web. description (str): Word description of the kudos. attributes (dict): Dictionary containing attributes of the kudos. tags (str): comma delimited tags. number_of_clones_allowed (int): self explanatory. rarity (int): integer from 0 to 100 (0 is most common). external_url (str): External link to where the Kudos lives on the Gitcoin site. background_color (str): Hex code. Returns: str: URL location on IPFS where the URI data is stored. get_to_emails get_to_emails(params) Get a list of email address to send the alert to, in this priority: get_emails_master() pulls email addresses from the user's public Github account. If an email address is included in the Tips/Kudos form, append that to the email list. Args: params (dict): A dictionary parsed form the POST request. Typically this is a POST request coming in from a Tips/Kudos send. Returns: list: An array of email addresses to send the email to.","title":"Utilities"},{"location":"kudos/views/","text":"kudos.views Define view for the Kudos app. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . get_profile get_profile(handle) Get the gitcoin profile. TODO: This might be depreacted in favor of the sync_profile function in the future. Args: handle (str): The github handle. Returns: obj: The profile model object. about about(request) Render the Kudos 'about' page. marketplace marketplace(request) Render the Kudos 'marketplace' page. search search(request) Render the search page. TODO: This might no longer be used. details details(request, kudos_id, name) Render the Kudos 'detail' page. mint mint(request) Render the Kudos 'mint' page. This is mostly a placeholder for future functionality. get_primary_from_email get_primary_from_email(params, request) Find the primary_from_email address. This function finds the address using this priority: If the email field is filed out in the Send POST request, use the fromEmail field. If the user is logged in, they should have an email address associated with their account. Use this as the second option. request_user_email . If all else fails, attempt to pull the email from the user's github account. Args: params (dict): A dictionary parsed form the POST request. Typically this is a POST request coming in from a Tips/Kudos send. Returns: str: The primary_from_email string. kudos_preferred_wallet kudos_preferred_wallet(request, handle) Returns the address, if any, that someone would like to be send kudos directly to. send_2 send_2(request) Handle the first start of the Kudos email send. This form is filled out before the 'send' button is clicked. send_3 send_3(request) Handle the third stage of sending a kudos (the POST). This function is derived from send_tip_3. The request to send the kudos is added to the database, but the transaction has not happened yet. The txid is added in send_kudos_4 . Returns: JsonResponse: The response with success state. csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. send_4 send_4(request) Handle the fourth stage of sending a tip (the POST). Once the metamask transaction is complete, add it to the database. Returns: JsonResponse: response with success state. csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. receive receive(request, key, txid, network) Handle the receiving of a kudos (the POST). Returns: TemplateResponse: the UI with the kudos confirmed","title":"Views"},{"location":"linkshortener/admin/","text":"linkshortener.admin LinkShortenerAdmin LinkShortenerAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified.","title":"Admin"},{"location":"linkshortener/commands/","text":"linkshortener.management.commands.create_shortlinks Copyright (C) 2019 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'.","title":"Commands"},{"location":"linkshortener/models/","text":"linkshortener.models Link Link(self, *args, **kwargs) Link(id, created_on, modified_on, comments, url, shortcode, uses) comments A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method Link._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Link._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Link._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Link._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. shortcode A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. url A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. uses A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed.","title":"Models"},{"location":"linkshortener/views/","text":"linkshortener.views","title":"Views"},{"location":"marketing/admin/","text":"marketing.admin Copyright (C) 2019 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . GeneralAdmin GeneralAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. LeaderboardRankAdmin LeaderboardRankAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. EmailEventAdmin EmailEventAdmin(self, model, admin_site) ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. GithubEventAdmin GithubEventAdmin(self, model, admin_site) ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. SlackPresenceAdmin SlackPresenceAdmin(self, model, admin_site) ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. MatchAdmin MatchAdmin(self, model, admin_site) ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. AlumniAdmin AlumniAdmin(self, model, admin_site) Define the Alumni admin layout. list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. get_queryset AlumniAdmin.get_queryset(self, request) Override the get_queryset method to include FK lookups. get_profile_email AlumniAdmin.get_profile_email(self, obj) Get the profile email address. get_profile_username AlumniAdmin.get_profile_username(self, obj) Get the profile username. EmailSubscriberAdmin EmailSubscriberAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. raw_id_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. SlackUserAdmin SlackUserAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. search_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified.","title":"Admin"},{"location":"marketing/commands/","text":"marketing.management.commands.assemble_leaderboards Define the management command to assemble leaderboard rankings. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . default_ranks default_ranks() Generate a dictionary of nested dictionaries defining default ranks. Returns: dict: A nested dictionary mapping of all default ranks with empty dicts. Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. marketing.management.commands.backfill_analytics Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. marketing.management.commands.bounty_feedback_email Copyright (C) 2019 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. marketing.management.commands.expiration_start_work Copyright (C) 2019 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. marketing.management.commands.expiration_tip Copyright (C) 2019 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. marketing.management.commands.expiration Copyright (C) 2019 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. marketing.management.commands.funder_stale_email Define the stale funder email management command for background execution. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) Define the stale funder management command class. help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. add_arguments Command.add_arguments(self, parser) Define the added arguments to handle for the management command. handle Command.handle(self, *args, **options) Handle the stale funder management command logic. marketing.management.commands.gdpr_reconsent_eu Define the GDPR reconsent command for EU users. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. marketing.management.commands.gdpr_update_email Copyright (C) 2019 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. marketing.management.commands.new_bounties_email Copyright (C) 2019 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. marketing.management.commands.pending_start_work_actions Copyright (C) 2019 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. marketing.management.commands.process_email_events Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. marketing.management.commands.pull_github Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. marketing.management.commands.pull_stats Copyright (C) 2019 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,either version 3 of the License,or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not,see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. marketing.management.commands.remarket_bounties Copyright (C) 2019 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. marketing.management.commands.roundup Copyright (C) 2019 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. marketing.management.commands.send_quarterly_stats Copyright (C) 2019 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. marketing.management.commands.sync_github Copyright (C) 2019 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. marketing.management.commands.sync_keywords Copyright (C) 2019 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. marketing.management.commands.sync_mail Copyright (C) 2019 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. marketing.management.commands.sync_slack Copyright (C) 2019 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. marketing.management.commands.debug_test Copyright (C) 2019 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'.","title":"Commands"},{"location":"marketing/mails/","text":"marketing.mails Define the standard marketing email logic. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . send_mail send_mail(from_email, _to_email, subject, body, html=False, from_name='Gitcoin.co', cc_emails=None, categories=None, debug_mode=False) Send email via SendGrid. setup_lang setup_lang(to_email) Activate the User's language preferences based on their email address. Args: to_email (str): The email address to lookup language preferences for.","title":"Mails"},{"location":"marketing/models/","text":"marketing.models Define the marketing models and related logic. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Alumni Alumni(self, *args, **kwargs) Alumni(id, created_on, modified_on, profile, organization, comments, public) comments A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method Alumni._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Alumni._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Alumni._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Alumni._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. organization A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. public A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. EmailSubscriber EmailSubscriber(self, *args, **kwargs) EmailSubscriber(id, created_on, modified_on, email, source, active, newsletter, preferences, metadata, priv, github, keywords, profile, form_submission_records) active A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. email A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. form_submission_records A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method EmailSubscriber._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method EmailSubscriber._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method EmailSubscriber._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method EmailSubscriber._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) github A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. keywords A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. metadata A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. newsletter A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. preferences A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. priv A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. source A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. ManualStat ManualStat(self, *args, **kwargs) Define the manual stat model; which records stats that are not available on the platform comment A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. date A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method ManualStat._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method ManualStat._method(self, *, field=<django.db.models.fields.DateTimeField: date>, is_next=True, **kwargs) _method ManualStat._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method ManualStat._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method ManualStat._method(self, *, field=<django.db.models.fields.DateTimeField: date>, is_next=False, **kwargs) _method ManualStat._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. key A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. val A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Stat Stat(self, *args, **kwargs) Stat(id, created_on, modified_on, key, val) _method Stat._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Stat._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Stat._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Stat._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. key A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. val A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. LeaderboardRankQuerySet LeaderboardRankQuerySet(self, model=None, query=None, using=None, hints=None) Handle the manager queryset for Leaderboard Ranks. active LeaderboardRankQuerySet.active(self) Filter results to only active LeaderboardRank objects. LeaderboardRank LeaderboardRank(self, *args, **kwargs) Define the Leaderboard Rank model. active A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. amount A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. count A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method LeaderboardRank._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method LeaderboardRank._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method LeaderboardRank._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method LeaderboardRank._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) github_username A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. leaderboard A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. product A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. rank A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. tech_keywords A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Match Match(self, *args, **kwargs) Match(id, created_on, modified_on, email, bounty, direction, github_username) bounty Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. bounty_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. direction A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. email A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method Match._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Match._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Match._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Match._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) github_username A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Keyword Keyword(self, *args, **kwargs) Keyword(id, created_on, modified_on, keyword) _method Keyword._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Keyword._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Keyword._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Keyword._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. keyword A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. SlackUser SlackUser(self, *args, **kwargs) SlackUser(id, created_on, modified_on, username, email, last_seen, last_unseen, profile, times_seen, times_unseen) email A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method SlackUser._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method SlackUser._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method SlackUser._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method SlackUser._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. last_seen A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. last_unseen A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. presences Accessor to the related objects manager on the reverse side of a many-to-one relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Parent.children is a ReverseManyToOneDescriptor instance. Most of the implementation is delegated to a dynamically defined manager class built by create_forward_many_to_many_manager() defined below. profile A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. times_seen A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. times_unseen A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. username A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. SlackPresence SlackPresence(self, *args, **kwargs) SlackPresence(id, created_on, modified_on, slackuser, status) _method SlackPresence._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method SlackPresence._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method SlackPresence._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method SlackPresence._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. slackuser Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. slackuser_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. status A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. GithubEvent GithubEvent(self, *args, **kwargs) GithubEvent(id, created_on, modified_on, profile, what, repo, payload) _method GithubEvent._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method GithubEvent._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method GithubEvent._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method GithubEvent._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. payload A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile Accessor to the related object on the forward side of a many-to-one or one-to-one (via ForwardOneToOneDescriptor subclass) relation. In the example:: class Child(Model): parent = ForeignKey(Parent, related_name='children') Child.parent is a ForwardManyToOneDescriptor instance. profile_id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. repo A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. what A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. GithubOrgToTwitterHandleMapping GithubOrgToTwitterHandleMapping(self, *args, **kwargs) GithubOrgToTwitterHandleMapping(id, created_on, modified_on, github_orgname, twitter_handle) _method GithubOrgToTwitterHandleMapping._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method GithubOrgToTwitterHandleMapping._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method GithubOrgToTwitterHandleMapping._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method GithubOrgToTwitterHandleMapping._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) github_orgname A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. twitter_handle A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. EmailEvent EmailEvent(self, *args, **kwargs) EmailEvent(id, created_on, modified_on, email, event, category, ip_address) category A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. email A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. event A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method EmailEvent._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method EmailEvent._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method EmailEvent._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method EmailEvent._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. ip_address A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. AccountDeletionRequest AccountDeletionRequest(self, *args, **kwargs) AccountDeletionRequest(id, created_on, modified_on, handle, profile) _method AccountDeletionRequest._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method AccountDeletionRequest._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method AccountDeletionRequest._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method AccountDeletionRequest._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) handle A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. profile A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. EmailSupressionList EmailSupressionList(self, *args, **kwargs) EmailSupressionList(id, created_on, modified_on, email, metadata, comments) comments A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. email A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method EmailSupressionList._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method EmailSupressionList._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method EmailSupressionList._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method EmailSupressionList._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. metadata A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. MarketingCallback MarketingCallback(self, *args, **kwargs) Define the Marketing Callback model; which is used to peform various functions when a user with a specific secret key visits the site. _method MarketingCallback._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method MarketingCallback._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method MarketingCallback._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method MarketingCallback._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. key A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. msg A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. val A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. Job Job(self, *args, **kwargs) Job(id, created_on, modified_on, title, description, link, active) active A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. description A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method Job._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method Job._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method Job._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method Job._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. link A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. title A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. RoundupEmail RoundupEmail(self, *args, **kwargs) RoundupEmail(id, created_on, modified_on, from_email, from_name, subject, body, kudos_ids, highlights, sponsor, bounties_spec) body A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. bounties_spec A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. from_email A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. from_name A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method RoundupEmail._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method RoundupEmail._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method RoundupEmail._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method RoundupEmail._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) highlights A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. kudos_ids A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. sponsor A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. subject A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed.","title":"Models"},{"location":"marketing/stats/","text":"marketing.stats Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . grants grants() Creates a stats entry for 'grants', which stores the total value of all grant contributions in the system to date","title":"Stats"},{"location":"marketing/utils/","text":"marketing.utils Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . validate_slack_integration validate_slack_integration(token, channel, message=None, icon_url='') Validate the Slack token and channel combination by posting a message. Args: token (str): The Slack API token. channel (str): The Slack channel to send the message. message (str): The Slack message to be sent. Defaults to: The Gitcoin Slack integration is working fine. icon_url (str): The URL to the avatar to be used. Defaults to: the gitcoin helmet. Attributes: result (dict): The result dictionary defining success status and error message. error_messages (dict): The dictionary mapping of expected error result types. message (str): The response message to display to the user. sc (SlackClient): The slack client object. response (dict): The Slack response payload. error (str): The error code Raises: SlackClientError: The exception is raised for any Slack-specific error. Returns: str: The response message. validate_discord_integration validate_discord_integration(webhook_url, message=None, icon_url='') Validate the Discord webhook URL by posting a message. Args: webhook_url (str): The Discord webhook URL. message (str): The Discord message to be sent. Defaults to: The Gitcoin Discord integration is working fine. icon_url (str): The URL to the avatar to be used. Defaults to: the gitcoin helmet. Attributes: result (dict): The result dictionary defining success status and error message. message (str): The response message to display to the user. response (obj): The Discord response object - refer to python-requests API Raises: requests.exception.HTTPError: The exception is raised for any HTTP error. Returns: str: The response message. get_platform_wide_stats get_platform_wide_stats(since_last_n_days=90) Get platform wide stats for quarterly stats email. Args: since_last_n_days (int): The number of days from now to retrieve stats. Returns: dict: The platform statistics dictionary. func_name func_name() Determine the calling function's name. Returns: str: The parent method's name.","title":"Utilities"},{"location":"marketing/views/","text":"marketing.views Define the marketing views. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . matching_settings matching_settings(request) Handle viewing and updating EmailSubscriber matching settings. TODO: * Migrate this to a form and handle validation. * Migrate Keyword to taggit. * Maybe migrate keyword information to Profile instead of using ES? Returns: TemplateResponse: The populated matching template. email_settings email_settings(request, key) Display email settings. Args: key (str): The private key to lookup email subscriber data. TODO: * Remove all ES.priv_key lookups and use request.user only. * Remove settings_helper_get_auth usage. Returns: TemplateResponse: The email settings view populated with ES data. slack_settings slack_settings(request) Display and save user's slack settings. Returns: TemplateResponse: The user's slack settings template response. token_settings token_settings(request) Display and save user's token settings. Returns: TemplateResponse: The user's token settings template response. ens_settings ens_settings(request) Display and save user's ENS settings. Returns: TemplateResponse: The user's ENS settings template response. account_settings account_settings(request) Display and save user's Account settings. Returns: TemplateResponse: The user's Account settings template response. job_settings job_settings(request) Display and save user's Account settings. Returns: TemplateResponse: The user's Account settings template response. org_settings org_settings(request) Display and save user's Account settings. Returns: TemplateResponse: The user's Account settings template response. leaderboard leaderboard(request, key='') Display the leaderboard for top earning or paying profiles. Args: key (str): The leaderboard display type. Defaults to: quarterly_earners. Returns: TemplateResponse: The leaderboard template response.","title":"Views"},{"location":"marketing/webbhookviews/","text":"marketing.webhookviews process process(request) Process email webhook callback data. csrf_exempt bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed.","title":"Webhook Views"},{"location":"retail/commands/","text":"retail.management.commands.warm_cache Copyright (C) 2019 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . Command Command(self, stdout=None, stderr=None, no_color=False, force_color=False) help str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'.","title":"Commands"},{"location":"retail/emails/","text":"retail.emails Copyright (C) 2019 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . render_kudos_email render_kudos_email(to_email, kudos_transfer, is_new, html_template, text_template=None) Summary Args: to_emails (list): An array of email addresses to send the email to. kudos_transfer (model): An instance of the kudos.model.KudosTransfer object. This contains the information about the kudos that will be cloned. is_new (TYPE): Description Returns: tup: response_html, response_txt render_funder_stale render_funder_stale(github_username, days=60, time_as_str='a couple months') Render the stale funder email template. Args: github_username (str): The Github username to be referenced in the email. days (int): The number of days back to reference. time_as_str (str): The human readable length of time to reference. Returns: str: The rendered response as a string. render_share_bounty render_share_bounty(to_email, msg, from_profile, invite_url=None, kudos_invite=False) Render the share bounty email template. Args: to_email: user to send the email to. msg: the message sent in the email. Returns: str: The rendered response as a string. funder_payout_reminder funder_payout_reminder(request) Display the funder payment reminder email template. Params: username (str): The Github username to reference in the email. Returns: HttpResponse: The HTML version of the templated HTTP response. no_applicant_reminder no_applicant_reminder(request) Display the no applicant for bounty reminder email template. Params: username (str): The Github username to reference in the email. Returns: HttpResponse: The HTML version of the templated HTTP response. funder_stale funder_stale(request) Display the stale funder email template. Params: limit (int): The number of days to limit the scope of the email to. duration_copy (str): The copy to use for associated duration text. username (str): The Github username to reference in the email. Returns: HttpResponse: The HTML version of the templated HTTP response.","title":"Emails"},{"location":"retail/helpers/","text":"retail.helpers Copyright (C) 2019 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ .","title":"Helpers"},{"location":"retail/templatetags/","text":"retail.templatetags.is_in_list Define the is_in_list template tag to allow if in list checking in templates. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . is_in_list is_in_list(value, input_list) Determine whether or not the value is in the provided list. Args: value: Any value that could be a member of the provided list. input_list (list): A list of any primitive types to be checked. Usage: {% if ' '|is_in_list:'about,slack,home,help,mission' %} Returns: bool: Whether or not the value exists in the input_list. retail.templatetags.matches Define the is_in_list template tag to allow if in list checking in templates. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . matches matches(text, pattern) Determine whether or not the value matches regex pattern. Args: value: Any value. pattern : Regex pattern against which the text is matched. Usage: {% if ' '|matches:'^/explorer$' %} Returns: bool: Whether or not the value matches the pattern.","title":"Template Tags"},{"location":"retail/utils/","text":"retail.utils Define the Retail utility methods and general logic. Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . build_stat_results build_stat_results(keyword=None) Buidl the results page context. Args: keyword (str): The keyword to build statistic results.","title":"Utilities"},{"location":"retail/views/","text":"retail.views Copyright (C) 2020 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . how_it_works how_it_works(request, work_type) Show How it Works / Funder page. mission mission(request) Render the Mission response. vision vision(request) Render the Vision response. avatar avatar(request) Render the avatar response. products products(request) Render the Products response. not_a_token not_a_token(request) Render the not_a_token response. results results(request, keyword=None) Render the Results response. activity activity(request) Render the Activity response.","title":"Views"},{"location":"tdi/admin/","text":"tdi.admin Copyright (C) 2019 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . GeneralAdmin GeneralAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. WhitepaperAccessRequestAdmin WhitepaperAccessRequestAdmin(self, model, admin_site) list_display Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. ordering Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified. readonly_fields Built-in mutable sequence. If no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified.","title":"Admin"},{"location":"tdi/models/","text":"tdi.models Copyright (C) 2019 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ . AccessCodes AccessCodes(self, *args, **kwargs) AccessCodes(id, created_on, modified_on, invitecode, maxuses) _method AccessCodes._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method AccessCodes._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method AccessCodes._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method AccessCodes._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. invitecode A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. maxuses A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. WhitepaperAccess WhitepaperAccess(self, *args, **kwargs) WhitepaperAccess(id, created_on, modified_on, invitecode, email, ip) email A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method WhitepaperAccess._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method WhitepaperAccess._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method WhitepaperAccess._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method WhitepaperAccess._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. invitecode A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. ip A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. WhitepaperAccessRequest WhitepaperAccessRequest(self, *args, **kwargs) WhitepaperAccessRequest(id, created_on, modified_on, comments, email, role, ip, processed) comments A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. email A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. _method WhitepaperAccessRequest._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=True, **kwargs) _method WhitepaperAccessRequest._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=True, **kwargs) _method WhitepaperAccessRequest._method(self, *, field=<django.db.models.fields.DateTimeField: created_on>, is_next=False, **kwargs) _method WhitepaperAccessRequest._method(self, *, field=<django.db.models.fields.DateTimeField: modified_on>, is_next=False, **kwargs) id A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. ip A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. processed A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed. role A wrapper for a deferred-loading field. When the value is read from this object the first time, the query is executed.","title":"Models"},{"location":"tdi/views/","text":"tdi.views Copyright (C) 2019 Gitcoin Core This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/ .","title":"Views"}]}